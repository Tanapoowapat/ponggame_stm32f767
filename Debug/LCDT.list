
LCDT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab10  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  0800ad10  0800ad10  0001ad10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1d4  0800b1d4  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800b1d4  0800b1d4  0001b1d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b1dc  0800b1dc  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1dc  0800b1dc  0001b1dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b1e0  0800b1e0  0001b1e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800b1e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  20000208  0800b3ec  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000514  0800b3ec  00020514  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c00  00000000  00000000  00020236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000372c  00000000  00000000  00037e36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001368  00000000  00000000  0003b568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011d0  00000000  00000000  0003c8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b586  00000000  00000000  0003daa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a306  00000000  00000000  00069026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105932  00000000  00000000  0008332c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00188c5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000635c  00000000  00000000  00188cb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000208 	.word	0x20000208
 800021c:	00000000 	.word	0x00000000
 8000220:	0800acf8 	.word	0x0800acf8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000020c 	.word	0x2000020c
 800023c:	0800acf8 	.word	0x0800acf8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9ac 	b.w	80009d8 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468e      	mov	lr, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14d      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000716:	428a      	cmp	r2, r1
 8000718:	4694      	mov	ip, r2
 800071a:	d969      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b152      	cbz	r2, 8000738 <__udivmoddi4+0x30>
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	f1c2 0120 	rsb	r1, r2, #32
 800072a:	fa20 f101 	lsr.w	r1, r0, r1
 800072e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000732:	ea41 0e03 	orr.w	lr, r1, r3
 8000736:	4094      	lsls	r4, r2
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	0c21      	lsrs	r1, r4, #16
 800073e:	fbbe f6f8 	udiv	r6, lr, r8
 8000742:	fa1f f78c 	uxth.w	r7, ip
 8000746:	fb08 e316 	mls	r3, r8, r6, lr
 800074a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074e:	fb06 f107 	mul.w	r1, r6, r7
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f106 30ff 	add.w	r0, r6, #4294967295
 800075e:	f080 811f 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 811c 	bls.w	80009a0 <__udivmoddi4+0x298>
 8000768:	3e02      	subs	r6, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb3 f0f8 	udiv	r0, r3, r8
 8000774:	fb08 3310 	mls	r3, r8, r0, r3
 8000778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077c:	fb00 f707 	mul.w	r7, r0, r7
 8000780:	42a7      	cmp	r7, r4
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x92>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 33ff 	add.w	r3, r0, #4294967295
 800078c:	f080 810a 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000790:	42a7      	cmp	r7, r4
 8000792:	f240 8107 	bls.w	80009a4 <__udivmoddi4+0x29c>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2600      	movs	r6, #0
 80007a2:	b11d      	cbz	r5, 80007ac <__udivmoddi4+0xa4>
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	2300      	movs	r3, #0
 80007a8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80ef 	beq.w	800099a <__udivmoddi4+0x292>
 80007bc:	2600      	movs	r6, #0
 80007be:	e9c5 0100 	strd	r0, r1, [r5]
 80007c2:	4630      	mov	r0, r6
 80007c4:	4631      	mov	r1, r6
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f683 	clz	r6, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb61 0303 	sbc.w	r3, r1, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	469e      	mov	lr, r3
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d0e0      	beq.n	80007ac <__udivmoddi4+0xa4>
 80007ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ee:	e7dd      	b.n	80007ac <__udivmoddi4+0xa4>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8092 	bne.w	8000922 <__udivmoddi4+0x21a>
 80007fe:	eba1 010c 	sub.w	r1, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2601      	movs	r6, #1
 800080c:	0c20      	lsrs	r0, r4, #16
 800080e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000812:	fb07 1113 	mls	r1, r7, r3, r1
 8000816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	4288      	cmp	r0, r1
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0101 	adds.w	r1, ip, r1
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	4288      	cmp	r0, r1
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb1 f0f7 	udiv	r0, r1, r7
 800083c:	fb07 1110 	mls	r1, r7, r0, r1
 8000840:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 31ff 	add.w	r1, r0, #4294967295
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4608      	mov	r0, r1
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79c      	b.n	80007a2 <__udivmoddi4+0x9a>
 8000868:	f1c6 0720 	rsb	r7, r6, #32
 800086c:	40b3      	lsls	r3, r6
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa01 f306 	lsl.w	r3, r1, r6
 800087e:	431c      	orrs	r4, r3
 8000880:	40f9      	lsrs	r1, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f306 	lsl.w	r3, r0, r6
 800088a:	fbb1 f8f9 	udiv	r8, r1, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 1118 	mls	r1, r9, r8, r1
 8000898:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	4288      	cmp	r0, r1
 80008a2:	fa02 f206 	lsl.w	r2, r2, r6
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	4288      	cmp	r0, r1
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008c8:	fb09 1110 	mls	r1, r9, r0, r1
 80008cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	458e      	cmp	lr, r1
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	458e      	cmp	lr, r1
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4461      	add	r1, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba1 010e 	sub.w	r1, r1, lr
 80008f6:	42a1      	cmp	r1, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15d      	cbz	r5, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb61 010e 	sbc.w	r1, r1, lr
 800090a:	fa01 f707 	lsl.w	r7, r1, r7
 800090e:	fa22 f306 	lsr.w	r3, r2, r6
 8000912:	40f1      	lsrs	r1, r6
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c5 7100 	strd	r7, r1, [r5]
 800091a:	2600      	movs	r6, #0
 800091c:	4631      	mov	r1, r6
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	f1c2 0320 	rsb	r3, r2, #32
 8000926:	40d8      	lsrs	r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa21 f303 	lsr.w	r3, r1, r3
 8000930:	4091      	lsls	r1, r2
 8000932:	4301      	orrs	r1, r0
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000940:	fb07 3610 	mls	r6, r7, r0, r3
 8000944:	0c0b      	lsrs	r3, r1, #16
 8000946:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800094a:	fb00 f60e 	mul.w	r6, r0, lr
 800094e:	429e      	cmp	r6, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f100 38ff 	add.w	r8, r0, #4294967295
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	429e      	cmp	r6, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3802      	subs	r0, #2
 8000966:	4463      	add	r3, ip
 8000968:	1b9b      	subs	r3, r3, r6
 800096a:	b289      	uxth	r1, r1
 800096c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000970:	fb07 3316 	mls	r3, r7, r6, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb06 f30e 	mul.w	r3, r6, lr
 800097c:	428b      	cmp	r3, r1
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0101 	adds.w	r1, ip, r1
 8000984:	f106 38ff 	add.w	r8, r6, #4294967295
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	428b      	cmp	r3, r1
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3e02      	subs	r6, #2
 8000990:	4461      	add	r1, ip
 8000992:	1ac9      	subs	r1, r1, r3
 8000994:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e705      	b.n	80007ac <__udivmoddi4+0xa4>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e3      	b.n	800076c <__udivmoddi4+0x64>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6f8      	b.n	800079a <__udivmoddi4+0x92>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4646      	mov	r6, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4640      	mov	r0, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4630      	mov	r0, r6
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 80009dc:	b590      	push	{r4, r7, lr}
 80009de:	b08b      	sub	sp, #44	; 0x2c
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4604      	mov	r4, r0
 80009e4:	4608      	mov	r0, r1
 80009e6:	4611      	mov	r1, r2
 80009e8:	461a      	mov	r2, r3
 80009ea:	4623      	mov	r3, r4
 80009ec:	80fb      	strh	r3, [r7, #6]
 80009ee:	4603      	mov	r3, r0
 80009f0:	80bb      	strh	r3, [r7, #4]
 80009f2:	460b      	mov	r3, r1
 80009f4:	807b      	strh	r3, [r7, #2]
 80009f6:	4613      	mov	r3, r2
 80009f8:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 80009fa:	887b      	ldrh	r3, [r7, #2]
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 8000a02:	887b      	ldrh	r3, [r7, #2]
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	f1c3 0301 	rsb	r3, r3, #1
 8000a0a:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]

    while (x >= y)
 8000a14:	e061      	b.n	8000ada <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 8000a16:	88fa      	ldrh	r2, [r7, #6]
 8000a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1a:	1ad3      	subs	r3, r2, r3
 8000a1c:	613b      	str	r3, [r7, #16]
 8000a1e:	e018      	b.n	8000a52 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	b298      	uxth	r0, r3
 8000a24:	6a3b      	ldr	r3, [r7, #32]
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	88bb      	ldrh	r3, [r7, #4]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	883a      	ldrh	r2, [r7, #0]
 8000a30:	4619      	mov	r1, r3
 8000a32:	f000 fbb9 	bl	80011a8 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	b298      	uxth	r0, r3
 8000a3a:	6a3b      	ldr	r3, [r7, #32]
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	88ba      	ldrh	r2, [r7, #4]
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	883a      	ldrh	r2, [r7, #0]
 8000a46:	4619      	mov	r1, r3
 8000a48:	f000 fbae 	bl	80011a8 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	88fa      	ldrh	r2, [r7, #6]
 8000a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a56:	4413      	add	r3, r2
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	dde0      	ble.n	8000a20 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8000a5e:	88fa      	ldrh	r2, [r7, #6]
 8000a60:	6a3b      	ldr	r3, [r7, #32]
 8000a62:	1ad3      	subs	r3, r2, r3
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	e018      	b.n	8000a9a <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	b298      	uxth	r0, r3
 8000a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	88bb      	ldrh	r3, [r7, #4]
 8000a72:	4413      	add	r3, r2
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	883a      	ldrh	r2, [r7, #0]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	f000 fb95 	bl	80011a8 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	b298      	uxth	r0, r3
 8000a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	88ba      	ldrh	r2, [r7, #4]
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	883a      	ldrh	r2, [r7, #0]
 8000a8e:	4619      	mov	r1, r3
 8000a90:	f000 fb8a 	bl	80011a8 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	3301      	adds	r3, #1
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	88fa      	ldrh	r2, [r7, #6]
 8000a9c:	6a3b      	ldr	r3, [r7, #32]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	68fa      	ldr	r2, [r7, #12]
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	dde0      	ble.n	8000a68 <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 8000aa6:	6a3b      	ldr	r3, [r7, #32]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8000aac:	697a      	ldr	r2, [r7, #20]
 8000aae:	69bb      	ldr	r3, [r7, #24]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	3302      	adds	r3, #2
 8000ab8:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	005a      	lsls	r2, r3, #1
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	dd09      	ble.n	8000ada <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 8000ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8000acc:	697a      	ldr	r2, [r7, #20]
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	617b      	str	r3, [r7, #20]
            xChange += 2;
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	3302      	adds	r3, #2
 8000ad8:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 8000ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000adc:	6a3b      	ldr	r3, [r7, #32]
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	da99      	bge.n	8000a16 <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8000ae2:	bf00      	nop
 8000ae4:	bf00      	nop
 8000ae6:	372c      	adds	r7, #44	; 0x2c
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd90      	pop	{r4, r7, pc}

08000aec <ILI9341_Draw_Filled_Rectangle_Coord>:
	
}

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b089      	sub	sp, #36	; 0x24
 8000af0:	af02      	add	r7, sp, #8
 8000af2:	4604      	mov	r4, r0
 8000af4:	4608      	mov	r0, r1
 8000af6:	4611      	mov	r1, r2
 8000af8:	461a      	mov	r2, r3
 8000afa:	4623      	mov	r3, r4
 8000afc:	80fb      	strh	r3, [r7, #6]
 8000afe:	4603      	mov	r3, r0
 8000b00:	80bb      	strh	r3, [r7, #4]
 8000b02:	460b      	mov	r3, r1
 8000b04:	807b      	strh	r3, [r7, #2]
 8000b06:	4613      	mov	r3, r2
 8000b08:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	81fb      	strh	r3, [r7, #14]
	
	Calc_Negative = X1 - X0;
 8000b26:	887a      	ldrh	r2, [r7, #2]
 8000b28:	88fb      	ldrh	r3, [r7, #6]
 8000b2a:	1ad3      	subs	r3, r2, r3
 8000b2c:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	da01      	bge.n	8000b38 <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 8000b34:	2301      	movs	r3, #1
 8000b36:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 8000b3c:	883a      	ldrh	r2, [r7, #0]
 8000b3e:	88bb      	ldrh	r3, [r7, #4]
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	da01      	bge.n	8000b4e <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8000b4e:	7cfb      	ldrb	r3, [r7, #19]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d106      	bne.n	8000b62 <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 8000b54:	887a      	ldrh	r2, [r7, #2]
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 8000b5c:	88fb      	ldrh	r3, [r7, #6]
 8000b5e:	823b      	strh	r3, [r7, #16]
 8000b60:	e005      	b.n	8000b6e <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 8000b62:	88fa      	ldrh	r2, [r7, #6]
 8000b64:	887b      	ldrh	r3, [r7, #2]
 8000b66:	1ad3      	subs	r3, r2, r3
 8000b68:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8000b6a:	887b      	ldrh	r3, [r7, #2]
 8000b6c:	823b      	strh	r3, [r7, #16]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8000b6e:	7cbb      	ldrb	r3, [r7, #18]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d106      	bne.n	8000b82 <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 8000b74:	883a      	ldrh	r2, [r7, #0]
 8000b76:	88bb      	ldrh	r3, [r7, #4]
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;		
 8000b7c:	88bb      	ldrh	r3, [r7, #4]
 8000b7e:	81fb      	strh	r3, [r7, #14]
 8000b80:	e005      	b.n	8000b8e <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 8000b82:	88ba      	ldrh	r2, [r7, #4]
 8000b84:	883b      	ldrh	r3, [r7, #0]
 8000b86:	1ad3      	subs	r3, r2, r3
 8000b88:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;	
 8000b8a:	883b      	ldrh	r3, [r7, #0]
 8000b8c:	81fb      	strh	r3, [r7, #14]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 8000b8e:	8abc      	ldrh	r4, [r7, #20]
 8000b90:	8afa      	ldrh	r2, [r7, #22]
 8000b92:	89f9      	ldrh	r1, [r7, #14]
 8000b94:	8a38      	ldrh	r0, [r7, #16]
 8000b96:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	4623      	mov	r3, r4
 8000b9c:	f000 fbde 	bl	800135c <ILI9341_Draw_Rectangle>
}
 8000ba0:	bf00      	nop
 8000ba2:	371c      	adds	r7, #28
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd90      	pop	{r4, r7, pc}

08000ba8 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 8000bac:	f001 fb14 	bl	80021d8 <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 8000bb0:	f000 fd90 	bl	80016d4 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bba:	4802      	ldr	r0, [pc, #8]	; (8000bc4 <ILI9341_SPI_Init+0x1c>)
 8000bbc:	f003 f81e 	bl	8003bfc <HAL_GPIO_WritePin>
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40020800 	.word	0x40020800

08000bc8 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8000bd2:	1df9      	adds	r1, r7, #7
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	4803      	ldr	r0, [pc, #12]	; (8000be8 <ILI9341_SPI_Send+0x20>)
 8000bda:	f004 fa24 	bl	8005026 <HAL_SPI_Transmit>
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	2000033c 	.word	0x2000033c

08000bec <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bfc:	480b      	ldr	r0, [pc, #44]	; (8000c2c <ILI9341_Write_Command+0x40>)
 8000bfe:	f002 fffd 	bl	8003bfc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000c02:	2200      	movs	r2, #0
 8000c04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c08:	4808      	ldr	r0, [pc, #32]	; (8000c2c <ILI9341_Write_Command+0x40>)
 8000c0a:	f002 fff7 	bl	8003bfc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff ffd9 	bl	8000bc8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000c16:	2201      	movs	r2, #1
 8000c18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c1c:	4803      	ldr	r0, [pc, #12]	; (8000c2c <ILI9341_Write_Command+0x40>)
 8000c1e:	f002 ffed 	bl	8003bfc <HAL_GPIO_WritePin>
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40020800 	.word	0x40020800

08000c30 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c40:	480b      	ldr	r0, [pc, #44]	; (8000c70 <ILI9341_Write_Data+0x40>)
 8000c42:	f002 ffdb 	bl	8003bfc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c4c:	4808      	ldr	r0, [pc, #32]	; (8000c70 <ILI9341_Write_Data+0x40>)
 8000c4e:	f002 ffd5 	bl	8003bfc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ffb7 	bl	8000bc8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c60:	4803      	ldr	r0, [pc, #12]	; (8000c70 <ILI9341_Write_Data+0x40>)
 8000c62:	f002 ffcb 	bl	8003bfc <HAL_GPIO_WritePin>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40020800 	.word	0x40020800

08000c74 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8000c74:	b590      	push	{r4, r7, lr}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	4608      	mov	r0, r1
 8000c7e:	4611      	mov	r1, r2
 8000c80:	461a      	mov	r2, r3
 8000c82:	4623      	mov	r3, r4
 8000c84:	80fb      	strh	r3, [r7, #6]
 8000c86:	4603      	mov	r3, r0
 8000c88:	80bb      	strh	r3, [r7, #4]
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	807b      	strh	r3, [r7, #2]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8000c92:	202a      	movs	r0, #42	; 0x2a
 8000c94:	f7ff ffaa 	bl	8000bec <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8000c98:	88fb      	ldrh	r3, [r7, #6]
 8000c9a:	0a1b      	lsrs	r3, r3, #8
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff ffc5 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8000ca6:	88fb      	ldrh	r3, [r7, #6]
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff ffc0 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8000cb0:	887b      	ldrh	r3, [r7, #2]
 8000cb2:	0a1b      	lsrs	r3, r3, #8
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff ffb9 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8000cbe:	887b      	ldrh	r3, [r7, #2]
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff ffb4 	bl	8000c30 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8000cc8:	202b      	movs	r0, #43	; 0x2b
 8000cca:	f7ff ff8f 	bl	8000bec <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8000cce:	88bb      	ldrh	r3, [r7, #4]
 8000cd0:	0a1b      	lsrs	r3, r3, #8
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff ffaa 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8000cdc:	88bb      	ldrh	r3, [r7, #4]
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ffa5 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8000ce6:	883b      	ldrh	r3, [r7, #0]
 8000ce8:	0a1b      	lsrs	r3, r3, #8
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff ff9e 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8000cf4:	883b      	ldrh	r3, [r7, #0]
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ff99 	bl	8000c30 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8000cfe:	202c      	movs	r0, #44	; 0x2c
 8000d00:	f7ff ff74 	bl	8000bec <ILI9341_Write_Command>
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd90      	pop	{r4, r7, pc}

08000d0c <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d16:	480b      	ldr	r0, [pc, #44]	; (8000d44 <ILI9341_Reset+0x38>)
 8000d18:	f002 ff70 	bl	8003bfc <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000d1c:	20c8      	movs	r0, #200	; 0xc8
 8000d1e:	f001 fe19 	bl	8002954 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d28:	4806      	ldr	r0, [pc, #24]	; (8000d44 <ILI9341_Reset+0x38>)
 8000d2a:	f002 ff67 	bl	8003bfc <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000d2e:	20c8      	movs	r0, #200	; 0xc8
 8000d30:	f001 fe10 	bl	8002954 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8000d34:	2201      	movs	r2, #1
 8000d36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d3a:	4802      	ldr	r0, [pc, #8]	; (8000d44 <ILI9341_Reset+0x38>)
 8000d3c:	f002 ff5e 	bl	8003bfc <HAL_GPIO_WritePin>
}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40020800 	.word	0x40020800

08000d48 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8000d56:	2036      	movs	r0, #54	; 0x36
 8000d58:	f7ff ff48 	bl	8000bec <ILI9341_Write_Command>
HAL_Delay(1);
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f001 fdf9 	bl	8002954 <HAL_Delay>
	
switch(screen_rotation) 
 8000d62:	7bfb      	ldrb	r3, [r7, #15]
 8000d64:	2b03      	cmp	r3, #3
 8000d66:	d837      	bhi.n	8000dd8 <ILI9341_Set_Rotation+0x90>
 8000d68:	a201      	add	r2, pc, #4	; (adr r2, 8000d70 <ILI9341_Set_Rotation+0x28>)
 8000d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d6e:	bf00      	nop
 8000d70:	08000d81 	.word	0x08000d81
 8000d74:	08000d97 	.word	0x08000d97
 8000d78:	08000dad 	.word	0x08000dad
 8000d7c:	08000dc3 	.word	0x08000dc3
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8000d80:	2048      	movs	r0, #72	; 0x48
 8000d82:	f7ff ff55 	bl	8000c30 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8000d86:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <ILI9341_Set_Rotation+0x9c>)
 8000d88:	22f0      	movs	r2, #240	; 0xf0
 8000d8a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000d8c:	4b16      	ldr	r3, [pc, #88]	; (8000de8 <ILI9341_Set_Rotation+0xa0>)
 8000d8e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000d92:	801a      	strh	r2, [r3, #0]
			break;
 8000d94:	e021      	b.n	8000dda <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8000d96:	2028      	movs	r0, #40	; 0x28
 8000d98:	f7ff ff4a 	bl	8000c30 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <ILI9341_Set_Rotation+0x9c>)
 8000d9e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000da2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000da4:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <ILI9341_Set_Rotation+0xa0>)
 8000da6:	22f0      	movs	r2, #240	; 0xf0
 8000da8:	801a      	strh	r2, [r3, #0]
			break;
 8000daa:	e016      	b.n	8000dda <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8000dac:	2088      	movs	r0, #136	; 0x88
 8000dae:	f7ff ff3f 	bl	8000c30 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <ILI9341_Set_Rotation+0x9c>)
 8000db4:	22f0      	movs	r2, #240	; 0xf0
 8000db6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000db8:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <ILI9341_Set_Rotation+0xa0>)
 8000dba:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000dbe:	801a      	strh	r2, [r3, #0]
			break;
 8000dc0:	e00b      	b.n	8000dda <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8000dc2:	20e8      	movs	r0, #232	; 0xe8
 8000dc4:	f7ff ff34 	bl	8000c30 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <ILI9341_Set_Rotation+0x9c>)
 8000dca:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000dce:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <ILI9341_Set_Rotation+0xa0>)
 8000dd2:	22f0      	movs	r2, #240	; 0xf0
 8000dd4:	801a      	strh	r2, [r3, #0]
			break;
 8000dd6:	e000      	b.n	8000dda <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8000dd8:	bf00      	nop
	}
}
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000002 	.word	0x20000002
 8000de8:	20000000 	.word	0x20000000

08000dec <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000df0:	2201      	movs	r2, #1
 8000df2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000df6:	4802      	ldr	r0, [pc, #8]	; (8000e00 <ILI9341_Enable+0x14>)
 8000df8:	f002 ff00 	bl	8003bfc <HAL_GPIO_WritePin>
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40020800 	.word	0x40020800

08000e04 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8000e08:	f7ff fff0 	bl	8000dec <ILI9341_Enable>
ILI9341_SPI_Init();
 8000e0c:	f7ff fecc 	bl	8000ba8 <ILI9341_SPI_Init>
ILI9341_Reset();
 8000e10:	f7ff ff7c 	bl	8000d0c <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8000e14:	2001      	movs	r0, #1
 8000e16:	f7ff fee9 	bl	8000bec <ILI9341_Write_Command>
HAL_Delay(1000);
 8000e1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e1e:	f001 fd99 	bl	8002954 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8000e22:	20cb      	movs	r0, #203	; 0xcb
 8000e24:	f7ff fee2 	bl	8000bec <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8000e28:	2039      	movs	r0, #57	; 0x39
 8000e2a:	f7ff ff01 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8000e2e:	202c      	movs	r0, #44	; 0x2c
 8000e30:	f7ff fefe 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000e34:	2000      	movs	r0, #0
 8000e36:	f7ff fefb 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8000e3a:	2034      	movs	r0, #52	; 0x34
 8000e3c:	f7ff fef8 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8000e40:	2002      	movs	r0, #2
 8000e42:	f7ff fef5 	bl	8000c30 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8000e46:	20cf      	movs	r0, #207	; 0xcf
 8000e48:	f7ff fed0 	bl	8000bec <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	f7ff feef 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000e52:	20c1      	movs	r0, #193	; 0xc1
 8000e54:	f7ff feec 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8000e58:	2030      	movs	r0, #48	; 0x30
 8000e5a:	f7ff fee9 	bl	8000c30 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8000e5e:	20e8      	movs	r0, #232	; 0xe8
 8000e60:	f7ff fec4 	bl	8000bec <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8000e64:	2085      	movs	r0, #133	; 0x85
 8000e66:	f7ff fee3 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f7ff fee0 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8000e70:	2078      	movs	r0, #120	; 0x78
 8000e72:	f7ff fedd 	bl	8000c30 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8000e76:	20ea      	movs	r0, #234	; 0xea
 8000e78:	f7ff feb8 	bl	8000bec <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	f7ff fed7 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000e82:	2000      	movs	r0, #0
 8000e84:	f7ff fed4 	bl	8000c30 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8000e88:	20ed      	movs	r0, #237	; 0xed
 8000e8a:	f7ff feaf 	bl	8000bec <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8000e8e:	2064      	movs	r0, #100	; 0x64
 8000e90:	f7ff fece 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000e94:	2003      	movs	r0, #3
 8000e96:	f7ff fecb 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8000e9a:	2012      	movs	r0, #18
 8000e9c:	f7ff fec8 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8000ea0:	2081      	movs	r0, #129	; 0x81
 8000ea2:	f7ff fec5 	bl	8000c30 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8000ea6:	20f7      	movs	r0, #247	; 0xf7
 8000ea8:	f7ff fea0 	bl	8000bec <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8000eac:	2020      	movs	r0, #32
 8000eae:	f7ff febf 	bl	8000c30 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8000eb2:	20c0      	movs	r0, #192	; 0xc0
 8000eb4:	f7ff fe9a 	bl	8000bec <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8000eb8:	2023      	movs	r0, #35	; 0x23
 8000eba:	f7ff feb9 	bl	8000c30 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8000ebe:	20c1      	movs	r0, #193	; 0xc1
 8000ec0:	f7ff fe94 	bl	8000bec <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8000ec4:	2010      	movs	r0, #16
 8000ec6:	f7ff feb3 	bl	8000c30 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8000eca:	20c5      	movs	r0, #197	; 0xc5
 8000ecc:	f7ff fe8e 	bl	8000bec <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8000ed0:	203e      	movs	r0, #62	; 0x3e
 8000ed2:	f7ff fead 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8000ed6:	2028      	movs	r0, #40	; 0x28
 8000ed8:	f7ff feaa 	bl	8000c30 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8000edc:	20c7      	movs	r0, #199	; 0xc7
 8000ede:	f7ff fe85 	bl	8000bec <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8000ee2:	2086      	movs	r0, #134	; 0x86
 8000ee4:	f7ff fea4 	bl	8000c30 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8000ee8:	2036      	movs	r0, #54	; 0x36
 8000eea:	f7ff fe7f 	bl	8000bec <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8000eee:	2048      	movs	r0, #72	; 0x48
 8000ef0:	f7ff fe9e 	bl	8000c30 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8000ef4:	203a      	movs	r0, #58	; 0x3a
 8000ef6:	f7ff fe79 	bl	8000bec <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8000efa:	2055      	movs	r0, #85	; 0x55
 8000efc:	f7ff fe98 	bl	8000c30 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8000f00:	20b1      	movs	r0, #177	; 0xb1
 8000f02:	f7ff fe73 	bl	8000bec <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000f06:	2000      	movs	r0, #0
 8000f08:	f7ff fe92 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8000f0c:	2018      	movs	r0, #24
 8000f0e:	f7ff fe8f 	bl	8000c30 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8000f12:	20b6      	movs	r0, #182	; 0xb6
 8000f14:	f7ff fe6a 	bl	8000bec <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8000f18:	2008      	movs	r0, #8
 8000f1a:	f7ff fe89 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8000f1e:	2082      	movs	r0, #130	; 0x82
 8000f20:	f7ff fe86 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8000f24:	2027      	movs	r0, #39	; 0x27
 8000f26:	f7ff fe83 	bl	8000c30 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8000f2a:	20f2      	movs	r0, #242	; 0xf2
 8000f2c:	f7ff fe5e 	bl	8000bec <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000f30:	2000      	movs	r0, #0
 8000f32:	f7ff fe7d 	bl	8000c30 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8000f36:	2026      	movs	r0, #38	; 0x26
 8000f38:	f7ff fe58 	bl	8000bec <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	f7ff fe77 	bl	8000c30 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8000f42:	20e0      	movs	r0, #224	; 0xe0
 8000f44:	f7ff fe52 	bl	8000bec <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8000f48:	200f      	movs	r0, #15
 8000f4a:	f7ff fe71 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000f4e:	2031      	movs	r0, #49	; 0x31
 8000f50:	f7ff fe6e 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8000f54:	202b      	movs	r0, #43	; 0x2b
 8000f56:	f7ff fe6b 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000f5a:	200c      	movs	r0, #12
 8000f5c:	f7ff fe68 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000f60:	200e      	movs	r0, #14
 8000f62:	f7ff fe65 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000f66:	2008      	movs	r0, #8
 8000f68:	f7ff fe62 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8000f6c:	204e      	movs	r0, #78	; 0x4e
 8000f6e:	f7ff fe5f 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8000f72:	20f1      	movs	r0, #241	; 0xf1
 8000f74:	f7ff fe5c 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8000f78:	2037      	movs	r0, #55	; 0x37
 8000f7a:	f7ff fe59 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000f7e:	2007      	movs	r0, #7
 8000f80:	f7ff fe56 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8000f84:	2010      	movs	r0, #16
 8000f86:	f7ff fe53 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000f8a:	2003      	movs	r0, #3
 8000f8c:	f7ff fe50 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000f90:	200e      	movs	r0, #14
 8000f92:	f7ff fe4d 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8000f96:	2009      	movs	r0, #9
 8000f98:	f7ff fe4a 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f7ff fe47 	bl	8000c30 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8000fa2:	20e1      	movs	r0, #225	; 0xe1
 8000fa4:	f7ff fe22 	bl	8000bec <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f7ff fe41 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000fae:	200e      	movs	r0, #14
 8000fb0:	f7ff fe3e 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8000fb4:	2014      	movs	r0, #20
 8000fb6:	f7ff fe3b 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000fba:	2003      	movs	r0, #3
 8000fbc:	f7ff fe38 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8000fc0:	2011      	movs	r0, #17
 8000fc2:	f7ff fe35 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000fc6:	2007      	movs	r0, #7
 8000fc8:	f7ff fe32 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000fcc:	2031      	movs	r0, #49	; 0x31
 8000fce:	f7ff fe2f 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000fd2:	20c1      	movs	r0, #193	; 0xc1
 8000fd4:	f7ff fe2c 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8000fd8:	2048      	movs	r0, #72	; 0x48
 8000fda:	f7ff fe29 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000fde:	2008      	movs	r0, #8
 8000fe0:	f7ff fe26 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000fe4:	200f      	movs	r0, #15
 8000fe6:	f7ff fe23 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000fea:	200c      	movs	r0, #12
 8000fec:	f7ff fe20 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000ff0:	2031      	movs	r0, #49	; 0x31
 8000ff2:	f7ff fe1d 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8000ff6:	2036      	movs	r0, #54	; 0x36
 8000ff8:	f7ff fe1a 	bl	8000c30 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000ffc:	200f      	movs	r0, #15
 8000ffe:	f7ff fe17 	bl	8000c30 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8001002:	2011      	movs	r0, #17
 8001004:	f7ff fdf2 	bl	8000bec <ILI9341_Write_Command>
HAL_Delay(120);
 8001008:	2078      	movs	r0, #120	; 0x78
 800100a:	f001 fca3 	bl	8002954 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 800100e:	2029      	movs	r0, #41	; 0x29
 8001010:	f7ff fdec 	bl	8000bec <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001014:	2000      	movs	r0, #0
 8001016:	f7ff fe97 	bl	8000d48 <ILI9341_Set_Rotation>
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8001020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001024:	b08d      	sub	sp, #52	; 0x34
 8001026:	af00      	add	r7, sp, #0
 8001028:	4603      	mov	r3, r0
 800102a:	6039      	str	r1, [r7, #0]
 800102c:	80fb      	strh	r3, [r7, #6]
 800102e:	466b      	mov	r3, sp
 8001030:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800103e:	d202      	bcs.n	8001046 <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
 8001044:	e002      	b.n	800104c <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8001046:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800104c:	2201      	movs	r2, #1
 800104e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001052:	4840      	ldr	r0, [pc, #256]	; (8001154 <ILI9341_Draw_Colour_Burst+0x134>)
 8001054:	f002 fdd2 	bl	8003bfc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800105e:	483d      	ldr	r0, [pc, #244]	; (8001154 <ILI9341_Draw_Colour_Burst+0x134>)
 8001060:	f002 fdcc 	bl	8003bfc <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8001064:	88fb      	ldrh	r3, [r7, #6]
 8001066:	0a1b      	lsrs	r3, r3, #8
 8001068:	b29b      	uxth	r3, r3
 800106a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 800106e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001070:	460b      	mov	r3, r1
 8001072:	3b01      	subs	r3, #1
 8001074:	61fb      	str	r3, [r7, #28]
 8001076:	2300      	movs	r3, #0
 8001078:	4688      	mov	r8, r1
 800107a:	4699      	mov	r9, r3
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	f04f 0300 	mov.w	r3, #0
 8001084:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001088:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800108c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001090:	2300      	movs	r3, #0
 8001092:	460c      	mov	r4, r1
 8001094:	461d      	mov	r5, r3
 8001096:	f04f 0200 	mov.w	r2, #0
 800109a:	f04f 0300 	mov.w	r3, #0
 800109e:	00eb      	lsls	r3, r5, #3
 80010a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80010a4:	00e2      	lsls	r2, r4, #3
 80010a6:	1dcb      	adds	r3, r1, #7
 80010a8:	08db      	lsrs	r3, r3, #3
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	ebad 0d03 	sub.w	sp, sp, r3
 80010b0:	466b      	mov	r3, sp
 80010b2:	3300      	adds	r3, #0
 80010b4:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80010b6:	2300      	movs	r3, #0
 80010b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80010ba:	e00e      	b.n	80010da <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010c0:	4413      	add	r3, r2
 80010c2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80010c6:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 80010c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ca:	3301      	adds	r3, #1
 80010cc:	88fa      	ldrh	r2, [r7, #6]
 80010ce:	b2d1      	uxtb	r1, r2
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80010d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d6:	3302      	adds	r3, #2
 80010d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80010da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010de:	429a      	cmp	r2, r3
 80010e0:	d3ec      	bcc.n	80010bc <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 80010e8:	697a      	ldr	r2, [r7, #20]
 80010ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f0:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80010fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010fc:	fb01 f202 	mul.w	r2, r1, r2
 8001100:	1a9b      	subs	r3, r3, r2
 8001102:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d010      	beq.n	800112c <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800110a:	2300      	movs	r3, #0
 800110c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800110e:	e009      	b.n	8001124 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8001110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001112:	b29a      	uxth	r2, r3
 8001114:	230a      	movs	r3, #10
 8001116:	69b9      	ldr	r1, [r7, #24]
 8001118:	480f      	ldr	r0, [pc, #60]	; (8001158 <ILI9341_Draw_Colour_Burst+0x138>)
 800111a:	f003 ff84 	bl	8005026 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800111e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001120:	3301      	adds	r3, #1
 8001122:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001124:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	429a      	cmp	r2, r3
 800112a:	d3f1      	bcc.n	8001110 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	b29a      	uxth	r2, r3
 8001130:	230a      	movs	r3, #10
 8001132:	69b9      	ldr	r1, [r7, #24]
 8001134:	4808      	ldr	r0, [pc, #32]	; (8001158 <ILI9341_Draw_Colour_Burst+0x138>)
 8001136:	f003 ff76 	bl	8005026 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800113a:	2201      	movs	r2, #1
 800113c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001140:	4804      	ldr	r0, [pc, #16]	; (8001154 <ILI9341_Draw_Colour_Burst+0x134>)
 8001142:	f002 fd5b 	bl	8003bfc <HAL_GPIO_WritePin>
 8001146:	46b5      	mov	sp, r6
}
 8001148:	bf00      	nop
 800114a:	3734      	adds	r7, #52	; 0x34
 800114c:	46bd      	mov	sp, r7
 800114e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001152:	bf00      	nop
 8001154:	40020800 	.word	0x40020800
 8001158:	2000033c 	.word	0x2000033c

0800115c <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <ILI9341_Fill_Screen+0x44>)
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	b29a      	uxth	r2, r3
 800116c:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <ILI9341_Fill_Screen+0x48>)
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	b29b      	uxth	r3, r3
 8001172:	2100      	movs	r1, #0
 8001174:	2000      	movs	r0, #0
 8001176:	f7ff fd7d 	bl	8000c74 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <ILI9341_Fill_Screen+0x44>)
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	b29b      	uxth	r3, r3
 8001180:	461a      	mov	r2, r3
 8001182:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <ILI9341_Fill_Screen+0x48>)
 8001184:	881b      	ldrh	r3, [r3, #0]
 8001186:	b29b      	uxth	r3, r3
 8001188:	fb02 f303 	mul.w	r3, r2, r3
 800118c:	461a      	mov	r2, r3
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	4611      	mov	r1, r2
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff ff44 	bl	8001020 <ILI9341_Draw_Colour_Burst>
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000002 	.word	0x20000002
 80011a4:	20000000 	.word	0x20000000

080011a8 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	80fb      	strh	r3, [r7, #6]
 80011b2:	460b      	mov	r3, r1
 80011b4:	80bb      	strh	r3, [r7, #4]
 80011b6:	4613      	mov	r3, r2
 80011b8:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80011ba:	4b64      	ldr	r3, [pc, #400]	; (800134c <ILI9341_Draw_Pixel+0x1a4>)
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	b29b      	uxth	r3, r3
 80011c0:	88fa      	ldrh	r2, [r7, #6]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	f080 80be 	bcs.w	8001344 <ILI9341_Draw_Pixel+0x19c>
 80011c8:	4b61      	ldr	r3, [pc, #388]	; (8001350 <ILI9341_Draw_Pixel+0x1a8>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	88ba      	ldrh	r2, [r7, #4]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	f080 80b7 	bcs.w	8001344 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80011d6:	2200      	movs	r2, #0
 80011d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011dc:	485d      	ldr	r0, [pc, #372]	; (8001354 <ILI9341_Draw_Pixel+0x1ac>)
 80011de:	f002 fd0d 	bl	8003bfc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80011e2:	2200      	movs	r2, #0
 80011e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011e8:	485a      	ldr	r0, [pc, #360]	; (8001354 <ILI9341_Draw_Pixel+0x1ac>)
 80011ea:	f002 fd07 	bl	8003bfc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 80011ee:	202a      	movs	r0, #42	; 0x2a
 80011f0:	f7ff fcea 	bl	8000bc8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80011f4:	2201      	movs	r2, #1
 80011f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011fa:	4856      	ldr	r0, [pc, #344]	; (8001354 <ILI9341_Draw_Pixel+0x1ac>)
 80011fc:	f002 fcfe 	bl	8003bfc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001200:	2201      	movs	r2, #1
 8001202:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001206:	4853      	ldr	r0, [pc, #332]	; (8001354 <ILI9341_Draw_Pixel+0x1ac>)
 8001208:	f002 fcf8 	bl	8003bfc <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800120c:	2200      	movs	r2, #0
 800120e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001212:	4850      	ldr	r0, [pc, #320]	; (8001354 <ILI9341_Draw_Pixel+0x1ac>)
 8001214:	f002 fcf2 	bl	8003bfc <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8001218:	88fb      	ldrh	r3, [r7, #6]
 800121a:	0a1b      	lsrs	r3, r3, #8
 800121c:	b29b      	uxth	r3, r3
 800121e:	b2db      	uxtb	r3, r3
 8001220:	753b      	strb	r3, [r7, #20]
 8001222:	88fb      	ldrh	r3, [r7, #6]
 8001224:	b2db      	uxtb	r3, r3
 8001226:	757b      	strb	r3, [r7, #21]
 8001228:	88fb      	ldrh	r3, [r7, #6]
 800122a:	3301      	adds	r3, #1
 800122c:	121b      	asrs	r3, r3, #8
 800122e:	b2db      	uxtb	r3, r3
 8001230:	75bb      	strb	r3, [r7, #22]
 8001232:	88fb      	ldrh	r3, [r7, #6]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	3301      	adds	r3, #1
 8001238:	b2db      	uxtb	r3, r3
 800123a:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 800123c:	f107 0114 	add.w	r1, r7, #20
 8001240:	2301      	movs	r3, #1
 8001242:	2204      	movs	r2, #4
 8001244:	4844      	ldr	r0, [pc, #272]	; (8001358 <ILI9341_Draw_Pixel+0x1b0>)
 8001246:	f003 feee 	bl	8005026 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800124a:	2201      	movs	r2, #1
 800124c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001250:	4840      	ldr	r0, [pc, #256]	; (8001354 <ILI9341_Draw_Pixel+0x1ac>)
 8001252:	f002 fcd3 	bl	8003bfc <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001256:	2200      	movs	r2, #0
 8001258:	f44f 7100 	mov.w	r1, #512	; 0x200
 800125c:	483d      	ldr	r0, [pc, #244]	; (8001354 <ILI9341_Draw_Pixel+0x1ac>)
 800125e:	f002 fccd 	bl	8003bfc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001262:	2200      	movs	r2, #0
 8001264:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001268:	483a      	ldr	r0, [pc, #232]	; (8001354 <ILI9341_Draw_Pixel+0x1ac>)
 800126a:	f002 fcc7 	bl	8003bfc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 800126e:	202b      	movs	r0, #43	; 0x2b
 8001270:	f7ff fcaa 	bl	8000bc8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8001274:	2201      	movs	r2, #1
 8001276:	f44f 7100 	mov.w	r1, #512	; 0x200
 800127a:	4836      	ldr	r0, [pc, #216]	; (8001354 <ILI9341_Draw_Pixel+0x1ac>)
 800127c:	f002 fcbe 	bl	8003bfc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001280:	2201      	movs	r2, #1
 8001282:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001286:	4833      	ldr	r0, [pc, #204]	; (8001354 <ILI9341_Draw_Pixel+0x1ac>)
 8001288:	f002 fcb8 	bl	8003bfc <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800128c:	2200      	movs	r2, #0
 800128e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001292:	4830      	ldr	r0, [pc, #192]	; (8001354 <ILI9341_Draw_Pixel+0x1ac>)
 8001294:	f002 fcb2 	bl	8003bfc <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8001298:	88bb      	ldrh	r3, [r7, #4]
 800129a:	0a1b      	lsrs	r3, r3, #8
 800129c:	b29b      	uxth	r3, r3
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	743b      	strb	r3, [r7, #16]
 80012a2:	88bb      	ldrh	r3, [r7, #4]
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	747b      	strb	r3, [r7, #17]
 80012a8:	88bb      	ldrh	r3, [r7, #4]
 80012aa:	3301      	adds	r3, #1
 80012ac:	121b      	asrs	r3, r3, #8
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	74bb      	strb	r3, [r7, #18]
 80012b2:	88bb      	ldrh	r3, [r7, #4]
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	3301      	adds	r3, #1
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 80012bc:	f107 0110 	add.w	r1, r7, #16
 80012c0:	2301      	movs	r3, #1
 80012c2:	2204      	movs	r2, #4
 80012c4:	4824      	ldr	r0, [pc, #144]	; (8001358 <ILI9341_Draw_Pixel+0x1b0>)
 80012c6:	f003 feae 	bl	8005026 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80012ca:	2201      	movs	r2, #1
 80012cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012d0:	4820      	ldr	r0, [pc, #128]	; (8001354 <ILI9341_Draw_Pixel+0x1ac>)
 80012d2:	f002 fc93 	bl	8003bfc <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80012d6:	2200      	movs	r2, #0
 80012d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012dc:	481d      	ldr	r0, [pc, #116]	; (8001354 <ILI9341_Draw_Pixel+0x1ac>)
 80012de:	f002 fc8d 	bl	8003bfc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80012e2:	2200      	movs	r2, #0
 80012e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012e8:	481a      	ldr	r0, [pc, #104]	; (8001354 <ILI9341_Draw_Pixel+0x1ac>)
 80012ea:	f002 fc87 	bl	8003bfc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 80012ee:	202c      	movs	r0, #44	; 0x2c
 80012f0:	f7ff fc6a 	bl	8000bc8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80012f4:	2201      	movs	r2, #1
 80012f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012fa:	4816      	ldr	r0, [pc, #88]	; (8001354 <ILI9341_Draw_Pixel+0x1ac>)
 80012fc:	f002 fc7e 	bl	8003bfc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001300:	2201      	movs	r2, #1
 8001302:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001306:	4813      	ldr	r0, [pc, #76]	; (8001354 <ILI9341_Draw_Pixel+0x1ac>)
 8001308:	f002 fc78 	bl	8003bfc <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800130c:	2200      	movs	r2, #0
 800130e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001312:	4810      	ldr	r0, [pc, #64]	; (8001354 <ILI9341_Draw_Pixel+0x1ac>)
 8001314:	f002 fc72 	bl	8003bfc <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8001318:	887b      	ldrh	r3, [r7, #2]
 800131a:	0a1b      	lsrs	r3, r3, #8
 800131c:	b29b      	uxth	r3, r3
 800131e:	b2db      	uxtb	r3, r3
 8001320:	733b      	strb	r3, [r7, #12]
 8001322:	887b      	ldrh	r3, [r7, #2]
 8001324:	b2db      	uxtb	r3, r3
 8001326:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8001328:	f107 010c 	add.w	r1, r7, #12
 800132c:	2301      	movs	r3, #1
 800132e:	2202      	movs	r2, #2
 8001330:	4809      	ldr	r0, [pc, #36]	; (8001358 <ILI9341_Draw_Pixel+0x1b0>)
 8001332:	f003 fe78 	bl	8005026 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001336:	2201      	movs	r2, #1
 8001338:	f44f 7180 	mov.w	r1, #256	; 0x100
 800133c:	4805      	ldr	r0, [pc, #20]	; (8001354 <ILI9341_Draw_Pixel+0x1ac>)
 800133e:	f002 fc5d 	bl	8003bfc <HAL_GPIO_WritePin>
 8001342:	e000      	b.n	8001346 <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001344:	bf00      	nop
	
}
 8001346:	3718      	adds	r7, #24
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000002 	.word	0x20000002
 8001350:	20000000 	.word	0x20000000
 8001354:	40020800 	.word	0x40020800
 8001358:	2000033c 	.word	0x2000033c

0800135c <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4604      	mov	r4, r0
 8001364:	4608      	mov	r0, r1
 8001366:	4611      	mov	r1, r2
 8001368:	461a      	mov	r2, r3
 800136a:	4623      	mov	r3, r4
 800136c:	80fb      	strh	r3, [r7, #6]
 800136e:	4603      	mov	r3, r0
 8001370:	80bb      	strh	r3, [r7, #4]
 8001372:	460b      	mov	r3, r1
 8001374:	807b      	strh	r3, [r7, #2]
 8001376:	4613      	mov	r3, r2
 8001378:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800137a:	4b24      	ldr	r3, [pc, #144]	; (800140c <ILI9341_Draw_Rectangle+0xb0>)
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	b29b      	uxth	r3, r3
 8001380:	88fa      	ldrh	r2, [r7, #6]
 8001382:	429a      	cmp	r2, r3
 8001384:	d23d      	bcs.n	8001402 <ILI9341_Draw_Rectangle+0xa6>
 8001386:	4b22      	ldr	r3, [pc, #136]	; (8001410 <ILI9341_Draw_Rectangle+0xb4>)
 8001388:	881b      	ldrh	r3, [r3, #0]
 800138a:	b29b      	uxth	r3, r3
 800138c:	88ba      	ldrh	r2, [r7, #4]
 800138e:	429a      	cmp	r2, r3
 8001390:	d237      	bcs.n	8001402 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8001392:	88fa      	ldrh	r2, [r7, #6]
 8001394:	887b      	ldrh	r3, [r7, #2]
 8001396:	4413      	add	r3, r2
 8001398:	4a1c      	ldr	r2, [pc, #112]	; (800140c <ILI9341_Draw_Rectangle+0xb0>)
 800139a:	8812      	ldrh	r2, [r2, #0]
 800139c:	b292      	uxth	r2, r2
 800139e:	4293      	cmp	r3, r2
 80013a0:	dd05      	ble.n	80013ae <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 80013a2:	4b1a      	ldr	r3, [pc, #104]	; (800140c <ILI9341_Draw_Rectangle+0xb0>)
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	88fb      	ldrh	r3, [r7, #6]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 80013ae:	88ba      	ldrh	r2, [r7, #4]
 80013b0:	883b      	ldrh	r3, [r7, #0]
 80013b2:	4413      	add	r3, r2
 80013b4:	4a16      	ldr	r2, [pc, #88]	; (8001410 <ILI9341_Draw_Rectangle+0xb4>)
 80013b6:	8812      	ldrh	r2, [r2, #0]
 80013b8:	b292      	uxth	r2, r2
 80013ba:	4293      	cmp	r3, r2
 80013bc:	dd05      	ble.n	80013ca <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 80013be:	4b14      	ldr	r3, [pc, #80]	; (8001410 <ILI9341_Draw_Rectangle+0xb4>)
 80013c0:	881b      	ldrh	r3, [r3, #0]
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	88bb      	ldrh	r3, [r7, #4]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 80013ca:	88fa      	ldrh	r2, [r7, #6]
 80013cc:	887b      	ldrh	r3, [r7, #2]
 80013ce:	4413      	add	r3, r2
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	3b01      	subs	r3, #1
 80013d4:	b29c      	uxth	r4, r3
 80013d6:	88ba      	ldrh	r2, [r7, #4]
 80013d8:	883b      	ldrh	r3, [r7, #0]
 80013da:	4413      	add	r3, r2
 80013dc:	b29b      	uxth	r3, r3
 80013de:	3b01      	subs	r3, #1
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	88b9      	ldrh	r1, [r7, #4]
 80013e4:	88f8      	ldrh	r0, [r7, #6]
 80013e6:	4622      	mov	r2, r4
 80013e8:	f7ff fc44 	bl	8000c74 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 80013ec:	883b      	ldrh	r3, [r7, #0]
 80013ee:	887a      	ldrh	r2, [r7, #2]
 80013f0:	fb02 f303 	mul.w	r3, r2, r3
 80013f4:	461a      	mov	r2, r3
 80013f6:	8b3b      	ldrh	r3, [r7, #24]
 80013f8:	4611      	mov	r1, r2
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fe10 	bl	8001020 <ILI9341_Draw_Colour_Burst>
 8001400:	e000      	b.n	8001404 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001402:	bf00      	nop
}
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	bd90      	pop	{r4, r7, pc}
 800140a:	bf00      	nop
 800140c:	20000002 	.word	0x20000002
 8001410:	20000000 	.word	0x20000000

08001414 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800141a:	463b      	mov	r3, r7
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001426:	4b21      	ldr	r3, [pc, #132]	; (80014ac <MX_ADC1_Init+0x98>)
 8001428:	4a21      	ldr	r2, [pc, #132]	; (80014b0 <MX_ADC1_Init+0x9c>)
 800142a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800142c:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <MX_ADC1_Init+0x98>)
 800142e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001432:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001434:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <MX_ADC1_Init+0x98>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800143a:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <MX_ADC1_Init+0x98>)
 800143c:	2200      	movs	r2, #0
 800143e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001440:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <MX_ADC1_Init+0x98>)
 8001442:	2201      	movs	r2, #1
 8001444:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001446:	4b19      	ldr	r3, [pc, #100]	; (80014ac <MX_ADC1_Init+0x98>)
 8001448:	2200      	movs	r2, #0
 800144a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800144e:	4b17      	ldr	r3, [pc, #92]	; (80014ac <MX_ADC1_Init+0x98>)
 8001450:	2200      	movs	r2, #0
 8001452:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001454:	4b15      	ldr	r3, [pc, #84]	; (80014ac <MX_ADC1_Init+0x98>)
 8001456:	4a17      	ldr	r2, [pc, #92]	; (80014b4 <MX_ADC1_Init+0xa0>)
 8001458:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800145a:	4b14      	ldr	r3, [pc, #80]	; (80014ac <MX_ADC1_Init+0x98>)
 800145c:	2200      	movs	r2, #0
 800145e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001460:	4b12      	ldr	r3, [pc, #72]	; (80014ac <MX_ADC1_Init+0x98>)
 8001462:	2201      	movs	r2, #1
 8001464:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001466:	4b11      	ldr	r3, [pc, #68]	; (80014ac <MX_ADC1_Init+0x98>)
 8001468:	2200      	movs	r2, #0
 800146a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800146e:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <MX_ADC1_Init+0x98>)
 8001470:	2200      	movs	r2, #0
 8001472:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001474:	480d      	ldr	r0, [pc, #52]	; (80014ac <MX_ADC1_Init+0x98>)
 8001476:	f001 fa91 	bl	800299c <HAL_ADC_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001480:	f000 fe5c 	bl	800213c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001484:	230a      	movs	r3, #10
 8001486:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001488:	2301      	movs	r3, #1
 800148a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800148c:	2300      	movs	r3, #0
 800148e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001490:	463b      	mov	r3, r7
 8001492:	4619      	mov	r1, r3
 8001494:	4805      	ldr	r0, [pc, #20]	; (80014ac <MX_ADC1_Init+0x98>)
 8001496:	f001 fba1 	bl	8002bdc <HAL_ADC_ConfigChannel>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80014a0:	f000 fe4c 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000224 	.word	0x20000224
 80014b0:	40012000 	.word	0x40012000
 80014b4:	0f000001 	.word	0x0f000001

080014b8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014be:	463b      	mov	r3, r7
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80014ca:	4b21      	ldr	r3, [pc, #132]	; (8001550 <MX_ADC2_Init+0x98>)
 80014cc:	4a21      	ldr	r2, [pc, #132]	; (8001554 <MX_ADC2_Init+0x9c>)
 80014ce:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014d0:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <MX_ADC2_Init+0x98>)
 80014d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014d6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80014d8:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <MX_ADC2_Init+0x98>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014de:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <MX_ADC2_Init+0x98>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80014e4:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <MX_ADC2_Init+0x98>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80014ea:	4b19      	ldr	r3, [pc, #100]	; (8001550 <MX_ADC2_Init+0x98>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014f2:	4b17      	ldr	r3, [pc, #92]	; (8001550 <MX_ADC2_Init+0x98>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014f8:	4b15      	ldr	r3, [pc, #84]	; (8001550 <MX_ADC2_Init+0x98>)
 80014fa:	4a17      	ldr	r2, [pc, #92]	; (8001558 <MX_ADC2_Init+0xa0>)
 80014fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014fe:	4b14      	ldr	r3, [pc, #80]	; (8001550 <MX_ADC2_Init+0x98>)
 8001500:	2200      	movs	r2, #0
 8001502:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001504:	4b12      	ldr	r3, [pc, #72]	; (8001550 <MX_ADC2_Init+0x98>)
 8001506:	2201      	movs	r2, #1
 8001508:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800150a:	4b11      	ldr	r3, [pc, #68]	; (8001550 <MX_ADC2_Init+0x98>)
 800150c:	2200      	movs	r2, #0
 800150e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001512:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <MX_ADC2_Init+0x98>)
 8001514:	2200      	movs	r2, #0
 8001516:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001518:	480d      	ldr	r0, [pc, #52]	; (8001550 <MX_ADC2_Init+0x98>)
 800151a:	f001 fa3f 	bl	800299c <HAL_ADC_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001524:	f000 fe0a 	bl	800213c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001528:	230d      	movs	r3, #13
 800152a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800152c:	2301      	movs	r3, #1
 800152e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001530:	2300      	movs	r3, #0
 8001532:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001534:	463b      	mov	r3, r7
 8001536:	4619      	mov	r1, r3
 8001538:	4805      	ldr	r0, [pc, #20]	; (8001550 <MX_ADC2_Init+0x98>)
 800153a:	f001 fb4f 	bl	8002bdc <HAL_ADC_ConfigChannel>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001544:	f000 fdfa 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001548:	bf00      	nop
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	2000026c 	.word	0x2000026c
 8001554:	40012100 	.word	0x40012100
 8001558:	0f000001 	.word	0x0f000001

0800155c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08c      	sub	sp, #48	; 0x30
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 031c 	add.w	r3, r7, #28
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a41      	ldr	r2, [pc, #260]	; (8001680 <HAL_ADC_MspInit+0x124>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d153      	bne.n	8001626 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800157e:	4b41      	ldr	r3, [pc, #260]	; (8001684 <HAL_ADC_MspInit+0x128>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	4a40      	ldr	r2, [pc, #256]	; (8001684 <HAL_ADC_MspInit+0x128>)
 8001584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001588:	6453      	str	r3, [r2, #68]	; 0x44
 800158a:	4b3e      	ldr	r3, [pc, #248]	; (8001684 <HAL_ADC_MspInit+0x128>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001592:	61bb      	str	r3, [r7, #24]
 8001594:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001596:	4b3b      	ldr	r3, [pc, #236]	; (8001684 <HAL_ADC_MspInit+0x128>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a3a      	ldr	r2, [pc, #232]	; (8001684 <HAL_ADC_MspInit+0x128>)
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b38      	ldr	r3, [pc, #224]	; (8001684 <HAL_ADC_MspInit+0x128>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015ae:	2301      	movs	r3, #1
 80015b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015b2:	2303      	movs	r3, #3
 80015b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ba:	f107 031c 	add.w	r3, r7, #28
 80015be:	4619      	mov	r1, r3
 80015c0:	4831      	ldr	r0, [pc, #196]	; (8001688 <HAL_ADC_MspInit+0x12c>)
 80015c2:	f002 f957 	bl	8003874 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80015c6:	4b31      	ldr	r3, [pc, #196]	; (800168c <HAL_ADC_MspInit+0x130>)
 80015c8:	4a31      	ldr	r2, [pc, #196]	; (8001690 <HAL_ADC_MspInit+0x134>)
 80015ca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80015cc:	4b2f      	ldr	r3, [pc, #188]	; (800168c <HAL_ADC_MspInit+0x130>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015d2:	4b2e      	ldr	r3, [pc, #184]	; (800168c <HAL_ADC_MspInit+0x130>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015d8:	4b2c      	ldr	r3, [pc, #176]	; (800168c <HAL_ADC_MspInit+0x130>)
 80015da:	2200      	movs	r2, #0
 80015dc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015de:	4b2b      	ldr	r3, [pc, #172]	; (800168c <HAL_ADC_MspInit+0x130>)
 80015e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015e4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015e6:	4b29      	ldr	r3, [pc, #164]	; (800168c <HAL_ADC_MspInit+0x130>)
 80015e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015ec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015ee:	4b27      	ldr	r3, [pc, #156]	; (800168c <HAL_ADC_MspInit+0x130>)
 80015f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015f4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80015f6:	4b25      	ldr	r3, [pc, #148]	; (800168c <HAL_ADC_MspInit+0x130>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015fc:	4b23      	ldr	r3, [pc, #140]	; (800168c <HAL_ADC_MspInit+0x130>)
 80015fe:	2200      	movs	r2, #0
 8001600:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001602:	4b22      	ldr	r3, [pc, #136]	; (800168c <HAL_ADC_MspInit+0x130>)
 8001604:	2200      	movs	r2, #0
 8001606:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001608:	4820      	ldr	r0, [pc, #128]	; (800168c <HAL_ADC_MspInit+0x130>)
 800160a:	f001 fe49 	bl	80032a0 <HAL_DMA_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8001614:	f000 fd92 	bl	800213c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a1c      	ldr	r2, [pc, #112]	; (800168c <HAL_ADC_MspInit+0x130>)
 800161c:	639a      	str	r2, [r3, #56]	; 0x38
 800161e:	4a1b      	ldr	r2, [pc, #108]	; (800168c <HAL_ADC_MspInit+0x130>)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001624:	e028      	b.n	8001678 <HAL_ADC_MspInit+0x11c>
  else if(adcHandle->Instance==ADC2)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a1a      	ldr	r2, [pc, #104]	; (8001694 <HAL_ADC_MspInit+0x138>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d123      	bne.n	8001678 <HAL_ADC_MspInit+0x11c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001630:	4b14      	ldr	r3, [pc, #80]	; (8001684 <HAL_ADC_MspInit+0x128>)
 8001632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001634:	4a13      	ldr	r2, [pc, #76]	; (8001684 <HAL_ADC_MspInit+0x128>)
 8001636:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800163a:	6453      	str	r3, [r2, #68]	; 0x44
 800163c:	4b11      	ldr	r3, [pc, #68]	; (8001684 <HAL_ADC_MspInit+0x128>)
 800163e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001640:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001644:	613b      	str	r3, [r7, #16]
 8001646:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001648:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <HAL_ADC_MspInit+0x128>)
 800164a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164c:	4a0d      	ldr	r2, [pc, #52]	; (8001684 <HAL_ADC_MspInit+0x128>)
 800164e:	f043 0304 	orr.w	r3, r3, #4
 8001652:	6313      	str	r3, [r2, #48]	; 0x30
 8001654:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <HAL_ADC_MspInit+0x128>)
 8001656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001660:	2308      	movs	r3, #8
 8001662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001664:	2303      	movs	r3, #3
 8001666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800166c:	f107 031c 	add.w	r3, r7, #28
 8001670:	4619      	mov	r1, r3
 8001672:	4805      	ldr	r0, [pc, #20]	; (8001688 <HAL_ADC_MspInit+0x12c>)
 8001674:	f002 f8fe 	bl	8003874 <HAL_GPIO_Init>
}
 8001678:	bf00      	nop
 800167a:	3730      	adds	r7, #48	; 0x30
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40012000 	.word	0x40012000
 8001684:	40023800 	.word	0x40023800
 8001688:	40020800 	.word	0x40020800
 800168c:	200002b4 	.word	0x200002b4
 8001690:	40026410 	.word	0x40026410
 8001694:	40012100 	.word	0x40012100

08001698 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800169e:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <MX_DMA_Init+0x38>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a0b      	ldr	r2, [pc, #44]	; (80016d0 <MX_DMA_Init+0x38>)
 80016a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <MX_DMA_Init+0x38>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2100      	movs	r1, #0
 80016ba:	2038      	movs	r0, #56	; 0x38
 80016bc:	f001 fdb9 	bl	8003232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80016c0:	2038      	movs	r0, #56	; 0x38
 80016c2:	f001 fdd2 	bl	800326a <HAL_NVIC_EnableIRQ>

}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40023800 	.word	0x40023800

080016d4 <MX_GPIO_Init>:
        * EXTI
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08c      	sub	sp, #48	; 0x30
 80016d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016da:	f107 031c 	add.w	r3, r7, #28
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
 80016e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ea:	4b92      	ldr	r3, [pc, #584]	; (8001934 <MX_GPIO_Init+0x260>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a91      	ldr	r2, [pc, #580]	; (8001934 <MX_GPIO_Init+0x260>)
 80016f0:	f043 0310 	orr.w	r3, r3, #16
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b8f      	ldr	r3, [pc, #572]	; (8001934 <MX_GPIO_Init+0x260>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0310 	and.w	r3, r3, #16
 80016fe:	61bb      	str	r3, [r7, #24]
 8001700:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001702:	4b8c      	ldr	r3, [pc, #560]	; (8001934 <MX_GPIO_Init+0x260>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a8b      	ldr	r2, [pc, #556]	; (8001934 <MX_GPIO_Init+0x260>)
 8001708:	f043 0304 	orr.w	r3, r3, #4
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b89      	ldr	r3, [pc, #548]	; (8001934 <MX_GPIO_Init+0x260>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f003 0304 	and.w	r3, r3, #4
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800171a:	4b86      	ldr	r3, [pc, #536]	; (8001934 <MX_GPIO_Init+0x260>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	4a85      	ldr	r2, [pc, #532]	; (8001934 <MX_GPIO_Init+0x260>)
 8001720:	f043 0320 	orr.w	r3, r3, #32
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b83      	ldr	r3, [pc, #524]	; (8001934 <MX_GPIO_Init+0x260>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f003 0320 	and.w	r3, r3, #32
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001732:	4b80      	ldr	r3, [pc, #512]	; (8001934 <MX_GPIO_Init+0x260>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a7f      	ldr	r2, [pc, #508]	; (8001934 <MX_GPIO_Init+0x260>)
 8001738:	f043 0302 	orr.w	r3, r3, #2
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b7d      	ldr	r3, [pc, #500]	; (8001934 <MX_GPIO_Init+0x260>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800174a:	4b7a      	ldr	r3, [pc, #488]	; (8001934 <MX_GPIO_Init+0x260>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	4a79      	ldr	r2, [pc, #484]	; (8001934 <MX_GPIO_Init+0x260>)
 8001750:	f043 0308 	orr.w	r3, r3, #8
 8001754:	6313      	str	r3, [r2, #48]	; 0x30
 8001756:	4b77      	ldr	r3, [pc, #476]	; (8001934 <MX_GPIO_Init+0x260>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001762:	4b74      	ldr	r3, [pc, #464]	; (8001934 <MX_GPIO_Init+0x260>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	4a73      	ldr	r2, [pc, #460]	; (8001934 <MX_GPIO_Init+0x260>)
 8001768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800176c:	6313      	str	r3, [r2, #48]	; 0x30
 800176e:	4b71      	ldr	r3, [pc, #452]	; (8001934 <MX_GPIO_Init+0x260>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800177a:	4b6e      	ldr	r3, [pc, #440]	; (8001934 <MX_GPIO_Init+0x260>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a6d      	ldr	r2, [pc, #436]	; (8001934 <MX_GPIO_Init+0x260>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b6b      	ldr	r3, [pc, #428]	; (8001934 <MX_GPIO_Init+0x260>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	603b      	str	r3, [r7, #0]
 8001790:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TCLK_Pin|T_MOSI_Pin|T_CS_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8001792:	2200      	movs	r2, #0
 8001794:	f44f 711a 	mov.w	r1, #616	; 0x268
 8001798:	4867      	ldr	r0, [pc, #412]	; (8001938 <MX_GPIO_Init+0x264>)
 800179a:	f002 fa2f 	bl	8003bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800179e:	2200      	movs	r2, #0
 80017a0:	f244 0181 	movw	r1, #16513	; 0x4081
 80017a4:	4865      	ldr	r0, [pc, #404]	; (800193c <MX_GPIO_Init+0x268>)
 80017a6:	f002 fa29 	bl	8003bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 80017aa:	2200      	movs	r2, #0
 80017ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017b0:	4863      	ldr	r0, [pc, #396]	; (8001940 <MX_GPIO_Init+0x26c>)
 80017b2:	f002 fa23 	bl	8003bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_SET);
 80017b6:	2201      	movs	r2, #1
 80017b8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80017bc:	485f      	ldr	r0, [pc, #380]	; (800193c <MX_GPIO_Init+0x268>)
 80017be:	f002 fa1d 	bl	8003bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_Power_GPIO_Port, USB_Power_Pin, GPIO_PIN_RESET);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2140      	movs	r1, #64	; 0x40
 80017c6:	485f      	ldr	r0, [pc, #380]	; (8001944 <MX_GPIO_Init+0x270>)
 80017c8:	f002 fa18 	bl	8003bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 80017cc:	2200      	movs	r2, #0
 80017ce:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80017d2:	485d      	ldr	r0, [pc, #372]	; (8001948 <MX_GPIO_Init+0x274>)
 80017d4:	f002 fa12 	bl	8003bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = TIRQ_Pin|T_MISO_Pin;
 80017d8:	2314      	movs	r3, #20
 80017da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017dc:	2300      	movs	r3, #0
 80017de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017e4:	f107 031c 	add.w	r3, r7, #28
 80017e8:	4619      	mov	r1, r3
 80017ea:	4853      	ldr	r0, [pc, #332]	; (8001938 <MX_GPIO_Init+0x264>)
 80017ec:	f002 f842 	bl	8003874 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = TCLK_Pin|T_MOSI_Pin|T_CS_Pin;
 80017f0:	2368      	movs	r3, #104	; 0x68
 80017f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f4:	2301      	movs	r3, #1
 80017f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fc:	2303      	movs	r3, #3
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001800:	f107 031c 	add.w	r3, r7, #28
 8001804:	4619      	mov	r1, r3
 8001806:	484c      	ldr	r0, [pc, #304]	; (8001938 <MX_GPIO_Init+0x264>)
 8001808:	f002 f834 	bl	8003874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Pin;
 800180c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001812:	2300      	movs	r3, #0
 8001814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(User_Blue_GPIO_Port, &GPIO_InitStruct);
 800181a:	f107 031c 	add.w	r3, r7, #28
 800181e:	4619      	mov	r1, r3
 8001820:	4849      	ldr	r0, [pc, #292]	; (8001948 <MX_GPIO_Init+0x274>)
 8001822:	f002 f827 	bl	8003874 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|LD2_Pin;
 8001826:	f244 0381 	movw	r3, #16513	; 0x4081
 800182a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182c:	2301      	movs	r3, #1
 800182e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001834:	2300      	movs	r3, #0
 8001836:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001838:	f107 031c 	add.w	r3, r7, #28
 800183c:	4619      	mov	r1, r3
 800183e:	483f      	ldr	r0, [pc, #252]	; (800193c <MX_GPIO_Init+0x268>)
 8001840:	f002 f818 	bl	8003874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001844:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184a:	2301      	movs	r3, #1
 800184c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001852:	2300      	movs	r3, #0
 8001854:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001856:	f107 031c 	add.w	r3, r7, #28
 800185a:	4619      	mov	r1, r3
 800185c:	4838      	ldr	r0, [pc, #224]	; (8001940 <MX_GPIO_Init+0x26c>)
 800185e:	f002 f809 	bl	8003874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001862:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001868:	2301      	movs	r3, #1
 800186a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001870:	2300      	movs	r3, #0
 8001872:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001874:	f107 031c 	add.w	r3, r7, #28
 8001878:	4619      	mov	r1, r3
 800187a:	482f      	ldr	r0, [pc, #188]	; (8001938 <MX_GPIO_Init+0x264>)
 800187c:	f001 fffa 	bl	8003874 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001880:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001886:	2301      	movs	r3, #1
 8001888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800188a:	2302      	movs	r3, #2
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188e:	2303      	movs	r3, #3
 8001890:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001892:	f107 031c 	add.w	r3, r7, #28
 8001896:	4619      	mov	r1, r3
 8001898:	4828      	ldr	r0, [pc, #160]	; (800193c <MX_GPIO_Init+0x268>)
 800189a:	f001 ffeb 	bl	8003874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_Power_Pin;
 800189e:	2340      	movs	r3, #64	; 0x40
 80018a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a2:	2301      	movs	r3, #1
 80018a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018aa:	2300      	movs	r3, #0
 80018ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_Power_GPIO_Port, &GPIO_InitStruct);
 80018ae:	f107 031c 	add.w	r3, r7, #28
 80018b2:	4619      	mov	r1, r3
 80018b4:	4823      	ldr	r0, [pc, #140]	; (8001944 <MX_GPIO_Init+0x270>)
 80018b6:	f001 ffdd 	bl	8003874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_Overc_Pin;
 80018ba:	2380      	movs	r3, #128	; 0x80
 80018bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018be:	2300      	movs	r3, #0
 80018c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_Overc_GPIO_Port, &GPIO_InitStruct);
 80018c6:	f107 031c 	add.w	r3, r7, #28
 80018ca:	4619      	mov	r1, r3
 80018cc:	481d      	ldr	r0, [pc, #116]	; (8001944 <MX_GPIO_Init+0x270>)
 80018ce:	f001 ffd1 	bl	8003874 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 80018d2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80018d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d8:	2301      	movs	r3, #1
 80018da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e0:	2303      	movs	r3, #3
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e4:	f107 031c 	add.w	r3, r7, #28
 80018e8:	4619      	mov	r1, r3
 80018ea:	4817      	ldr	r0, [pc, #92]	; (8001948 <MX_GPIO_Init+0x274>)
 80018ec:	f001 ffc2 	bl	8003874 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80018f0:	2318      	movs	r3, #24
 80018f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f4:	2300      	movs	r3, #0
 80018f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018fc:	f107 031c 	add.w	r3, r7, #28
 8001900:	4619      	mov	r1, r3
 8001902:	4812      	ldr	r0, [pc, #72]	; (800194c <MX_GPIO_Init+0x278>)
 8001904:	f001 ffb6 	bl	8003874 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001908:	f44f 7340 	mov.w	r3, #768	; 0x300
 800190c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800190e:	2312      	movs	r3, #18
 8001910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001916:	2303      	movs	r3, #3
 8001918:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800191a:	2304      	movs	r3, #4
 800191c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191e:	f107 031c 	add.w	r3, r7, #28
 8001922:	4619      	mov	r1, r3
 8001924:	4805      	ldr	r0, [pc, #20]	; (800193c <MX_GPIO_Init+0x268>)
 8001926:	f001 ffa5 	bl	8003874 <HAL_GPIO_Init>

}
 800192a:	bf00      	nop
 800192c:	3730      	adds	r7, #48	; 0x30
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40023800 	.word	0x40023800
 8001938:	40021000 	.word	0x40021000
 800193c:	40020400 	.word	0x40020400
 8001940:	40021400 	.word	0x40021400
 8001944:	40021800 	.word	0x40021800
 8001948:	40020800 	.word	0x40020800
 800194c:	40020c00 	.word	0x40020c00

08001950 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001954:	f3bf 8f4f 	dsb	sy
}
 8001958:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800195a:	f3bf 8f6f 	isb	sy
}
 800195e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001960:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <SCB_EnableICache+0x48>)
 8001962:	2200      	movs	r2, #0
 8001964:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001968:	f3bf 8f4f 	dsb	sy
}
 800196c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800196e:	f3bf 8f6f 	isb	sy
}
 8001972:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001974:	4b08      	ldr	r3, [pc, #32]	; (8001998 <SCB_EnableICache+0x48>)
 8001976:	695b      	ldr	r3, [r3, #20]
 8001978:	4a07      	ldr	r2, [pc, #28]	; (8001998 <SCB_EnableICache+0x48>)
 800197a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800197e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001980:	f3bf 8f4f 	dsb	sy
}
 8001984:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001986:	f3bf 8f6f 	isb	sy
}
 800198a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80019a2:	4b1f      	ldr	r3, [pc, #124]	; (8001a20 <SCB_EnableDCache+0x84>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80019aa:	f3bf 8f4f 	dsb	sy
}
 80019ae:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80019b0:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <SCB_EnableDCache+0x84>)
 80019b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019b6:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	0b5b      	lsrs	r3, r3, #13
 80019bc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80019c0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	08db      	lsrs	r3, r3, #3
 80019c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019ca:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	015a      	lsls	r2, r3, #5
 80019d0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80019d4:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80019da:	4911      	ldr	r1, [pc, #68]	; (8001a20 <SCB_EnableDCache+0x84>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	1e5a      	subs	r2, r3, #1
 80019e6:	60ba      	str	r2, [r7, #8]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1ef      	bne.n	80019cc <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	1e5a      	subs	r2, r3, #1
 80019f0:	60fa      	str	r2, [r7, #12]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1e5      	bne.n	80019c2 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80019f6:	f3bf 8f4f 	dsb	sy
}
 80019fa:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80019fc:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <SCB_EnableDCache+0x84>)
 80019fe:	695b      	ldr	r3, [r3, #20]
 8001a00:	4a07      	ldr	r2, [pc, #28]	; (8001a20 <SCB_EnableDCache+0x84>)
 8001a02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a06:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a08:	f3bf 8f4f 	dsb	sy
}
 8001a0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a0e:	f3bf 8f6f 	isb	sy
}
 8001a12:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001a14:	bf00      	nop
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001a28:	f7ff ff92 	bl	8001950 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001a2c:	f7ff ffb6 	bl	800199c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a30:	f000 ff24 	bl	800287c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a34:	f000 f8b4 	bl	8001ba0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a38:	f7ff fe4c 	bl	80016d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a3c:	f7ff fe2c 	bl	8001698 <MX_DMA_Init>
  MX_SPI5_Init();
 8001a40:	f000 fbca 	bl	80021d8 <MX_SPI5_Init>
  MX_TIM1_Init();
 8001a44:	f000 fd7a 	bl	800253c <MX_TIM1_Init>
  MX_ADC1_Init();
 8001a48:	f7ff fce4 	bl	8001414 <MX_ADC1_Init>
  MX_RNG_Init();
 8001a4c:	f000 fb7c 	bl	8002148 <MX_RNG_Init>
  MX_USART3_UART_Init();
 8001a50:	f000 fe18 	bl	8002684 <MX_USART3_UART_Init>
  MX_ADC2_Init();
 8001a54:	f7ff fd30 	bl	80014b8 <MX_ADC2_Init>
  MX_USART2_UART_Init();
 8001a58:	f000 fde4 	bl	8002624 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();
 8001a5c:	f7ff f9d2 	bl	8000e04 <ILI9341_Init>

  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001a60:	2003      	movs	r0, #3
 8001a62:	f7ff f971 	bl	8000d48 <ILI9341_Set_Rotation>

  ILI9341_Fill_Screen(WHITE);
 8001a66:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001a6a:	f7ff fb77 	bl	800115c <ILI9341_Fill_Screen>




  HAL_ADC_Start(&hadc1);
 8001a6e:	483d      	ldr	r0, [pc, #244]	; (8001b64 <main+0x140>)
 8001a70:	f000 ffd8 	bl	8002a24 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8001a74:	483c      	ldr	r0, [pc, #240]	; (8001b68 <main+0x144>)
 8001a76:	f000 ffd5 	bl	8002a24 <HAL_ADC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4) == GPIO_PIN_RESET){
 8001a7a:	2110      	movs	r1, #16
 8001a7c:	483b      	ldr	r0, [pc, #236]	; (8001b6c <main+0x148>)
 8001a7e:	f002 f8a5 	bl	8003bcc <HAL_GPIO_ReadPin>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d147      	bne.n	8001b18 <main+0xf4>



			reset_game = !reset_game;
 8001a88:	4b39      	ldr	r3, [pc, #228]	; (8001b70 <main+0x14c>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	bf14      	ite	ne
 8001a90:	2301      	movne	r3, #1
 8001a92:	2300      	moveq	r3, #0
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	f083 0301 	eor.w	r3, r3, #1
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	4b33      	ldr	r3, [pc, #204]	; (8001b70 <main+0x14c>)
 8001aa4:	701a      	strb	r2, [r3, #0]
			ILI9341_Fill_Screen(WHITE);
 8001aa6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001aaa:	f7ff fb57 	bl	800115c <ILI9341_Fill_Screen>

			paddle_1_x1 = 60 ;
 8001aae:	4b31      	ldr	r3, [pc, #196]	; (8001b74 <main+0x150>)
 8001ab0:	223c      	movs	r2, #60	; 0x3c
 8001ab2:	701a      	strb	r2, [r3, #0]
			paddle_1_x2 = 65 ;
 8001ab4:	4b30      	ldr	r3, [pc, #192]	; (8001b78 <main+0x154>)
 8001ab6:	2241      	movs	r2, #65	; 0x41
 8001ab8:	701a      	strb	r2, [r3, #0]
			paddle_1_y1 = 78 ;
 8001aba:	4b30      	ldr	r3, [pc, #192]	; (8001b7c <main+0x158>)
 8001abc:	224e      	movs	r2, #78	; 0x4e
 8001abe:	701a      	strb	r2, [r3, #0]
			paddle_1_y2 = 133;
 8001ac0:	4b2f      	ldr	r3, [pc, #188]	; (8001b80 <main+0x15c>)
 8001ac2:	2285      	movs	r2, #133	; 0x85
 8001ac4:	701a      	strb	r2, [r3, #0]

			paddle_2_x1 = 240;
 8001ac6:	4b2f      	ldr	r3, [pc, #188]	; (8001b84 <main+0x160>)
 8001ac8:	22f0      	movs	r2, #240	; 0xf0
 8001aca:	701a      	strb	r2, [r3, #0]
			paddle_2_x2 = 245;
 8001acc:	4b2e      	ldr	r3, [pc, #184]	; (8001b88 <main+0x164>)
 8001ace:	22f5      	movs	r2, #245	; 0xf5
 8001ad0:	701a      	strb	r2, [r3, #0]
			paddle_2_y1 = 78 ;
 8001ad2:	4b2e      	ldr	r3, [pc, #184]	; (8001b8c <main+0x168>)
 8001ad4:	224e      	movs	r2, #78	; 0x4e
 8001ad6:	701a      	strb	r2, [r3, #0]
			paddle_2_y2 = 133;
 8001ad8:	4b2d      	ldr	r3, [pc, #180]	; (8001b90 <main+0x16c>)
 8001ada:	2285      	movs	r2, #133	; 0x85
 8001adc:	701a      	strb	r2, [r3, #0]

			ball_x = 150;
 8001ade:	4b2d      	ldr	r3, [pc, #180]	; (8001b94 <main+0x170>)
 8001ae0:	2296      	movs	r2, #150	; 0x96
 8001ae2:	701a      	strb	r2, [r3, #0]
			ball_y = 100;
 8001ae4:	4b2c      	ldr	r3, [pc, #176]	; (8001b98 <main+0x174>)
 8001ae6:	2264      	movs	r2, #100	; 0x64
 8001ae8:	701a      	strb	r2, [r3, #0]

		      // Toggle game_running
		      game_running = !game_running;
 8001aea:	4b2c      	ldr	r3, [pc, #176]	; (8001b9c <main+0x178>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	bf14      	ite	ne
 8001af2:	2301      	movne	r3, #1
 8001af4:	2300      	moveq	r3, #0
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	f083 0301 	eor.w	r3, r3, #1
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	4b25      	ldr	r3, [pc, #148]	; (8001b9c <main+0x178>)
 8001b06:	701a      	strb	r2, [r3, #0]
		      // Wait for button release
		      while (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3) == GPIO_PIN_RESET) {}
 8001b08:	bf00      	nop
 8001b0a:	2108      	movs	r1, #8
 8001b0c:	4817      	ldr	r0, [pc, #92]	; (8001b6c <main+0x148>)
 8001b0e:	f002 f85d 	bl	8003bcc <HAL_GPIO_ReadPin>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0f8      	beq.n	8001b0a <main+0xe6>
	  }
	   // Check if button is pressed
	    if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3) == GPIO_PIN_RESET) {
 8001b18:	2108      	movs	r1, #8
 8001b1a:	4814      	ldr	r0, [pc, #80]	; (8001b6c <main+0x148>)
 8001b1c:	f002 f856 	bl	8003bcc <HAL_GPIO_ReadPin>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d116      	bne.n	8001b54 <main+0x130>
	      // Toggle game_running
	      game_running = !game_running;
 8001b26:	4b1d      	ldr	r3, [pc, #116]	; (8001b9c <main+0x178>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	bf14      	ite	ne
 8001b2e:	2301      	movne	r3, #1
 8001b30:	2300      	moveq	r3, #0
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	f083 0301 	eor.w	r3, r3, #1
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <main+0x178>)
 8001b42:	701a      	strb	r2, [r3, #0]
	      // Wait for button release
	      while (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3) == GPIO_PIN_RESET) {}
 8001b44:	bf00      	nop
 8001b46:	2108      	movs	r1, #8
 8001b48:	4808      	ldr	r0, [pc, #32]	; (8001b6c <main+0x148>)
 8001b4a:	f002 f83f 	bl	8003bcc <HAL_GPIO_ReadPin>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d0f8      	beq.n	8001b46 <main+0x122>

	    // If game is running, call game function



	    if (game_running) {
 8001b54:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <main+0x178>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d08e      	beq.n	8001a7a <main+0x56>
	      game();
 8001b5c:	f000 f88e 	bl	8001c7c <game>
	  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4) == GPIO_PIN_RESET){
 8001b60:	e78b      	b.n	8001a7a <main+0x56>
 8001b62:	bf00      	nop
 8001b64:	20000224 	.word	0x20000224
 8001b68:	2000026c 	.word	0x2000026c
 8001b6c:	40020c00 	.word	0x40020c00
 8001b70:	2000031d 	.word	0x2000031d
 8001b74:	20000013 	.word	0x20000013
 8001b78:	20000014 	.word	0x20000014
 8001b7c:	20000015 	.word	0x20000015
 8001b80:	20000016 	.word	0x20000016
 8001b84:	20000017 	.word	0x20000017
 8001b88:	20000018 	.word	0x20000018
 8001b8c:	20000019 	.word	0x20000019
 8001b90:	2000001a 	.word	0x2000001a
 8001b94:	2000001b 	.word	0x2000001b
 8001b98:	2000001c 	.word	0x2000001c
 8001b9c:	2000031c 	.word	0x2000031c

08001ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b094      	sub	sp, #80	; 0x50
 8001ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ba6:	f107 031c 	add.w	r3, r7, #28
 8001baa:	2234      	movs	r2, #52	; 0x34
 8001bac:	2100      	movs	r1, #0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f004 fd30 	bl	8006614 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bb4:	f107 0308 	add.w	r3, r7, #8
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bc4:	4b2b      	ldr	r3, [pc, #172]	; (8001c74 <SystemClock_Config+0xd4>)
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc8:	4a2a      	ldr	r2, [pc, #168]	; (8001c74 <SystemClock_Config+0xd4>)
 8001bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bce:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd0:	4b28      	ldr	r3, [pc, #160]	; (8001c74 <SystemClock_Config+0xd4>)
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd8:	607b      	str	r3, [r7, #4]
 8001bda:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bdc:	4b26      	ldr	r3, [pc, #152]	; (8001c78 <SystemClock_Config+0xd8>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a25      	ldr	r2, [pc, #148]	; (8001c78 <SystemClock_Config+0xd8>)
 8001be2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001be6:	6013      	str	r3, [r2, #0]
 8001be8:	4b23      	ldr	r3, [pc, #140]	; (8001c78 <SystemClock_Config+0xd8>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bf0:	603b      	str	r3, [r7, #0]
 8001bf2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bfc:	2310      	movs	r3, #16
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c00:	2302      	movs	r3, #2
 8001c02:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c04:	2300      	movs	r3, #0
 8001c06:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c08:	2308      	movs	r3, #8
 8001c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001c0c:	23d8      	movs	r3, #216	; 0xd8
 8001c0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c10:	2302      	movs	r3, #2
 8001c12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001c14:	2309      	movs	r3, #9
 8001c16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c1c:	f107 031c 	add.w	r3, r7, #28
 8001c20:	4618      	mov	r0, r3
 8001c22:	f002 f86f 	bl	8003d04 <HAL_RCC_OscConfig>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001c2c:	f000 fa86 	bl	800213c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c30:	f002 f818 	bl	8003c64 <HAL_PWREx_EnableOverDrive>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001c3a:	f000 fa7f 	bl	800213c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c3e:	230f      	movs	r3, #15
 8001c40:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c42:	2302      	movs	r3, #2
 8001c44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c4a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c54:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001c56:	f107 0308 	add.w	r3, r7, #8
 8001c5a:	2107      	movs	r1, #7
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f002 faff 	bl	8004260 <HAL_RCC_ClockConfig>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001c68:	f000 fa68 	bl	800213c <Error_Handler>
  }
}
 8001c6c:	bf00      	nop
 8001c6e:	3750      	adds	r7, #80	; 0x50
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40007000 	.word	0x40007000

08001c7c <game>:

/* USER CODE BEGIN 4 */

void game(){
 8001c7c:	b590      	push	{r4, r7, lr}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af02      	add	r7, sp, #8
	  //DEBUG TERMINAL
	  adc_value = HAL_ADC_GetValue(&hadc1);
 8001c82:	4892      	ldr	r0, [pc, #584]	; (8001ecc <game+0x250>)
 8001c84:	f000 ff9c 	bl	8002bc0 <HAL_ADC_GetValue>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	4b90      	ldr	r3, [pc, #576]	; (8001ed0 <game+0x254>)
 8001c8e:	601a      	str	r2, [r3, #0]
	  adc_value_2 = HAL_ADC_GetValue(&hadc2);
 8001c90:	4890      	ldr	r0, [pc, #576]	; (8001ed4 <game+0x258>)
 8001c92:	f000 ff95 	bl	8002bc0 <HAL_ADC_GetValue>
 8001c96:	4603      	mov	r3, r0
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4b8f      	ldr	r3, [pc, #572]	; (8001ed8 <game+0x25c>)
 8001c9c:	601a      	str	r2, [r3, #0]
//	  display(adc_value, adc_value_2);
//	  HAL_UART_Transmit(&huart3, (uint32_t*)&str, sizeof(str), 100);
//	  HAL_UART_Transmit(&huart3, (uint8_t*)str1, strlen(str1), 1000);
	  HAL_UART_Transmit(&huart3, (uint32_t*)str3, strlen(str3), 100);
 8001c9e:	488f      	ldr	r0, [pc, #572]	; (8001edc <game+0x260>)
 8001ca0:	f7fe face 	bl	8000240 <strlen>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	2364      	movs	r3, #100	; 0x64
 8001caa:	498c      	ldr	r1, [pc, #560]	; (8001edc <game+0x260>)
 8001cac:	488c      	ldr	r0, [pc, #560]	; (8001ee0 <game+0x264>)
 8001cae:	f003 ffe9 	bl	8005c84 <HAL_UART_Transmit>


		//check edge for paddle
		if(paddle_1_y1 <= 1){
 8001cb2:	4b8c      	ldr	r3, [pc, #560]	; (8001ee4 <game+0x268>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d806      	bhi.n	8001cc8 <game+0x4c>
			paddle_1_y1 = 1;
 8001cba:	4b8a      	ldr	r3, [pc, #552]	; (8001ee4 <game+0x268>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	701a      	strb	r2, [r3, #0]
			paddle_1_y2 = 56;
 8001cc0:	4b89      	ldr	r3, [pc, #548]	; (8001ee8 <game+0x26c>)
 8001cc2:	2238      	movs	r2, #56	; 0x38
 8001cc4:	701a      	strb	r2, [r3, #0]
 8001cc6:	e009      	b.n	8001cdc <game+0x60>
		}else if (paddle_1_y2 >= 240){
 8001cc8:	4b87      	ldr	r3, [pc, #540]	; (8001ee8 <game+0x26c>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2bef      	cmp	r3, #239	; 0xef
 8001cce:	d905      	bls.n	8001cdc <game+0x60>
			paddle_1_y1 = 185;
 8001cd0:	4b84      	ldr	r3, [pc, #528]	; (8001ee4 <game+0x268>)
 8001cd2:	22b9      	movs	r2, #185	; 0xb9
 8001cd4:	701a      	strb	r2, [r3, #0]
			paddle_1_y2 = 240;
 8001cd6:	4b84      	ldr	r3, [pc, #528]	; (8001ee8 <game+0x26c>)
 8001cd8:	22f0      	movs	r2, #240	; 0xf0
 8001cda:	701a      	strb	r2, [r3, #0]
		}if(paddle_2_y1 <= 1){
 8001cdc:	4b83      	ldr	r3, [pc, #524]	; (8001eec <game+0x270>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d806      	bhi.n	8001cf2 <game+0x76>
			paddle_2_y1 = 1;
 8001ce4:	4b81      	ldr	r3, [pc, #516]	; (8001eec <game+0x270>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	701a      	strb	r2, [r3, #0]
			paddle_2_y2 = 56;
 8001cea:	4b81      	ldr	r3, [pc, #516]	; (8001ef0 <game+0x274>)
 8001cec:	2238      	movs	r2, #56	; 0x38
 8001cee:	701a      	strb	r2, [r3, #0]
 8001cf0:	e009      	b.n	8001d06 <game+0x8a>
		}else if(paddle_2_y2 >= 240){
 8001cf2:	4b7f      	ldr	r3, [pc, #508]	; (8001ef0 <game+0x274>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2bef      	cmp	r3, #239	; 0xef
 8001cf8:	d905      	bls.n	8001d06 <game+0x8a>
			paddle_2_y1 = 185;
 8001cfa:	4b7c      	ldr	r3, [pc, #496]	; (8001eec <game+0x270>)
 8001cfc:	22b9      	movs	r2, #185	; 0xb9
 8001cfe:	701a      	strb	r2, [r3, #0]
			paddle_2_y2 = 240;
 8001d00:	4b7b      	ldr	r3, [pc, #492]	; (8001ef0 <game+0x274>)
 8001d02:	22f0      	movs	r2, #240	; 0xf0
 8001d04:	701a      	strb	r2, [r3, #0]
		}
	  	//Move Paddle
		if(adc_value >= 0 && adc_value <= 2000){
 8001d06:	4b72      	ldr	r3, [pc, #456]	; (8001ed0 <game+0x254>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	db11      	blt.n	8001d32 <game+0xb6>
 8001d0e:	4b70      	ldr	r3, [pc, #448]	; (8001ed0 <game+0x254>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001d16:	dc0c      	bgt.n	8001d32 <game+0xb6>
			paddle_1_y1 --;
 8001d18:	4b72      	ldr	r3, [pc, #456]	; (8001ee4 <game+0x268>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	4b70      	ldr	r3, [pc, #448]	; (8001ee4 <game+0x268>)
 8001d22:	701a      	strb	r2, [r3, #0]
			paddle_1_y2 --;
 8001d24:	4b70      	ldr	r3, [pc, #448]	; (8001ee8 <game+0x26c>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	4b6e      	ldr	r3, [pc, #440]	; (8001ee8 <game+0x26c>)
 8001d2e:	701a      	strb	r2, [r3, #0]
 8001d30:	e016      	b.n	8001d60 <game+0xe4>
		}else if(adc_value >= 2800 && adc_value <= 2890){
 8001d32:	4b67      	ldr	r3, [pc, #412]	; (8001ed0 <game+0x254>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8001d3a:	db11      	blt.n	8001d60 <game+0xe4>
 8001d3c:	4b64      	ldr	r3, [pc, #400]	; (8001ed0 <game+0x254>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f640 324a 	movw	r2, #2890	; 0xb4a
 8001d44:	4293      	cmp	r3, r2
 8001d46:	dc0b      	bgt.n	8001d60 <game+0xe4>
			paddle_1_y1 ++;
 8001d48:	4b66      	ldr	r3, [pc, #408]	; (8001ee4 <game+0x268>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	4b64      	ldr	r3, [pc, #400]	; (8001ee4 <game+0x268>)
 8001d52:	701a      	strb	r2, [r3, #0]
			paddle_1_y2 ++;
 8001d54:	4b64      	ldr	r3, [pc, #400]	; (8001ee8 <game+0x26c>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	4b62      	ldr	r3, [pc, #392]	; (8001ee8 <game+0x26c>)
 8001d5e:	701a      	strb	r2, [r3, #0]
		}if(adc_value_2 >= 100 && adc_value_2 <= 2000){
 8001d60:	4b5d      	ldr	r3, [pc, #372]	; (8001ed8 <game+0x25c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b63      	cmp	r3, #99	; 0x63
 8001d66:	dd11      	ble.n	8001d8c <game+0x110>
 8001d68:	4b5b      	ldr	r3, [pc, #364]	; (8001ed8 <game+0x25c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001d70:	dc0c      	bgt.n	8001d8c <game+0x110>
			paddle_2_y1 --;
 8001d72:	4b5e      	ldr	r3, [pc, #376]	; (8001eec <game+0x270>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	3b01      	subs	r3, #1
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	4b5c      	ldr	r3, [pc, #368]	; (8001eec <game+0x270>)
 8001d7c:	701a      	strb	r2, [r3, #0]
			paddle_2_y2 --;
 8001d7e:	4b5c      	ldr	r3, [pc, #368]	; (8001ef0 <game+0x274>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	4b5a      	ldr	r3, [pc, #360]	; (8001ef0 <game+0x274>)
 8001d88:	701a      	strb	r2, [r3, #0]
 8001d8a:	e016      	b.n	8001dba <game+0x13e>
		}else if(adc_value_2 >= 2800 && adc_value_2 <= 2890){paddle_2_y1 ++;paddle_2_y2 ++;}
 8001d8c:	4b52      	ldr	r3, [pc, #328]	; (8001ed8 <game+0x25c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8001d94:	db11      	blt.n	8001dba <game+0x13e>
 8001d96:	4b50      	ldr	r3, [pc, #320]	; (8001ed8 <game+0x25c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f640 324a 	movw	r2, #2890	; 0xb4a
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	dc0b      	bgt.n	8001dba <game+0x13e>
 8001da2:	4b52      	ldr	r3, [pc, #328]	; (8001eec <game+0x270>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	3301      	adds	r3, #1
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	4b50      	ldr	r3, [pc, #320]	; (8001eec <game+0x270>)
 8001dac:	701a      	strb	r2, [r3, #0]
 8001dae:	4b50      	ldr	r3, [pc, #320]	; (8001ef0 <game+0x274>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	3301      	adds	r3, #1
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	4b4e      	ldr	r3, [pc, #312]	; (8001ef0 <game+0x274>)
 8001db8:	701a      	strb	r2, [r3, #0]




		ILI9341_Draw_Filled_Rectangle_Coord(paddle_1_x1, paddle_1_y1, paddle_1_x2, paddle_1_y2, BLACK);
 8001dba:	4b4e      	ldr	r3, [pc, #312]	; (8001ef4 <game+0x278>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	b298      	uxth	r0, r3
 8001dc0:	4b48      	ldr	r3, [pc, #288]	; (8001ee4 <game+0x268>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	b299      	uxth	r1, r3
 8001dc6:	4b4c      	ldr	r3, [pc, #304]	; (8001ef8 <game+0x27c>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	4b46      	ldr	r3, [pc, #280]	; (8001ee8 <game+0x26c>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	2400      	movs	r4, #0
 8001dd4:	9400      	str	r4, [sp, #0]
 8001dd6:	f7fe fe89 	bl	8000aec <ILI9341_Draw_Filled_Rectangle_Coord>
		ILI9341_Draw_Filled_Rectangle_Coord(oldpaddle_1_x1, oldpaddle_1_y1, oldpaddle_1_x2, oldpaddle_1_y2, WHITE);
 8001dda:	4b48      	ldr	r3, [pc, #288]	; (8001efc <game+0x280>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	b298      	uxth	r0, r3
 8001de0:	4b47      	ldr	r3, [pc, #284]	; (8001f00 <game+0x284>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	b299      	uxth	r1, r3
 8001de6:	4b47      	ldr	r3, [pc, #284]	; (8001f04 <game+0x288>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	4b46      	ldr	r3, [pc, #280]	; (8001f08 <game+0x28c>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8001df6:	9400      	str	r4, [sp, #0]
 8001df8:	f7fe fe78 	bl	8000aec <ILI9341_Draw_Filled_Rectangle_Coord>
		ILI9341_Draw_Filled_Rectangle_Coord(paddle_1_x1, paddle_1_y1, paddle_1_x2, paddle_1_y2, BLACK);
 8001dfc:	4b3d      	ldr	r3, [pc, #244]	; (8001ef4 <game+0x278>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	b298      	uxth	r0, r3
 8001e02:	4b38      	ldr	r3, [pc, #224]	; (8001ee4 <game+0x268>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	b299      	uxth	r1, r3
 8001e08:	4b3b      	ldr	r3, [pc, #236]	; (8001ef8 <game+0x27c>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	4b36      	ldr	r3, [pc, #216]	; (8001ee8 <game+0x26c>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	2400      	movs	r4, #0
 8001e16:	9400      	str	r4, [sp, #0]
 8001e18:	f7fe fe68 	bl	8000aec <ILI9341_Draw_Filled_Rectangle_Coord>

		oldpaddle_1_x1 = paddle_1_x1;
 8001e1c:	4b35      	ldr	r3, [pc, #212]	; (8001ef4 <game+0x278>)
 8001e1e:	781a      	ldrb	r2, [r3, #0]
 8001e20:	4b36      	ldr	r3, [pc, #216]	; (8001efc <game+0x280>)
 8001e22:	701a      	strb	r2, [r3, #0]
		oldpaddle_1_y1 = paddle_1_y1;
 8001e24:	4b2f      	ldr	r3, [pc, #188]	; (8001ee4 <game+0x268>)
 8001e26:	781a      	ldrb	r2, [r3, #0]
 8001e28:	4b35      	ldr	r3, [pc, #212]	; (8001f00 <game+0x284>)
 8001e2a:	701a      	strb	r2, [r3, #0]
		oldpaddle_1_x2 = paddle_1_x2;
 8001e2c:	4b32      	ldr	r3, [pc, #200]	; (8001ef8 <game+0x27c>)
 8001e2e:	781a      	ldrb	r2, [r3, #0]
 8001e30:	4b34      	ldr	r3, [pc, #208]	; (8001f04 <game+0x288>)
 8001e32:	701a      	strb	r2, [r3, #0]
		oldpaddle_1_y2 = paddle_1_y2;
 8001e34:	4b2c      	ldr	r3, [pc, #176]	; (8001ee8 <game+0x26c>)
 8001e36:	781a      	ldrb	r2, [r3, #0]
 8001e38:	4b33      	ldr	r3, [pc, #204]	; (8001f08 <game+0x28c>)
 8001e3a:	701a      	strb	r2, [r3, #0]

		//DRAW
		ILI9341_Draw_Filled_Rectangle_Coord(paddle_2_x1, paddle_2_y1, paddle_2_x2, paddle_2_y2, BLACK);
 8001e3c:	4b33      	ldr	r3, [pc, #204]	; (8001f0c <game+0x290>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	b298      	uxth	r0, r3
 8001e42:	4b2a      	ldr	r3, [pc, #168]	; (8001eec <game+0x270>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	b299      	uxth	r1, r3
 8001e48:	4b31      	ldr	r3, [pc, #196]	; (8001f10 <game+0x294>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	4b28      	ldr	r3, [pc, #160]	; (8001ef0 <game+0x274>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	2400      	movs	r4, #0
 8001e56:	9400      	str	r4, [sp, #0]
 8001e58:	f7fe fe48 	bl	8000aec <ILI9341_Draw_Filled_Rectangle_Coord>
		ILI9341_Draw_Filled_Rectangle_Coord(oldpaddle_2_x1, oldpaddle_2_y1, oldpaddle_2_x2, oldpaddle_2_y2, WHITE);
 8001e5c:	4b2d      	ldr	r3, [pc, #180]	; (8001f14 <game+0x298>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	b298      	uxth	r0, r3
 8001e62:	4b2d      	ldr	r3, [pc, #180]	; (8001f18 <game+0x29c>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	b299      	uxth	r1, r3
 8001e68:	4b2c      	ldr	r3, [pc, #176]	; (8001f1c <game+0x2a0>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	4b2c      	ldr	r3, [pc, #176]	; (8001f20 <game+0x2a4>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8001e78:	9400      	str	r4, [sp, #0]
 8001e7a:	f7fe fe37 	bl	8000aec <ILI9341_Draw_Filled_Rectangle_Coord>
		ILI9341_Draw_Filled_Rectangle_Coord(paddle_2_x1, paddle_2_y1, paddle_2_x2, paddle_2_y2, BLACK);
 8001e7e:	4b23      	ldr	r3, [pc, #140]	; (8001f0c <game+0x290>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	b298      	uxth	r0, r3
 8001e84:	4b19      	ldr	r3, [pc, #100]	; (8001eec <game+0x270>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	b299      	uxth	r1, r3
 8001e8a:	4b21      	ldr	r3, [pc, #132]	; (8001f10 <game+0x294>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <game+0x274>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	2400      	movs	r4, #0
 8001e98:	9400      	str	r4, [sp, #0]
 8001e9a:	f7fe fe27 	bl	8000aec <ILI9341_Draw_Filled_Rectangle_Coord>

		oldpaddle_2_x1 = paddle_2_x1;
 8001e9e:	4b1b      	ldr	r3, [pc, #108]	; (8001f0c <game+0x290>)
 8001ea0:	781a      	ldrb	r2, [r3, #0]
 8001ea2:	4b1c      	ldr	r3, [pc, #112]	; (8001f14 <game+0x298>)
 8001ea4:	701a      	strb	r2, [r3, #0]
		oldpaddle_2_y1 = paddle_2_y1;
 8001ea6:	4b11      	ldr	r3, [pc, #68]	; (8001eec <game+0x270>)
 8001ea8:	781a      	ldrb	r2, [r3, #0]
 8001eaa:	4b1b      	ldr	r3, [pc, #108]	; (8001f18 <game+0x29c>)
 8001eac:	701a      	strb	r2, [r3, #0]
		oldpaddle_2_x2 = paddle_2_x2;
 8001eae:	4b18      	ldr	r3, [pc, #96]	; (8001f10 <game+0x294>)
 8001eb0:	781a      	ldrb	r2, [r3, #0]
 8001eb2:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <game+0x2a0>)
 8001eb4:	701a      	strb	r2, [r3, #0]
		oldpaddle_2_y2 = paddle_2_y2;
 8001eb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <game+0x274>)
 8001eb8:	781a      	ldrb	r2, [r3, #0]
 8001eba:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <game+0x2a4>)
 8001ebc:	701a      	strb	r2, [r3, #0]


	  //UPDATE THE BALL
	  move_ball();
 8001ebe:	f000 f853 	bl	8001f68 <move_ball>
}
 8001ec2:	bf00      	nop
 8001ec4:	3704      	adds	r7, #4
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd90      	pop	{r4, r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000224 	.word	0x20000224
 8001ed0:	20000314 	.word	0x20000314
 8001ed4:	2000026c 	.word	0x2000026c
 8001ed8:	20000318 	.word	0x20000318
 8001edc:	20000004 	.word	0x20000004
 8001ee0:	20000478 	.word	0x20000478
 8001ee4:	20000015 	.word	0x20000015
 8001ee8:	20000016 	.word	0x20000016
 8001eec:	20000019 	.word	0x20000019
 8001ef0:	2000001a 	.word	0x2000001a
 8001ef4:	20000013 	.word	0x20000013
 8001ef8:	20000014 	.word	0x20000014
 8001efc:	20000320 	.word	0x20000320
 8001f00:	20000322 	.word	0x20000322
 8001f04:	20000321 	.word	0x20000321
 8001f08:	20000323 	.word	0x20000323
 8001f0c:	20000017 	.word	0x20000017
 8001f10:	20000018 	.word	0x20000018
 8001f14:	20000324 	.word	0x20000324
 8001f18:	20000326 	.word	0x20000326
 8001f1c:	20000325 	.word	0x20000325
 8001f20:	20000327 	.word	0x20000327

08001f24 <inPaddle>:
//DISPLAY FUNCTION FOR DEBUG ON TERMINAL
void display(int val_1, int val_2){
	sprintf(str, "Player Score 1 : %d Player Score 2 : %d", player_1_score, player_2_score);
}

bool inPaddle(int x, int y, int rectX, int rectY, int rectWidth, int rectHeight) {
 8001f24:	b480      	push	{r7}
 8001f26:	b087      	sub	sp, #28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
 8001f30:	603b      	str	r3, [r7, #0]
  bool  result = false;
 8001f32:	2300      	movs	r3, #0
 8001f34:	75fb      	strb	r3, [r7, #23]
  if ((x >= rectX && x <= rectWidth) &&
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	db0d      	blt.n	8001f5a <inPaddle+0x36>
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	6a3b      	ldr	r3, [r7, #32]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	dc09      	bgt.n	8001f5a <inPaddle+0x36>
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	db05      	blt.n	8001f5a <inPaddle+0x36>
    (y >= rectY && y <= rectHeight)) {
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f52:	429a      	cmp	r2, r3
 8001f54:	dc01      	bgt.n	8001f5a <inPaddle+0x36>
    result = true;
 8001f56:	2301      	movs	r3, #1
 8001f58:	75fb      	strb	r3, [r7, #23]
  }
  return result;
 8001f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	371c      	adds	r7, #28
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <move_ball>:

void move_ball(){
 8001f68:	b5b0      	push	{r4, r5, r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af02      	add	r7, sp, #8

	if(ball_x+2 == screen_hight || ball_x == 30){
 8001f6e:	4b60      	ldr	r3, [pc, #384]	; (80020f0 <move_ball+0x188>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	3302      	adds	r3, #2
 8001f74:	4a5f      	ldr	r2, [pc, #380]	; (80020f4 <move_ball+0x18c>)
 8001f76:	6812      	ldr	r2, [r2, #0]
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d003      	beq.n	8001f84 <move_ball+0x1c>
 8001f7c:	4b5c      	ldr	r3, [pc, #368]	; (80020f0 <move_ball+0x188>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b1e      	cmp	r3, #30
 8001f82:	d133      	bne.n	8001fec <move_ball+0x84>
		if(ball_x+2 == screen_hight){
 8001f84:	4b5a      	ldr	r3, [pc, #360]	; (80020f0 <move_ball+0x188>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	3302      	adds	r3, #2
 8001f8a:	4a5a      	ldr	r2, [pc, #360]	; (80020f4 <move_ball+0x18c>)
 8001f8c:	6812      	ldr	r2, [r2, #0]
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d10b      	bne.n	8001faa <move_ball+0x42>
			player_1_score += 1 ;
 8001f92:	4b59      	ldr	r3, [pc, #356]	; (80020f8 <move_ball+0x190>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	3301      	adds	r3, #1
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	4b57      	ldr	r3, [pc, #348]	; (80020f8 <move_ball+0x190>)
 8001f9c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_11);
 8001f9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fa2:	4856      	ldr	r0, [pc, #344]	; (80020fc <move_ball+0x194>)
 8001fa4:	f001 fe43 	bl	8003c2e <HAL_GPIO_TogglePin>
 8001fa8:	e00e      	b.n	8001fc8 <move_ball+0x60>

		}else if(ball_x == 30){
 8001faa:	4b51      	ldr	r3, [pc, #324]	; (80020f0 <move_ball+0x188>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b1e      	cmp	r3, #30
 8001fb0:	d10a      	bne.n	8001fc8 <move_ball+0x60>
			player_2_score += 1;
 8001fb2:	4b53      	ldr	r3, [pc, #332]	; (8002100 <move_ball+0x198>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	4b51      	ldr	r3, [pc, #324]	; (8002100 <move_ball+0x198>)
 8001fbc:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 8001fbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fc2:	484e      	ldr	r0, [pc, #312]	; (80020fc <move_ball+0x194>)
 8001fc4:	f001 fe33 	bl	8003c2e <HAL_GPIO_TogglePin>

		}
		//SEND BALL BACK TO SPAWN BALL AREA

		ball_x = 150;
 8001fc8:	4b49      	ldr	r3, [pc, #292]	; (80020f0 <move_ball+0x188>)
 8001fca:	2296      	movs	r2, #150	; 0x96
 8001fcc:	701a      	strb	r2, [r3, #0]
		ball_y = 100;
 8001fce:	4b4d      	ldr	r3, [pc, #308]	; (8002104 <move_ball+0x19c>)
 8001fd0:	2264      	movs	r2, #100	; 0x64
 8001fd2:	701a      	strb	r2, [r3, #0]

		//MAKE IT MOVE DIFFERNT SIDE
		ballDirectionX = -ballDirectionX;
 8001fd4:	4b4c      	ldr	r3, [pc, #304]	; (8002108 <move_ball+0x1a0>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	425b      	negs	r3, r3
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	4b4a      	ldr	r3, [pc, #296]	; (8002108 <move_ball+0x1a0>)
 8001fde:	701a      	strb	r2, [r3, #0]
		ballDirectionY = -ballDirectionY;
 8001fe0:	4b4a      	ldr	r3, [pc, #296]	; (800210c <move_ball+0x1a4>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	425b      	negs	r3, r3
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	4b48      	ldr	r3, [pc, #288]	; (800210c <move_ball+0x1a4>)
 8001fea:	701a      	strb	r2, [r3, #0]



	}

	if (ball_y > screen_width || ball_y < 0) {
 8001fec:	4b45      	ldr	r3, [pc, #276]	; (8002104 <move_ball+0x19c>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4b47      	ldr	r3, [pc, #284]	; (8002110 <move_ball+0x1a8>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d905      	bls.n	8002006 <move_ball+0x9e>
	    ballDirectionY = -ballDirectionY;
 8001ffa:	4b44      	ldr	r3, [pc, #272]	; (800210c <move_ball+0x1a4>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	425b      	negs	r3, r3
 8002000:	b2da      	uxtb	r2, r3
 8002002:	4b42      	ldr	r3, [pc, #264]	; (800210c <move_ball+0x1a4>)
 8002004:	701a      	strb	r2, [r3, #0]
	}

	if (inPaddle(ball_x, ball_y, paddle_1_x1, paddle_1_y1, paddle_1_x2, paddle_1_y2)||(inPaddle(ball_x, ball_y, paddle_2_x1, paddle_2_y1, paddle_2_x2, paddle_2_y2))) {
 8002006:	4b3a      	ldr	r3, [pc, #232]	; (80020f0 <move_ball+0x188>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	4b3d      	ldr	r3, [pc, #244]	; (8002104 <move_ball+0x19c>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	4619      	mov	r1, r3
 8002012:	4b40      	ldr	r3, [pc, #256]	; (8002114 <move_ball+0x1ac>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	461c      	mov	r4, r3
 8002018:	4b3f      	ldr	r3, [pc, #252]	; (8002118 <move_ball+0x1b0>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	461d      	mov	r5, r3
 800201e:	4b3f      	ldr	r3, [pc, #252]	; (800211c <move_ball+0x1b4>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	461a      	mov	r2, r3
 8002024:	4b3e      	ldr	r3, [pc, #248]	; (8002120 <move_ball+0x1b8>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	9301      	str	r3, [sp, #4]
 800202a:	9200      	str	r2, [sp, #0]
 800202c:	462b      	mov	r3, r5
 800202e:	4622      	mov	r2, r4
 8002030:	f7ff ff78 	bl	8001f24 <inPaddle>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d119      	bne.n	800206e <move_ball+0x106>
 800203a:	4b2d      	ldr	r3, [pc, #180]	; (80020f0 <move_ball+0x188>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	4b30      	ldr	r3, [pc, #192]	; (8002104 <move_ball+0x19c>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	4619      	mov	r1, r3
 8002046:	4b37      	ldr	r3, [pc, #220]	; (8002124 <move_ball+0x1bc>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	461c      	mov	r4, r3
 800204c:	4b36      	ldr	r3, [pc, #216]	; (8002128 <move_ball+0x1c0>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	461d      	mov	r5, r3
 8002052:	4b36      	ldr	r3, [pc, #216]	; (800212c <move_ball+0x1c4>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	461a      	mov	r2, r3
 8002058:	4b35      	ldr	r3, [pc, #212]	; (8002130 <move_ball+0x1c8>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	9301      	str	r3, [sp, #4]
 800205e:	9200      	str	r2, [sp, #0]
 8002060:	462b      	mov	r3, r5
 8002062:	4622      	mov	r2, r4
 8002064:	f7ff ff5e 	bl	8001f24 <inPaddle>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d005      	beq.n	800207a <move_ball+0x112>
	    ballDirectionX = -ballDirectionX;
 800206e:	4b26      	ldr	r3, [pc, #152]	; (8002108 <move_ball+0x1a0>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	425b      	negs	r3, r3
 8002074:	b2da      	uxtb	r2, r3
 8002076:	4b24      	ldr	r3, [pc, #144]	; (8002108 <move_ball+0x1a0>)
 8002078:	701a      	strb	r2, [r3, #0]

	}
	  ball_x += ballDirectionX;
 800207a:	4b1d      	ldr	r3, [pc, #116]	; (80020f0 <move_ball+0x188>)
 800207c:	781a      	ldrb	r2, [r3, #0]
 800207e:	4b22      	ldr	r3, [pc, #136]	; (8002108 <move_ball+0x1a0>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	4413      	add	r3, r2
 8002084:	b2da      	uxtb	r2, r3
 8002086:	4b1a      	ldr	r3, [pc, #104]	; (80020f0 <move_ball+0x188>)
 8002088:	701a      	strb	r2, [r3, #0]
	  ball_y += ballDirectionY;
 800208a:	4b1e      	ldr	r3, [pc, #120]	; (8002104 <move_ball+0x19c>)
 800208c:	781a      	ldrb	r2, [r3, #0]
 800208e:	4b1f      	ldr	r3, [pc, #124]	; (800210c <move_ball+0x1a4>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	4413      	add	r3, r2
 8002094:	b2da      	uxtb	r2, r3
 8002096:	4b1b      	ldr	r3, [pc, #108]	; (8002104 <move_ball+0x19c>)
 8002098:	701a      	strb	r2, [r3, #0]
	  ILI9341_Draw_Filled_Circle(ball_x, ball_y, 3, BLACK);
 800209a:	4b15      	ldr	r3, [pc, #84]	; (80020f0 <move_ball+0x188>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	b298      	uxth	r0, r3
 80020a0:	4b18      	ldr	r3, [pc, #96]	; (8002104 <move_ball+0x19c>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	b299      	uxth	r1, r3
 80020a6:	2300      	movs	r3, #0
 80020a8:	2203      	movs	r2, #3
 80020aa:	f7fe fc97 	bl	80009dc <ILI9341_Draw_Filled_Circle>
	  ILI9341_Draw_Filled_Circle(oldball_x, oldball_y, 3, WHITE);
 80020ae:	4b21      	ldr	r3, [pc, #132]	; (8002134 <move_ball+0x1cc>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	b298      	uxth	r0, r3
 80020b4:	4b20      	ldr	r3, [pc, #128]	; (8002138 <move_ball+0x1d0>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	b299      	uxth	r1, r3
 80020ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020be:	2203      	movs	r2, #3
 80020c0:	f7fe fc8c 	bl	80009dc <ILI9341_Draw_Filled_Circle>
	  ILI9341_Draw_Filled_Circle(ball_x, ball_y, 3, BLACK);
 80020c4:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <move_ball+0x188>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	b298      	uxth	r0, r3
 80020ca:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <move_ball+0x19c>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	b299      	uxth	r1, r3
 80020d0:	2300      	movs	r3, #0
 80020d2:	2203      	movs	r2, #3
 80020d4:	f7fe fc82 	bl	80009dc <ILI9341_Draw_Filled_Circle>

	  oldball_x = ball_x;
 80020d8:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <move_ball+0x188>)
 80020da:	781a      	ldrb	r2, [r3, #0]
 80020dc:	4b15      	ldr	r3, [pc, #84]	; (8002134 <move_ball+0x1cc>)
 80020de:	701a      	strb	r2, [r3, #0]
	  oldball_y = ball_y;
 80020e0:	4b08      	ldr	r3, [pc, #32]	; (8002104 <move_ball+0x19c>)
 80020e2:	781a      	ldrb	r2, [r3, #0]
 80020e4:	4b14      	ldr	r3, [pc, #80]	; (8002138 <move_ball+0x1d0>)
 80020e6:	701a      	strb	r2, [r3, #0]


}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bdb0      	pop	{r4, r5, r7, pc}
 80020ee:	bf00      	nop
 80020f0:	2000001b 	.word	0x2000001b
 80020f4:	20000020 	.word	0x20000020
 80020f8:	2000031e 	.word	0x2000031e
 80020fc:	40020400 	.word	0x40020400
 8002100:	2000031f 	.word	0x2000031f
 8002104:	2000001c 	.word	0x2000001c
 8002108:	2000001d 	.word	0x2000001d
 800210c:	2000001e 	.word	0x2000001e
 8002110:	20000024 	.word	0x20000024
 8002114:	20000013 	.word	0x20000013
 8002118:	20000015 	.word	0x20000015
 800211c:	20000014 	.word	0x20000014
 8002120:	20000016 	.word	0x20000016
 8002124:	20000017 	.word	0x20000017
 8002128:	20000019 	.word	0x20000019
 800212c:	20000018 	.word	0x20000018
 8002130:	2000001a 	.word	0x2000001a
 8002134:	20000328 	.word	0x20000328
 8002138:	20000329 	.word	0x20000329

0800213c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002140:	b672      	cpsid	i
}
 8002142:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002144:	e7fe      	b.n	8002144 <Error_Handler+0x8>
	...

08002148 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800214c:	4b06      	ldr	r3, [pc, #24]	; (8002168 <MX_RNG_Init+0x20>)
 800214e:	4a07      	ldr	r2, [pc, #28]	; (800216c <MX_RNG_Init+0x24>)
 8002150:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002152:	4805      	ldr	r0, [pc, #20]	; (8002168 <MX_RNG_Init+0x20>)
 8002154:	f002 fe92 	bl	8004e7c <HAL_RNG_Init>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800215e:	f7ff ffed 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	2000032c 	.word	0x2000032c
 800216c:	50060800 	.word	0x50060800

08002170 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b0a8      	sub	sp, #160	; 0xa0
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002178:	f107 0310 	add.w	r3, r7, #16
 800217c:	2290      	movs	r2, #144	; 0x90
 800217e:	2100      	movs	r1, #0
 8002180:	4618      	mov	r0, r3
 8002182:	f004 fa47 	bl	8006614 <memset>
  if(rngHandle->Instance==RNG)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a11      	ldr	r2, [pc, #68]	; (80021d0 <HAL_RNG_MspInit+0x60>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d11b      	bne.n	80021c8 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002190:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002194:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002196:	2300      	movs	r3, #0
 8002198:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800219c:	f107 0310 	add.w	r3, r7, #16
 80021a0:	4618      	mov	r0, r3
 80021a2:	f002 fa43 	bl	800462c <HAL_RCCEx_PeriphCLKConfig>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 80021ac:	f7ff ffc6 	bl	800213c <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80021b0:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <HAL_RNG_MspInit+0x64>)
 80021b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b4:	4a07      	ldr	r2, [pc, #28]	; (80021d4 <HAL_RNG_MspInit+0x64>)
 80021b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021ba:	6353      	str	r3, [r2, #52]	; 0x34
 80021bc:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <HAL_RNG_MspInit+0x64>)
 80021be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80021c8:	bf00      	nop
 80021ca:	37a0      	adds	r7, #160	; 0xa0
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	50060800 	.word	0x50060800
 80021d4:	40023800 	.word	0x40023800

080021d8 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80021dc:	4b1b      	ldr	r3, [pc, #108]	; (800224c <MX_SPI5_Init+0x74>)
 80021de:	4a1c      	ldr	r2, [pc, #112]	; (8002250 <MX_SPI5_Init+0x78>)
 80021e0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80021e2:	4b1a      	ldr	r3, [pc, #104]	; (800224c <MX_SPI5_Init+0x74>)
 80021e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021e8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80021ea:	4b18      	ldr	r3, [pc, #96]	; (800224c <MX_SPI5_Init+0x74>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80021f0:	4b16      	ldr	r3, [pc, #88]	; (800224c <MX_SPI5_Init+0x74>)
 80021f2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80021f6:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021f8:	4b14      	ldr	r3, [pc, #80]	; (800224c <MX_SPI5_Init+0x74>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021fe:	4b13      	ldr	r3, [pc, #76]	; (800224c <MX_SPI5_Init+0x74>)
 8002200:	2200      	movs	r2, #0
 8002202:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002204:	4b11      	ldr	r3, [pc, #68]	; (800224c <MX_SPI5_Init+0x74>)
 8002206:	f44f 7200 	mov.w	r2, #512	; 0x200
 800220a:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800220c:	4b0f      	ldr	r3, [pc, #60]	; (800224c <MX_SPI5_Init+0x74>)
 800220e:	2200      	movs	r2, #0
 8002210:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002212:	4b0e      	ldr	r3, [pc, #56]	; (800224c <MX_SPI5_Init+0x74>)
 8002214:	2200      	movs	r2, #0
 8002216:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002218:	4b0c      	ldr	r3, [pc, #48]	; (800224c <MX_SPI5_Init+0x74>)
 800221a:	2200      	movs	r2, #0
 800221c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800221e:	4b0b      	ldr	r3, [pc, #44]	; (800224c <MX_SPI5_Init+0x74>)
 8002220:	2200      	movs	r2, #0
 8002222:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8002224:	4b09      	ldr	r3, [pc, #36]	; (800224c <MX_SPI5_Init+0x74>)
 8002226:	2207      	movs	r2, #7
 8002228:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800222a:	4b08      	ldr	r3, [pc, #32]	; (800224c <MX_SPI5_Init+0x74>)
 800222c:	2200      	movs	r2, #0
 800222e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <MX_SPI5_Init+0x74>)
 8002232:	2200      	movs	r2, #0
 8002234:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002236:	4805      	ldr	r0, [pc, #20]	; (800224c <MX_SPI5_Init+0x74>)
 8002238:	f002 fe4a 	bl	8004ed0 <HAL_SPI_Init>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8002242:	f7ff ff7b 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	2000033c 	.word	0x2000033c
 8002250:	40015000 	.word	0x40015000

08002254 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08a      	sub	sp, #40	; 0x28
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225c:	f107 0314 	add.w	r3, r7, #20
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	60da      	str	r2, [r3, #12]
 800226a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a17      	ldr	r2, [pc, #92]	; (80022d0 <HAL_SPI_MspInit+0x7c>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d128      	bne.n	80022c8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002276:	4b17      	ldr	r3, [pc, #92]	; (80022d4 <HAL_SPI_MspInit+0x80>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	4a16      	ldr	r2, [pc, #88]	; (80022d4 <HAL_SPI_MspInit+0x80>)
 800227c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002280:	6453      	str	r3, [r2, #68]	; 0x44
 8002282:	4b14      	ldr	r3, [pc, #80]	; (80022d4 <HAL_SPI_MspInit+0x80>)
 8002284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002286:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800228a:	613b      	str	r3, [r7, #16]
 800228c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800228e:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <HAL_SPI_MspInit+0x80>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	4a10      	ldr	r2, [pc, #64]	; (80022d4 <HAL_SPI_MspInit+0x80>)
 8002294:	f043 0320 	orr.w	r3, r3, #32
 8002298:	6313      	str	r3, [r2, #48]	; 0x30
 800229a:	4b0e      	ldr	r3, [pc, #56]	; (80022d4 <HAL_SPI_MspInit+0x80>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	f003 0320 	and.w	r3, r3, #32
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80022a6:	f44f 7360 	mov.w	r3, #896	; 0x380
 80022aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ac:	2302      	movs	r3, #2
 80022ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b4:	2303      	movs	r3, #3
 80022b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80022b8:	2305      	movs	r3, #5
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022bc:	f107 0314 	add.w	r3, r7, #20
 80022c0:	4619      	mov	r1, r3
 80022c2:	4805      	ldr	r0, [pc, #20]	; (80022d8 <HAL_SPI_MspInit+0x84>)
 80022c4:	f001 fad6 	bl	8003874 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80022c8:	bf00      	nop
 80022ca:	3728      	adds	r7, #40	; 0x28
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40015000 	.word	0x40015000
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40021400 	.word	0x40021400

080022dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80022e2:	4b0f      	ldr	r3, [pc, #60]	; (8002320 <HAL_MspInit+0x44>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	4a0e      	ldr	r2, [pc, #56]	; (8002320 <HAL_MspInit+0x44>)
 80022e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ec:	6413      	str	r3, [r2, #64]	; 0x40
 80022ee:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <HAL_MspInit+0x44>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f6:	607b      	str	r3, [r7, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022fa:	4b09      	ldr	r3, [pc, #36]	; (8002320 <HAL_MspInit+0x44>)
 80022fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fe:	4a08      	ldr	r2, [pc, #32]	; (8002320 <HAL_MspInit+0x44>)
 8002300:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002304:	6453      	str	r3, [r2, #68]	; 0x44
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_MspInit+0x44>)
 8002308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800230e:	603b      	str	r3, [r7, #0]
 8002310:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002312:	2007      	movs	r0, #7
 8002314:	f000 ff82 	bl	800321c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002318:	bf00      	nop
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40023800 	.word	0x40023800

08002324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002328:	e7fe      	b.n	8002328 <NMI_Handler+0x4>

0800232a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800232e:	e7fe      	b.n	800232e <HardFault_Handler+0x4>

08002330 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002334:	e7fe      	b.n	8002334 <MemManage_Handler+0x4>

08002336 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002336:	b480      	push	{r7}
 8002338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800233a:	e7fe      	b.n	800233a <BusFault_Handler+0x4>

0800233c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002340:	e7fe      	b.n	8002340 <UsageFault_Handler+0x4>

08002342 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002342:	b480      	push	{r7}
 8002344:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800235e:	b480      	push	{r7}
 8002360:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002370:	f000 fad0 	bl	8002914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002374:	bf00      	nop
 8002376:	bd80      	pop	{r7, pc}

08002378 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800237c:	4802      	ldr	r0, [pc, #8]	; (8002388 <DMA2_Stream0_IRQHandler+0x10>)
 800237e:	f001 f83d 	bl	80033fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	200002b4 	.word	0x200002b4

0800238c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return 1;
 8002390:	2301      	movs	r3, #1
}
 8002392:	4618      	mov	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <_kill>:

int _kill(int pid, int sig)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023a6:	f004 f90b 	bl	80065c0 <__errno>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2216      	movs	r2, #22
 80023ae:	601a      	str	r2, [r3, #0]
  return -1;
 80023b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <_exit>:

void _exit (int status)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023c4:	f04f 31ff 	mov.w	r1, #4294967295
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7ff ffe7 	bl	800239c <_kill>
  while (1) {}    /* Make sure we hang here */
 80023ce:	e7fe      	b.n	80023ce <_exit+0x12>

080023d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]
 80023e0:	e00a      	b.n	80023f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023e2:	f3af 8000 	nop.w
 80023e6:	4601      	mov	r1, r0
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	1c5a      	adds	r2, r3, #1
 80023ec:	60ba      	str	r2, [r7, #8]
 80023ee:	b2ca      	uxtb	r2, r1
 80023f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	3301      	adds	r3, #1
 80023f6:	617b      	str	r3, [r7, #20]
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	dbf0      	blt.n	80023e2 <_read+0x12>
  }

  return len;
 8002400:	687b      	ldr	r3, [r7, #4]
}
 8002402:	4618      	mov	r0, r3
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b086      	sub	sp, #24
 800240e:	af00      	add	r7, sp, #0
 8002410:	60f8      	str	r0, [r7, #12]
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
 800241a:	e009      	b.n	8002430 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	1c5a      	adds	r2, r3, #1
 8002420:	60ba      	str	r2, [r7, #8]
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	3301      	adds	r3, #1
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	429a      	cmp	r2, r3
 8002436:	dbf1      	blt.n	800241c <_write+0x12>
  }
  return len;
 8002438:	687b      	ldr	r3, [r7, #4]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <_close>:

int _close(int file)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800244a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800244e:	4618      	mov	r0, r3
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
 8002462:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800246a:	605a      	str	r2, [r3, #4]
  return 0;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <_isatty>:

int _isatty(int file)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002482:	2301      	movs	r3, #1
}
 8002484:	4618      	mov	r0, r3
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
	...

080024ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024b4:	4a14      	ldr	r2, [pc, #80]	; (8002508 <_sbrk+0x5c>)
 80024b6:	4b15      	ldr	r3, [pc, #84]	; (800250c <_sbrk+0x60>)
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024c0:	4b13      	ldr	r3, [pc, #76]	; (8002510 <_sbrk+0x64>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d102      	bne.n	80024ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024c8:	4b11      	ldr	r3, [pc, #68]	; (8002510 <_sbrk+0x64>)
 80024ca:	4a12      	ldr	r2, [pc, #72]	; (8002514 <_sbrk+0x68>)
 80024cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ce:	4b10      	ldr	r3, [pc, #64]	; (8002510 <_sbrk+0x64>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4413      	add	r3, r2
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d207      	bcs.n	80024ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024dc:	f004 f870 	bl	80065c0 <__errno>
 80024e0:	4603      	mov	r3, r0
 80024e2:	220c      	movs	r2, #12
 80024e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024e6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ea:	e009      	b.n	8002500 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024ec:	4b08      	ldr	r3, [pc, #32]	; (8002510 <_sbrk+0x64>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024f2:	4b07      	ldr	r3, [pc, #28]	; (8002510 <_sbrk+0x64>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4413      	add	r3, r2
 80024fa:	4a05      	ldr	r2, [pc, #20]	; (8002510 <_sbrk+0x64>)
 80024fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024fe:	68fb      	ldr	r3, [r7, #12]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20080000 	.word	0x20080000
 800250c:	00000400 	.word	0x00000400
 8002510:	200003a0 	.word	0x200003a0
 8002514:	20000518 	.word	0x20000518

08002518 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800251c:	4b06      	ldr	r3, [pc, #24]	; (8002538 <SystemInit+0x20>)
 800251e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002522:	4a05      	ldr	r2, [pc, #20]	; (8002538 <SystemInit+0x20>)
 8002524:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002528:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800252c:	bf00      	nop
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	e000ed00 	.word	0xe000ed00

0800253c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b088      	sub	sp, #32
 8002540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002542:	f107 0310 	add.w	r3, r7, #16
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	605a      	str	r2, [r3, #4]
 800254c:	609a      	str	r2, [r3, #8]
 800254e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002550:	1d3b      	adds	r3, r7, #4
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	605a      	str	r2, [r3, #4]
 8002558:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800255a:	4b20      	ldr	r3, [pc, #128]	; (80025dc <MX_TIM1_Init+0xa0>)
 800255c:	4a20      	ldr	r2, [pc, #128]	; (80025e0 <MX_TIM1_Init+0xa4>)
 800255e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000;
 8002560:	4b1e      	ldr	r3, [pc, #120]	; (80025dc <MX_TIM1_Init+0xa0>)
 8002562:	f242 7210 	movw	r2, #10000	; 0x2710
 8002566:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002568:	4b1c      	ldr	r3, [pc, #112]	; (80025dc <MX_TIM1_Init+0xa0>)
 800256a:	2200      	movs	r2, #0
 800256c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800256e:	4b1b      	ldr	r3, [pc, #108]	; (80025dc <MX_TIM1_Init+0xa0>)
 8002570:	2200      	movs	r2, #0
 8002572:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8002574:	4b19      	ldr	r3, [pc, #100]	; (80025dc <MX_TIM1_Init+0xa0>)
 8002576:	f44f 7280 	mov.w	r2, #256	; 0x100
 800257a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800257c:	4b17      	ldr	r3, [pc, #92]	; (80025dc <MX_TIM1_Init+0xa0>)
 800257e:	2200      	movs	r2, #0
 8002580:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002582:	4b16      	ldr	r3, [pc, #88]	; (80025dc <MX_TIM1_Init+0xa0>)
 8002584:	2200      	movs	r2, #0
 8002586:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002588:	4814      	ldr	r0, [pc, #80]	; (80025dc <MX_TIM1_Init+0xa0>)
 800258a:	f003 f843 	bl	8005614 <HAL_TIM_Base_Init>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8002594:	f7ff fdd2 	bl	800213c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800259c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800259e:	f107 0310 	add.w	r3, r7, #16
 80025a2:	4619      	mov	r1, r3
 80025a4:	480d      	ldr	r0, [pc, #52]	; (80025dc <MX_TIM1_Init+0xa0>)
 80025a6:	f003 f88d 	bl	80056c4 <HAL_TIM_ConfigClockSource>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80025b0:	f7ff fdc4 	bl	800213c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025b4:	2300      	movs	r3, #0
 80025b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80025b8:	2300      	movs	r3, #0
 80025ba:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025bc:	2300      	movs	r3, #0
 80025be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80025c0:	1d3b      	adds	r3, r7, #4
 80025c2:	4619      	mov	r1, r3
 80025c4:	4805      	ldr	r0, [pc, #20]	; (80025dc <MX_TIM1_Init+0xa0>)
 80025c6:	f003 fa81 	bl	8005acc <HAL_TIMEx_MasterConfigSynchronization>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80025d0:	f7ff fdb4 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80025d4:	bf00      	nop
 80025d6:	3720      	adds	r7, #32
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	200003a4 	.word	0x200003a4
 80025e0:	40010000 	.word	0x40010000

080025e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a0a      	ldr	r2, [pc, #40]	; (800261c <HAL_TIM_Base_MspInit+0x38>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d10b      	bne.n	800260e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025f6:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <HAL_TIM_Base_MspInit+0x3c>)
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	4a09      	ldr	r2, [pc, #36]	; (8002620 <HAL_TIM_Base_MspInit+0x3c>)
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	6453      	str	r3, [r2, #68]	; 0x44
 8002602:	4b07      	ldr	r3, [pc, #28]	; (8002620 <HAL_TIM_Base_MspInit+0x3c>)
 8002604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800260e:	bf00      	nop
 8002610:	3714      	adds	r7, #20
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	40010000 	.word	0x40010000
 8002620:	40023800 	.word	0x40023800

08002624 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002628:	4b14      	ldr	r3, [pc, #80]	; (800267c <MX_USART2_UART_Init+0x58>)
 800262a:	4a15      	ldr	r2, [pc, #84]	; (8002680 <MX_USART2_UART_Init+0x5c>)
 800262c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800262e:	4b13      	ldr	r3, [pc, #76]	; (800267c <MX_USART2_UART_Init+0x58>)
 8002630:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002634:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002636:	4b11      	ldr	r3, [pc, #68]	; (800267c <MX_USART2_UART_Init+0x58>)
 8002638:	2200      	movs	r2, #0
 800263a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800263c:	4b0f      	ldr	r3, [pc, #60]	; (800267c <MX_USART2_UART_Init+0x58>)
 800263e:	2200      	movs	r2, #0
 8002640:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002642:	4b0e      	ldr	r3, [pc, #56]	; (800267c <MX_USART2_UART_Init+0x58>)
 8002644:	2200      	movs	r2, #0
 8002646:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002648:	4b0c      	ldr	r3, [pc, #48]	; (800267c <MX_USART2_UART_Init+0x58>)
 800264a:	220c      	movs	r2, #12
 800264c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800264e:	4b0b      	ldr	r3, [pc, #44]	; (800267c <MX_USART2_UART_Init+0x58>)
 8002650:	2200      	movs	r2, #0
 8002652:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002654:	4b09      	ldr	r3, [pc, #36]	; (800267c <MX_USART2_UART_Init+0x58>)
 8002656:	2200      	movs	r2, #0
 8002658:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800265a:	4b08      	ldr	r3, [pc, #32]	; (800267c <MX_USART2_UART_Init+0x58>)
 800265c:	2200      	movs	r2, #0
 800265e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002660:	4b06      	ldr	r3, [pc, #24]	; (800267c <MX_USART2_UART_Init+0x58>)
 8002662:	2200      	movs	r2, #0
 8002664:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002666:	4805      	ldr	r0, [pc, #20]	; (800267c <MX_USART2_UART_Init+0x58>)
 8002668:	f003 fabe 	bl	8005be8 <HAL_UART_Init>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002672:	f7ff fd63 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	200003f0 	.word	0x200003f0
 8002680:	40004400 	.word	0x40004400

08002684 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002688:	4b14      	ldr	r3, [pc, #80]	; (80026dc <MX_USART3_UART_Init+0x58>)
 800268a:	4a15      	ldr	r2, [pc, #84]	; (80026e0 <MX_USART3_UART_Init+0x5c>)
 800268c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800268e:	4b13      	ldr	r3, [pc, #76]	; (80026dc <MX_USART3_UART_Init+0x58>)
 8002690:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002694:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002696:	4b11      	ldr	r3, [pc, #68]	; (80026dc <MX_USART3_UART_Init+0x58>)
 8002698:	2200      	movs	r2, #0
 800269a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800269c:	4b0f      	ldr	r3, [pc, #60]	; (80026dc <MX_USART3_UART_Init+0x58>)
 800269e:	2200      	movs	r2, #0
 80026a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80026a2:	4b0e      	ldr	r3, [pc, #56]	; (80026dc <MX_USART3_UART_Init+0x58>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026a8:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <MX_USART3_UART_Init+0x58>)
 80026aa:	220c      	movs	r2, #12
 80026ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ae:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <MX_USART3_UART_Init+0x58>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80026b4:	4b09      	ldr	r3, [pc, #36]	; (80026dc <MX_USART3_UART_Init+0x58>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026ba:	4b08      	ldr	r3, [pc, #32]	; (80026dc <MX_USART3_UART_Init+0x58>)
 80026bc:	2200      	movs	r2, #0
 80026be:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026c0:	4b06      	ldr	r3, [pc, #24]	; (80026dc <MX_USART3_UART_Init+0x58>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80026c6:	4805      	ldr	r0, [pc, #20]	; (80026dc <MX_USART3_UART_Init+0x58>)
 80026c8:	f003 fa8e 	bl	8005be8 <HAL_UART_Init>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80026d2:	f7ff fd33 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20000478 	.word	0x20000478
 80026e0:	40004800 	.word	0x40004800

080026e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b0b0      	sub	sp, #192	; 0xc0
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	60da      	str	r2, [r3, #12]
 80026fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026fc:	f107 031c 	add.w	r3, r7, #28
 8002700:	2290      	movs	r2, #144	; 0x90
 8002702:	2100      	movs	r1, #0
 8002704:	4618      	mov	r0, r3
 8002706:	f003 ff85 	bl	8006614 <memset>
  if(uartHandle->Instance==USART2)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a42      	ldr	r2, [pc, #264]	; (8002818 <HAL_UART_MspInit+0x134>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d13b      	bne.n	800278c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002714:	2380      	movs	r3, #128	; 0x80
 8002716:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002718:	2300      	movs	r3, #0
 800271a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800271c:	f107 031c 	add.w	r3, r7, #28
 8002720:	4618      	mov	r0, r3
 8002722:	f001 ff83 	bl	800462c <HAL_RCCEx_PeriphCLKConfig>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800272c:	f7ff fd06 	bl	800213c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002730:	4b3a      	ldr	r3, [pc, #232]	; (800281c <HAL_UART_MspInit+0x138>)
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	4a39      	ldr	r2, [pc, #228]	; (800281c <HAL_UART_MspInit+0x138>)
 8002736:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800273a:	6413      	str	r3, [r2, #64]	; 0x40
 800273c:	4b37      	ldr	r3, [pc, #220]	; (800281c <HAL_UART_MspInit+0x138>)
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002744:	61bb      	str	r3, [r7, #24]
 8002746:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002748:	4b34      	ldr	r3, [pc, #208]	; (800281c <HAL_UART_MspInit+0x138>)
 800274a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274c:	4a33      	ldr	r2, [pc, #204]	; (800281c <HAL_UART_MspInit+0x138>)
 800274e:	f043 0308 	orr.w	r3, r3, #8
 8002752:	6313      	str	r3, [r2, #48]	; 0x30
 8002754:	4b31      	ldr	r3, [pc, #196]	; (800281c <HAL_UART_MspInit+0x138>)
 8002756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002758:	f003 0308 	and.w	r3, r3, #8
 800275c:	617b      	str	r3, [r7, #20]
 800275e:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002760:	2360      	movs	r3, #96	; 0x60
 8002762:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002766:	2302      	movs	r3, #2
 8002768:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276c:	2300      	movs	r3, #0
 800276e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002772:	2303      	movs	r3, #3
 8002774:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002778:	2307      	movs	r3, #7
 800277a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800277e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002782:	4619      	mov	r1, r3
 8002784:	4826      	ldr	r0, [pc, #152]	; (8002820 <HAL_UART_MspInit+0x13c>)
 8002786:	f001 f875 	bl	8003874 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800278a:	e041      	b.n	8002810 <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART3)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a24      	ldr	r2, [pc, #144]	; (8002824 <HAL_UART_MspInit+0x140>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d13c      	bne.n	8002810 <HAL_UART_MspInit+0x12c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002796:	f44f 7380 	mov.w	r3, #256	; 0x100
 800279a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800279c:	2300      	movs	r3, #0
 800279e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027a0:	f107 031c 	add.w	r3, r7, #28
 80027a4:	4618      	mov	r0, r3
 80027a6:	f001 ff41 	bl	800462c <HAL_RCCEx_PeriphCLKConfig>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80027b0:	f7ff fcc4 	bl	800213c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80027b4:	4b19      	ldr	r3, [pc, #100]	; (800281c <HAL_UART_MspInit+0x138>)
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b8:	4a18      	ldr	r2, [pc, #96]	; (800281c <HAL_UART_MspInit+0x138>)
 80027ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027be:	6413      	str	r3, [r2, #64]	; 0x40
 80027c0:	4b16      	ldr	r3, [pc, #88]	; (800281c <HAL_UART_MspInit+0x138>)
 80027c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027cc:	4b13      	ldr	r3, [pc, #76]	; (800281c <HAL_UART_MspInit+0x138>)
 80027ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d0:	4a12      	ldr	r2, [pc, #72]	; (800281c <HAL_UART_MspInit+0x138>)
 80027d2:	f043 0308 	orr.w	r3, r3, #8
 80027d6:	6313      	str	r3, [r2, #48]	; 0x30
 80027d8:	4b10      	ldr	r3, [pc, #64]	; (800281c <HAL_UART_MspInit+0x138>)
 80027da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027dc:	f003 0308 	and.w	r3, r3, #8
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ec:	2302      	movs	r3, #2
 80027ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f8:	2303      	movs	r3, #3
 80027fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80027fe:	2307      	movs	r3, #7
 8002800:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002804:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002808:	4619      	mov	r1, r3
 800280a:	4805      	ldr	r0, [pc, #20]	; (8002820 <HAL_UART_MspInit+0x13c>)
 800280c:	f001 f832 	bl	8003874 <HAL_GPIO_Init>
}
 8002810:	bf00      	nop
 8002812:	37c0      	adds	r7, #192	; 0xc0
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40004400 	.word	0x40004400
 800281c:	40023800 	.word	0x40023800
 8002820:	40020c00 	.word	0x40020c00
 8002824:	40004800 	.word	0x40004800

08002828 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002828:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002860 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800282c:	480d      	ldr	r0, [pc, #52]	; (8002864 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800282e:	490e      	ldr	r1, [pc, #56]	; (8002868 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002830:	4a0e      	ldr	r2, [pc, #56]	; (800286c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002834:	e002      	b.n	800283c <LoopCopyDataInit>

08002836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800283a:	3304      	adds	r3, #4

0800283c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800283c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800283e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002840:	d3f9      	bcc.n	8002836 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002842:	4a0b      	ldr	r2, [pc, #44]	; (8002870 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002844:	4c0b      	ldr	r4, [pc, #44]	; (8002874 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002848:	e001      	b.n	800284e <LoopFillZerobss>

0800284a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800284a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800284c:	3204      	adds	r2, #4

0800284e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800284e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002850:	d3fb      	bcc.n	800284a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002852:	f7ff fe61 	bl	8002518 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002856:	f003 feb9 	bl	80065cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800285a:	f7ff f8e3 	bl	8001a24 <main>
  bx  lr    
 800285e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002860:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002868:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 800286c:	0800b1e4 	.word	0x0800b1e4
  ldr r2, =_sbss
 8002870:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8002874:	20000514 	.word	0x20000514

08002878 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002878:	e7fe      	b.n	8002878 <ADC_IRQHandler>
	...

0800287c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8002880:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <HAL_Init+0x34>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a0a      	ldr	r2, [pc, #40]	; (80028b0 <HAL_Init+0x34>)
 8002886:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800288a:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800288c:	4b08      	ldr	r3, [pc, #32]	; (80028b0 <HAL_Init+0x34>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a07      	ldr	r2, [pc, #28]	; (80028b0 <HAL_Init+0x34>)
 8002892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002896:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002898:	2003      	movs	r0, #3
 800289a:	f000 fcbf 	bl	800321c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800289e:	2000      	movs	r0, #0
 80028a0:	f000 f808 	bl	80028b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028a4:	f7ff fd1a 	bl	80022dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40023c00 	.word	0x40023c00

080028b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028bc:	4b12      	ldr	r3, [pc, #72]	; (8002908 <HAL_InitTick+0x54>)
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	4b12      	ldr	r3, [pc, #72]	; (800290c <HAL_InitTick+0x58>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	4619      	mov	r1, r3
 80028c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80028ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 fcd7 	bl	8003286 <HAL_SYSTICK_Config>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e00e      	b.n	8002900 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b0f      	cmp	r3, #15
 80028e6:	d80a      	bhi.n	80028fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028e8:	2200      	movs	r2, #0
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	f04f 30ff 	mov.w	r0, #4294967295
 80028f0:	f000 fc9f 	bl	8003232 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028f4:	4a06      	ldr	r2, [pc, #24]	; (8002910 <HAL_InitTick+0x5c>)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
 80028fc:	e000      	b.n	8002900 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
}
 8002900:	4618      	mov	r0, r3
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	20000028 	.word	0x20000028
 800290c:	20000030 	.word	0x20000030
 8002910:	2000002c 	.word	0x2000002c

08002914 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002918:	4b06      	ldr	r3, [pc, #24]	; (8002934 <HAL_IncTick+0x20>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	461a      	mov	r2, r3
 800291e:	4b06      	ldr	r3, [pc, #24]	; (8002938 <HAL_IncTick+0x24>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4413      	add	r3, r2
 8002924:	4a04      	ldr	r2, [pc, #16]	; (8002938 <HAL_IncTick+0x24>)
 8002926:	6013      	str	r3, [r2, #0]
}
 8002928:	bf00      	nop
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	20000030 	.word	0x20000030
 8002938:	20000500 	.word	0x20000500

0800293c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  return uwTick;
 8002940:	4b03      	ldr	r3, [pc, #12]	; (8002950 <HAL_GetTick+0x14>)
 8002942:	681b      	ldr	r3, [r3, #0]
}
 8002944:	4618      	mov	r0, r3
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	20000500 	.word	0x20000500

08002954 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800295c:	f7ff ffee 	bl	800293c <HAL_GetTick>
 8002960:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296c:	d005      	beq.n	800297a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800296e:	4b0a      	ldr	r3, [pc, #40]	; (8002998 <HAL_Delay+0x44>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	461a      	mov	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4413      	add	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800297a:	bf00      	nop
 800297c:	f7ff ffde 	bl	800293c <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	429a      	cmp	r2, r3
 800298a:	d8f7      	bhi.n	800297c <HAL_Delay+0x28>
  {
  }
}
 800298c:	bf00      	nop
 800298e:	bf00      	nop
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	20000030 	.word	0x20000030

0800299c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029a4:	2300      	movs	r3, #0
 80029a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e031      	b.n	8002a16 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d109      	bne.n	80029ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7fe fdce 	bl	800155c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	f003 0310 	and.w	r3, r3, #16
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d116      	bne.n	8002a08 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029de:	4b10      	ldr	r3, [pc, #64]	; (8002a20 <HAL_ADC_Init+0x84>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	f043 0202 	orr.w	r2, r3, #2
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 fa4c 	bl	8002e88 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	f023 0303 	bic.w	r3, r3, #3
 80029fe:	f043 0201 	orr.w	r2, r3, #1
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	641a      	str	r2, [r3, #64]	; 0x40
 8002a06:	e001      	b.n	8002a0c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	ffffeefd 	.word	0xffffeefd

08002a24 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d101      	bne.n	8002a3e <HAL_ADC_Start+0x1a>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e0ad      	b.n	8002b9a <HAL_ADC_Start+0x176>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d018      	beq.n	8002a86 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0201 	orr.w	r2, r2, #1
 8002a62:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002a64:	4b50      	ldr	r3, [pc, #320]	; (8002ba8 <HAL_ADC_Start+0x184>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a50      	ldr	r2, [pc, #320]	; (8002bac <HAL_ADC_Start+0x188>)
 8002a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6e:	0c9a      	lsrs	r2, r3, #18
 8002a70:	4613      	mov	r3, r2
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	4413      	add	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002a78:	e002      	b.n	8002a80 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f9      	bne.n	8002a7a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d175      	bne.n	8002b80 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a98:	4b45      	ldr	r3, [pc, #276]	; (8002bb0 <HAL_ADC_Start+0x18c>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d007      	beq.n	8002ac2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002aba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ace:	d106      	bne.n	8002ade <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad4:	f023 0206 	bic.w	r2, r3, #6
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	645a      	str	r2, [r3, #68]	; 0x44
 8002adc:	e002      	b.n	8002ae4 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002af4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002af6:	4b2f      	ldr	r3, [pc, #188]	; (8002bb4 <HAL_ADC_Start+0x190>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f003 031f 	and.w	r3, r3, #31
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10f      	bne.n	8002b22 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d143      	bne.n	8002b98 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b1e:	609a      	str	r2, [r3, #8]
 8002b20:	e03a      	b.n	8002b98 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a24      	ldr	r2, [pc, #144]	; (8002bb8 <HAL_ADC_Start+0x194>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d10e      	bne.n	8002b4a <HAL_ADC_Start+0x126>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d107      	bne.n	8002b4a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b48:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002b4a:	4b1a      	ldr	r3, [pc, #104]	; (8002bb4 <HAL_ADC_Start+0x190>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f003 0310 	and.w	r3, r3, #16
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d120      	bne.n	8002b98 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a18      	ldr	r2, [pc, #96]	; (8002bbc <HAL_ADC_Start+0x198>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d11b      	bne.n	8002b98 <HAL_ADC_Start+0x174>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d114      	bne.n	8002b98 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b7c:	609a      	str	r2, [r3, #8]
 8002b7e:	e00b      	b.n	8002b98 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	f043 0210 	orr.w	r2, r3, #16
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b90:	f043 0201 	orr.w	r2, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	20000028 	.word	0x20000028
 8002bac:	431bde83 	.word	0x431bde83
 8002bb0:	fffff8fe 	.word	0xfffff8fe
 8002bb4:	40012300 	.word	0x40012300
 8002bb8:	40012000 	.word	0x40012000
 8002bbc:	40012200 	.word	0x40012200

08002bc0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
	...

08002bdc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002be6:	2300      	movs	r3, #0
 8002be8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d101      	bne.n	8002bf8 <HAL_ADC_ConfigChannel+0x1c>
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	e136      	b.n	8002e66 <HAL_ADC_ConfigChannel+0x28a>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2b09      	cmp	r3, #9
 8002c06:	d93a      	bls.n	8002c7e <HAL_ADC_ConfigChannel+0xa2>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c10:	d035      	beq.n	8002c7e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68d9      	ldr	r1, [r3, #12]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	461a      	mov	r2, r3
 8002c20:	4613      	mov	r3, r2
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	4413      	add	r3, r2
 8002c26:	3b1e      	subs	r3, #30
 8002c28:	2207      	movs	r2, #7
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	43da      	mvns	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	400a      	ands	r2, r1
 8002c36:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a8d      	ldr	r2, [pc, #564]	; (8002e74 <HAL_ADC_ConfigChannel+0x298>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d10a      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68d9      	ldr	r1, [r3, #12]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	061a      	lsls	r2, r3, #24
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c56:	e035      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68d9      	ldr	r1, [r3, #12]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	4618      	mov	r0, r3
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	4403      	add	r3, r0
 8002c70:	3b1e      	subs	r3, #30
 8002c72:	409a      	lsls	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c7c:	e022      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6919      	ldr	r1, [r3, #16]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	4413      	add	r3, r2
 8002c92:	2207      	movs	r2, #7
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	43da      	mvns	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	400a      	ands	r2, r1
 8002ca0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6919      	ldr	r1, [r3, #16]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	4403      	add	r3, r0
 8002cba:	409a      	lsls	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2b06      	cmp	r3, #6
 8002cca:	d824      	bhi.n	8002d16 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	3b05      	subs	r3, #5
 8002cde:	221f      	movs	r2, #31
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43da      	mvns	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	400a      	ands	r2, r1
 8002cec:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	4613      	mov	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	3b05      	subs	r3, #5
 8002d08:	fa00 f203 	lsl.w	r2, r0, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	635a      	str	r2, [r3, #52]	; 0x34
 8002d14:	e04c      	b.n	8002db0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2b0c      	cmp	r3, #12
 8002d1c:	d824      	bhi.n	8002d68 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	3b23      	subs	r3, #35	; 0x23
 8002d30:	221f      	movs	r2, #31
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43da      	mvns	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	400a      	ands	r2, r1
 8002d3e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	4613      	mov	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	3b23      	subs	r3, #35	; 0x23
 8002d5a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	631a      	str	r2, [r3, #48]	; 0x30
 8002d66:	e023      	b.n	8002db0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	4613      	mov	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	3b41      	subs	r3, #65	; 0x41
 8002d7a:	221f      	movs	r2, #31
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	43da      	mvns	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	400a      	ands	r2, r1
 8002d88:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	4618      	mov	r0, r3
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	3b41      	subs	r3, #65	; 0x41
 8002da4:	fa00 f203 	lsl.w	r2, r0, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	430a      	orrs	r2, r1
 8002dae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a30      	ldr	r2, [pc, #192]	; (8002e78 <HAL_ADC_ConfigChannel+0x29c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d10a      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x1f4>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002dc2:	d105      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002dc4:	4b2d      	ldr	r3, [pc, #180]	; (8002e7c <HAL_ADC_ConfigChannel+0x2a0>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	4a2c      	ldr	r2, [pc, #176]	; (8002e7c <HAL_ADC_ConfigChannel+0x2a0>)
 8002dca:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002dce:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a28      	ldr	r2, [pc, #160]	; (8002e78 <HAL_ADC_ConfigChannel+0x29c>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d10f      	bne.n	8002dfa <HAL_ADC_ConfigChannel+0x21e>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b12      	cmp	r3, #18
 8002de0:	d10b      	bne.n	8002dfa <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002de2:	4b26      	ldr	r3, [pc, #152]	; (8002e7c <HAL_ADC_ConfigChannel+0x2a0>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	4a25      	ldr	r2, [pc, #148]	; (8002e7c <HAL_ADC_ConfigChannel+0x2a0>)
 8002de8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002dec:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002dee:	4b23      	ldr	r3, [pc, #140]	; (8002e7c <HAL_ADC_ConfigChannel+0x2a0>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	4a22      	ldr	r2, [pc, #136]	; (8002e7c <HAL_ADC_ConfigChannel+0x2a0>)
 8002df4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002df8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a1e      	ldr	r2, [pc, #120]	; (8002e78 <HAL_ADC_ConfigChannel+0x29c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d12b      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x280>
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a1a      	ldr	r2, [pc, #104]	; (8002e74 <HAL_ADC_ConfigChannel+0x298>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d003      	beq.n	8002e16 <HAL_ADC_ConfigChannel+0x23a>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2b11      	cmp	r3, #17
 8002e14:	d122      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002e16:	4b19      	ldr	r3, [pc, #100]	; (8002e7c <HAL_ADC_ConfigChannel+0x2a0>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	4a18      	ldr	r2, [pc, #96]	; (8002e7c <HAL_ADC_ConfigChannel+0x2a0>)
 8002e1c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002e20:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002e22:	4b16      	ldr	r3, [pc, #88]	; (8002e7c <HAL_ADC_ConfigChannel+0x2a0>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	4a15      	ldr	r2, [pc, #84]	; (8002e7c <HAL_ADC_ConfigChannel+0x2a0>)
 8002e28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e2c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a10      	ldr	r2, [pc, #64]	; (8002e74 <HAL_ADC_ConfigChannel+0x298>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d111      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002e38:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <HAL_ADC_ConfigChannel+0x2a4>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a11      	ldr	r2, [pc, #68]	; (8002e84 <HAL_ADC_ConfigChannel+0x2a8>)
 8002e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e42:	0c9a      	lsrs	r2, r3, #18
 8002e44:	4613      	mov	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002e4e:	e002      	b.n	8002e56 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1f9      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	10000012 	.word	0x10000012
 8002e78:	40012000 	.word	0x40012000
 8002e7c:	40012300 	.word	0x40012300
 8002e80:	20000028 	.word	0x20000028
 8002e84:	431bde83 	.word	0x431bde83

08002e88 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002e90:	4b78      	ldr	r3, [pc, #480]	; (8003074 <ADC_Init+0x1ec>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	4a77      	ldr	r2, [pc, #476]	; (8003074 <ADC_Init+0x1ec>)
 8002e96:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002e9a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002e9c:	4b75      	ldr	r3, [pc, #468]	; (8003074 <ADC_Init+0x1ec>)
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	4973      	ldr	r1, [pc, #460]	; (8003074 <ADC_Init+0x1ec>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002eb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6859      	ldr	r1, [r3, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	021a      	lsls	r2, r3, #8
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002edc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6859      	ldr	r1, [r3, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689a      	ldr	r2, [r3, #8]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002efe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6899      	ldr	r1, [r3, #8]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68da      	ldr	r2, [r3, #12]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f16:	4a58      	ldr	r2, [pc, #352]	; (8003078 <ADC_Init+0x1f0>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d022      	beq.n	8002f62 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f2a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6899      	ldr	r1, [r3, #8]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6899      	ldr	r1, [r3, #8]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	609a      	str	r2, [r3, #8]
 8002f60:	e00f      	b.n	8002f82 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f80:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 0202 	bic.w	r2, r2, #2
 8002f90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6899      	ldr	r1, [r3, #8]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	005a      	lsls	r2, r3, #1
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d01b      	beq.n	8002fe8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fbe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002fce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6859      	ldr	r1, [r3, #4]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	035a      	lsls	r2, r3, #13
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	605a      	str	r2, [r3, #4]
 8002fe6:	e007      	b.n	8002ff8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ff6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003006:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	3b01      	subs	r3, #1
 8003014:	051a      	lsls	r2, r3, #20
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	430a      	orrs	r2, r1
 800301c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800302c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6899      	ldr	r1, [r3, #8]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800303a:	025a      	lsls	r2, r3, #9
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003052:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6899      	ldr	r1, [r3, #8]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	029a      	lsls	r2, r3, #10
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	609a      	str	r2, [r3, #8]
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	40012300 	.word	0x40012300
 8003078:	0f000001 	.word	0x0f000001

0800307c <__NVIC_SetPriorityGrouping>:
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800308c:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <__NVIC_SetPriorityGrouping+0x40>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003098:	4013      	ands	r3, r2
 800309a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80030a4:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <__NVIC_SetPriorityGrouping+0x44>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030aa:	4a04      	ldr	r2, [pc, #16]	; (80030bc <__NVIC_SetPriorityGrouping+0x40>)
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	60d3      	str	r3, [r2, #12]
}
 80030b0:	bf00      	nop
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	e000ed00 	.word	0xe000ed00
 80030c0:	05fa0000 	.word	0x05fa0000

080030c4 <__NVIC_GetPriorityGrouping>:
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030c8:	4b04      	ldr	r3, [pc, #16]	; (80030dc <__NVIC_GetPriorityGrouping+0x18>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	0a1b      	lsrs	r3, r3, #8
 80030ce:	f003 0307 	and.w	r3, r3, #7
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	e000ed00 	.word	0xe000ed00

080030e0 <__NVIC_EnableIRQ>:
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4603      	mov	r3, r0
 80030e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	db0b      	blt.n	800310a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	f003 021f 	and.w	r2, r3, #31
 80030f8:	4907      	ldr	r1, [pc, #28]	; (8003118 <__NVIC_EnableIRQ+0x38>)
 80030fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fe:	095b      	lsrs	r3, r3, #5
 8003100:	2001      	movs	r0, #1
 8003102:	fa00 f202 	lsl.w	r2, r0, r2
 8003106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	e000e100 	.word	0xe000e100

0800311c <__NVIC_SetPriority>:
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	4603      	mov	r3, r0
 8003124:	6039      	str	r1, [r7, #0]
 8003126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312c:	2b00      	cmp	r3, #0
 800312e:	db0a      	blt.n	8003146 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	b2da      	uxtb	r2, r3
 8003134:	490c      	ldr	r1, [pc, #48]	; (8003168 <__NVIC_SetPriority+0x4c>)
 8003136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313a:	0112      	lsls	r2, r2, #4
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	440b      	add	r3, r1
 8003140:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003144:	e00a      	b.n	800315c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	b2da      	uxtb	r2, r3
 800314a:	4908      	ldr	r1, [pc, #32]	; (800316c <__NVIC_SetPriority+0x50>)
 800314c:	79fb      	ldrb	r3, [r7, #7]
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	3b04      	subs	r3, #4
 8003154:	0112      	lsls	r2, r2, #4
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	440b      	add	r3, r1
 800315a:	761a      	strb	r2, [r3, #24]
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	e000e100 	.word	0xe000e100
 800316c:	e000ed00 	.word	0xe000ed00

08003170 <NVIC_EncodePriority>:
{
 8003170:	b480      	push	{r7}
 8003172:	b089      	sub	sp, #36	; 0x24
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	f1c3 0307 	rsb	r3, r3, #7
 800318a:	2b04      	cmp	r3, #4
 800318c:	bf28      	it	cs
 800318e:	2304      	movcs	r3, #4
 8003190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	3304      	adds	r3, #4
 8003196:	2b06      	cmp	r3, #6
 8003198:	d902      	bls.n	80031a0 <NVIC_EncodePriority+0x30>
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	3b03      	subs	r3, #3
 800319e:	e000      	b.n	80031a2 <NVIC_EncodePriority+0x32>
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a4:	f04f 32ff 	mov.w	r2, #4294967295
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	43da      	mvns	r2, r3
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	401a      	ands	r2, r3
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031b8:	f04f 31ff 	mov.w	r1, #4294967295
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	fa01 f303 	lsl.w	r3, r1, r3
 80031c2:	43d9      	mvns	r1, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c8:	4313      	orrs	r3, r2
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3724      	adds	r7, #36	; 0x24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
	...

080031d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031e8:	d301      	bcc.n	80031ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031ea:	2301      	movs	r3, #1
 80031ec:	e00f      	b.n	800320e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031ee:	4a0a      	ldr	r2, [pc, #40]	; (8003218 <SysTick_Config+0x40>)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3b01      	subs	r3, #1
 80031f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031f6:	210f      	movs	r1, #15
 80031f8:	f04f 30ff 	mov.w	r0, #4294967295
 80031fc:	f7ff ff8e 	bl	800311c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003200:	4b05      	ldr	r3, [pc, #20]	; (8003218 <SysTick_Config+0x40>)
 8003202:	2200      	movs	r2, #0
 8003204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003206:	4b04      	ldr	r3, [pc, #16]	; (8003218 <SysTick_Config+0x40>)
 8003208:	2207      	movs	r2, #7
 800320a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	e000e010 	.word	0xe000e010

0800321c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7ff ff29 	bl	800307c <__NVIC_SetPriorityGrouping>
}
 800322a:	bf00      	nop
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003232:	b580      	push	{r7, lr}
 8003234:	b086      	sub	sp, #24
 8003236:	af00      	add	r7, sp, #0
 8003238:	4603      	mov	r3, r0
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	607a      	str	r2, [r7, #4]
 800323e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003240:	2300      	movs	r3, #0
 8003242:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003244:	f7ff ff3e 	bl	80030c4 <__NVIC_GetPriorityGrouping>
 8003248:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	68b9      	ldr	r1, [r7, #8]
 800324e:	6978      	ldr	r0, [r7, #20]
 8003250:	f7ff ff8e 	bl	8003170 <NVIC_EncodePriority>
 8003254:	4602      	mov	r2, r0
 8003256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800325a:	4611      	mov	r1, r2
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff ff5d 	bl	800311c <__NVIC_SetPriority>
}
 8003262:	bf00      	nop
 8003264:	3718      	adds	r7, #24
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b082      	sub	sp, #8
 800326e:	af00      	add	r7, sp, #0
 8003270:	4603      	mov	r3, r0
 8003272:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff ff31 	bl	80030e0 <__NVIC_EnableIRQ>
}
 800327e:	bf00      	nop
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b082      	sub	sp, #8
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7ff ffa2 	bl	80031d8 <SysTick_Config>
 8003294:	4603      	mov	r3, r0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
	...

080032a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032a8:	2300      	movs	r3, #0
 80032aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032ac:	f7ff fb46 	bl	800293c <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e099      	b.n	80033f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0201 	bic.w	r2, r2, #1
 80032da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032dc:	e00f      	b.n	80032fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032de:	f7ff fb2d 	bl	800293c <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b05      	cmp	r3, #5
 80032ea:	d908      	bls.n	80032fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2220      	movs	r2, #32
 80032f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2203      	movs	r2, #3
 80032f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e078      	b.n	80033f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1e8      	bne.n	80032de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	4b38      	ldr	r3, [pc, #224]	; (80033f8 <HAL_DMA_Init+0x158>)
 8003318:	4013      	ands	r3, r2
 800331a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800332a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003336:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003342:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	4313      	orrs	r3, r2
 800334e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	2b04      	cmp	r3, #4
 8003356:	d107      	bne.n	8003368 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003360:	4313      	orrs	r3, r2
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	4313      	orrs	r3, r2
 8003366:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f023 0307 	bic.w	r3, r3, #7
 800337e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	4313      	orrs	r3, r2
 8003388:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	2b04      	cmp	r3, #4
 8003390:	d117      	bne.n	80033c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	4313      	orrs	r3, r2
 800339a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00e      	beq.n	80033c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 f9e9 	bl	800377c <DMA_CheckFifoParam>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d008      	beq.n	80033c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2240      	movs	r2, #64	; 0x40
 80033b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80033be:	2301      	movs	r3, #1
 80033c0:	e016      	b.n	80033f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f9a0 	bl	8003710 <DMA_CalcBaseAndBitshift>
 80033d0:	4603      	mov	r3, r0
 80033d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d8:	223f      	movs	r2, #63	; 0x3f
 80033da:	409a      	lsls	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3718      	adds	r7, #24
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	e010803f 	.word	0xe010803f

080033fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003404:	2300      	movs	r3, #0
 8003406:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003408:	4b8e      	ldr	r3, [pc, #568]	; (8003644 <HAL_DMA_IRQHandler+0x248>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a8e      	ldr	r2, [pc, #568]	; (8003648 <HAL_DMA_IRQHandler+0x24c>)
 800340e:	fba2 2303 	umull	r2, r3, r2, r3
 8003412:	0a9b      	lsrs	r3, r3, #10
 8003414:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003426:	2208      	movs	r2, #8
 8003428:	409a      	lsls	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	4013      	ands	r3, r2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d01a      	beq.n	8003468 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0304 	and.w	r3, r3, #4
 800343c:	2b00      	cmp	r3, #0
 800343e:	d013      	beq.n	8003468 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0204 	bic.w	r2, r2, #4
 800344e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003454:	2208      	movs	r2, #8
 8003456:	409a      	lsls	r2, r3
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003460:	f043 0201 	orr.w	r2, r3, #1
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346c:	2201      	movs	r2, #1
 800346e:	409a      	lsls	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	4013      	ands	r3, r2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d012      	beq.n	800349e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00b      	beq.n	800349e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348a:	2201      	movs	r2, #1
 800348c:	409a      	lsls	r2, r3
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003496:	f043 0202 	orr.w	r2, r3, #2
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a2:	2204      	movs	r2, #4
 80034a4:	409a      	lsls	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	4013      	ands	r3, r2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d012      	beq.n	80034d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00b      	beq.n	80034d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c0:	2204      	movs	r2, #4
 80034c2:	409a      	lsls	r2, r3
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034cc:	f043 0204 	orr.w	r2, r3, #4
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d8:	2210      	movs	r2, #16
 80034da:	409a      	lsls	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4013      	ands	r3, r2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d043      	beq.n	800356c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d03c      	beq.n	800356c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f6:	2210      	movs	r2, #16
 80034f8:	409a      	lsls	r2, r3
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d018      	beq.n	800353e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d108      	bne.n	800352c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	2b00      	cmp	r3, #0
 8003520:	d024      	beq.n	800356c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	4798      	blx	r3
 800352a:	e01f      	b.n	800356c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003530:	2b00      	cmp	r3, #0
 8003532:	d01b      	beq.n	800356c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	4798      	blx	r3
 800353c:	e016      	b.n	800356c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003548:	2b00      	cmp	r3, #0
 800354a:	d107      	bne.n	800355c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 0208 	bic.w	r2, r2, #8
 800355a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	2b00      	cmp	r3, #0
 8003562:	d003      	beq.n	800356c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003570:	2220      	movs	r2, #32
 8003572:	409a      	lsls	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4013      	ands	r3, r2
 8003578:	2b00      	cmp	r3, #0
 800357a:	f000 808f 	beq.w	800369c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 8087 	beq.w	800369c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003592:	2220      	movs	r2, #32
 8003594:	409a      	lsls	r2, r3
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b05      	cmp	r3, #5
 80035a4:	d136      	bne.n	8003614 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0216 	bic.w	r2, r2, #22
 80035b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	695a      	ldr	r2, [r3, #20]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d103      	bne.n	80035d6 <HAL_DMA_IRQHandler+0x1da>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d007      	beq.n	80035e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0208 	bic.w	r2, r2, #8
 80035e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ea:	223f      	movs	r2, #63	; 0x3f
 80035ec:	409a      	lsls	r2, r3
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003606:	2b00      	cmp	r3, #0
 8003608:	d07e      	beq.n	8003708 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	4798      	blx	r3
        }
        return;
 8003612:	e079      	b.n	8003708 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d01d      	beq.n	800365e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10d      	bne.n	800364c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003634:	2b00      	cmp	r3, #0
 8003636:	d031      	beq.n	800369c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	4798      	blx	r3
 8003640:	e02c      	b.n	800369c <HAL_DMA_IRQHandler+0x2a0>
 8003642:	bf00      	nop
 8003644:	20000028 	.word	0x20000028
 8003648:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003650:	2b00      	cmp	r3, #0
 8003652:	d023      	beq.n	800369c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	4798      	blx	r3
 800365c:	e01e      	b.n	800369c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10f      	bne.n	800368c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0210 	bic.w	r2, r2, #16
 800367a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d032      	beq.n	800370a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d022      	beq.n	80036f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2205      	movs	r2, #5
 80036b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0201 	bic.w	r2, r2, #1
 80036c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	3301      	adds	r3, #1
 80036cc:	60bb      	str	r3, [r7, #8]
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d307      	bcc.n	80036e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1f2      	bne.n	80036c8 <HAL_DMA_IRQHandler+0x2cc>
 80036e2:	e000      	b.n	80036e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80036e4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d005      	beq.n	800370a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	4798      	blx	r3
 8003706:	e000      	b.n	800370a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003708:	bf00      	nop
    }
  }
}
 800370a:	3718      	adds	r7, #24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	b2db      	uxtb	r3, r3
 800371e:	3b10      	subs	r3, #16
 8003720:	4a13      	ldr	r2, [pc, #76]	; (8003770 <DMA_CalcBaseAndBitshift+0x60>)
 8003722:	fba2 2303 	umull	r2, r3, r2, r3
 8003726:	091b      	lsrs	r3, r3, #4
 8003728:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800372a:	4a12      	ldr	r2, [pc, #72]	; (8003774 <DMA_CalcBaseAndBitshift+0x64>)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4413      	add	r3, r2
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	461a      	mov	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2b03      	cmp	r3, #3
 800373c:	d908      	bls.n	8003750 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	461a      	mov	r2, r3
 8003744:	4b0c      	ldr	r3, [pc, #48]	; (8003778 <DMA_CalcBaseAndBitshift+0x68>)
 8003746:	4013      	ands	r3, r2
 8003748:	1d1a      	adds	r2, r3, #4
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	659a      	str	r2, [r3, #88]	; 0x58
 800374e:	e006      	b.n	800375e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	461a      	mov	r2, r3
 8003756:	4b08      	ldr	r3, [pc, #32]	; (8003778 <DMA_CalcBaseAndBitshift+0x68>)
 8003758:	4013      	ands	r3, r2
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003762:	4618      	mov	r0, r3
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	aaaaaaab 	.word	0xaaaaaaab
 8003774:	0800ad28 	.word	0x0800ad28
 8003778:	fffffc00 	.word	0xfffffc00

0800377c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003784:	2300      	movs	r3, #0
 8003786:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d11f      	bne.n	80037d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2b03      	cmp	r3, #3
 800379a:	d856      	bhi.n	800384a <DMA_CheckFifoParam+0xce>
 800379c:	a201      	add	r2, pc, #4	; (adr r2, 80037a4 <DMA_CheckFifoParam+0x28>)
 800379e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a2:	bf00      	nop
 80037a4:	080037b5 	.word	0x080037b5
 80037a8:	080037c7 	.word	0x080037c7
 80037ac:	080037b5 	.word	0x080037b5
 80037b0:	0800384b 	.word	0x0800384b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d046      	beq.n	800384e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037c4:	e043      	b.n	800384e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037ce:	d140      	bne.n	8003852 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037d4:	e03d      	b.n	8003852 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037de:	d121      	bne.n	8003824 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	2b03      	cmp	r3, #3
 80037e4:	d837      	bhi.n	8003856 <DMA_CheckFifoParam+0xda>
 80037e6:	a201      	add	r2, pc, #4	; (adr r2, 80037ec <DMA_CheckFifoParam+0x70>)
 80037e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ec:	080037fd 	.word	0x080037fd
 80037f0:	08003803 	.word	0x08003803
 80037f4:	080037fd 	.word	0x080037fd
 80037f8:	08003815 	.word	0x08003815
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003800:	e030      	b.n	8003864 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003806:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d025      	beq.n	800385a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003812:	e022      	b.n	800385a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003818:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800381c:	d11f      	bne.n	800385e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003822:	e01c      	b.n	800385e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2b02      	cmp	r3, #2
 8003828:	d903      	bls.n	8003832 <DMA_CheckFifoParam+0xb6>
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2b03      	cmp	r3, #3
 800382e:	d003      	beq.n	8003838 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003830:	e018      	b.n	8003864 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	73fb      	strb	r3, [r7, #15]
      break;
 8003836:	e015      	b.n	8003864 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00e      	beq.n	8003862 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	73fb      	strb	r3, [r7, #15]
      break;
 8003848:	e00b      	b.n	8003862 <DMA_CheckFifoParam+0xe6>
      break;
 800384a:	bf00      	nop
 800384c:	e00a      	b.n	8003864 <DMA_CheckFifoParam+0xe8>
      break;
 800384e:	bf00      	nop
 8003850:	e008      	b.n	8003864 <DMA_CheckFifoParam+0xe8>
      break;
 8003852:	bf00      	nop
 8003854:	e006      	b.n	8003864 <DMA_CheckFifoParam+0xe8>
      break;
 8003856:	bf00      	nop
 8003858:	e004      	b.n	8003864 <DMA_CheckFifoParam+0xe8>
      break;
 800385a:	bf00      	nop
 800385c:	e002      	b.n	8003864 <DMA_CheckFifoParam+0xe8>
      break;   
 800385e:	bf00      	nop
 8003860:	e000      	b.n	8003864 <DMA_CheckFifoParam+0xe8>
      break;
 8003862:	bf00      	nop
    }
  } 
  
  return status; 
 8003864:	7bfb      	ldrb	r3, [r7, #15]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3714      	adds	r7, #20
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop

08003874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003874:	b480      	push	{r7}
 8003876:	b089      	sub	sp, #36	; 0x24
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800387e:	2300      	movs	r3, #0
 8003880:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003882:	2300      	movs	r3, #0
 8003884:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003886:	2300      	movs	r3, #0
 8003888:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800388a:	2300      	movs	r3, #0
 800388c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800388e:	2300      	movs	r3, #0
 8003890:	61fb      	str	r3, [r7, #28]
 8003892:	e175      	b.n	8003b80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003894:	2201      	movs	r2, #1
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	4013      	ands	r3, r2
 80038a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	f040 8164 	bne.w	8003b7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d005      	beq.n	80038ca <HAL_GPIO_Init+0x56>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f003 0303 	and.w	r3, r3, #3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d130      	bne.n	800392c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	2203      	movs	r2, #3
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	43db      	mvns	r3, r3
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	4013      	ands	r3, r2
 80038e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	68da      	ldr	r2, [r3, #12]
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003900:	2201      	movs	r2, #1
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	43db      	mvns	r3, r3
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	4013      	ands	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	091b      	lsrs	r3, r3, #4
 8003916:	f003 0201 	and.w	r2, r3, #1
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	4313      	orrs	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f003 0303 	and.w	r3, r3, #3
 8003934:	2b03      	cmp	r3, #3
 8003936:	d017      	beq.n	8003968 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	2203      	movs	r2, #3
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	43db      	mvns	r3, r3
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	4013      	ands	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	689a      	ldr	r2, [r3, #8]
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	4313      	orrs	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f003 0303 	and.w	r3, r3, #3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d123      	bne.n	80039bc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	08da      	lsrs	r2, r3, #3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3208      	adds	r2, #8
 800397c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003980:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	220f      	movs	r2, #15
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	43db      	mvns	r3, r3
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	4013      	ands	r3, r2
 8003996:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	691a      	ldr	r2, [r3, #16]
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	08da      	lsrs	r2, r3, #3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3208      	adds	r2, #8
 80039b6:	69b9      	ldr	r1, [r7, #24]
 80039b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	2203      	movs	r2, #3
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	43db      	mvns	r3, r3
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	4013      	ands	r3, r2
 80039d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f003 0203 	and.w	r2, r3, #3
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 80be 	beq.w	8003b7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039fe:	4b66      	ldr	r3, [pc, #408]	; (8003b98 <HAL_GPIO_Init+0x324>)
 8003a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a02:	4a65      	ldr	r2, [pc, #404]	; (8003b98 <HAL_GPIO_Init+0x324>)
 8003a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a08:	6453      	str	r3, [r2, #68]	; 0x44
 8003a0a:	4b63      	ldr	r3, [pc, #396]	; (8003b98 <HAL_GPIO_Init+0x324>)
 8003a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003a16:	4a61      	ldr	r2, [pc, #388]	; (8003b9c <HAL_GPIO_Init+0x328>)
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	089b      	lsrs	r3, r3, #2
 8003a1c:	3302      	adds	r3, #2
 8003a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	220f      	movs	r2, #15
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	43db      	mvns	r3, r3
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4013      	ands	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a58      	ldr	r2, [pc, #352]	; (8003ba0 <HAL_GPIO_Init+0x32c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d037      	beq.n	8003ab2 <HAL_GPIO_Init+0x23e>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a57      	ldr	r2, [pc, #348]	; (8003ba4 <HAL_GPIO_Init+0x330>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d031      	beq.n	8003aae <HAL_GPIO_Init+0x23a>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a56      	ldr	r2, [pc, #344]	; (8003ba8 <HAL_GPIO_Init+0x334>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d02b      	beq.n	8003aaa <HAL_GPIO_Init+0x236>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a55      	ldr	r2, [pc, #340]	; (8003bac <HAL_GPIO_Init+0x338>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d025      	beq.n	8003aa6 <HAL_GPIO_Init+0x232>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a54      	ldr	r2, [pc, #336]	; (8003bb0 <HAL_GPIO_Init+0x33c>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d01f      	beq.n	8003aa2 <HAL_GPIO_Init+0x22e>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a53      	ldr	r2, [pc, #332]	; (8003bb4 <HAL_GPIO_Init+0x340>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d019      	beq.n	8003a9e <HAL_GPIO_Init+0x22a>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a52      	ldr	r2, [pc, #328]	; (8003bb8 <HAL_GPIO_Init+0x344>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d013      	beq.n	8003a9a <HAL_GPIO_Init+0x226>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a51      	ldr	r2, [pc, #324]	; (8003bbc <HAL_GPIO_Init+0x348>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d00d      	beq.n	8003a96 <HAL_GPIO_Init+0x222>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a50      	ldr	r2, [pc, #320]	; (8003bc0 <HAL_GPIO_Init+0x34c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d007      	beq.n	8003a92 <HAL_GPIO_Init+0x21e>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a4f      	ldr	r2, [pc, #316]	; (8003bc4 <HAL_GPIO_Init+0x350>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d101      	bne.n	8003a8e <HAL_GPIO_Init+0x21a>
 8003a8a:	2309      	movs	r3, #9
 8003a8c:	e012      	b.n	8003ab4 <HAL_GPIO_Init+0x240>
 8003a8e:	230a      	movs	r3, #10
 8003a90:	e010      	b.n	8003ab4 <HAL_GPIO_Init+0x240>
 8003a92:	2308      	movs	r3, #8
 8003a94:	e00e      	b.n	8003ab4 <HAL_GPIO_Init+0x240>
 8003a96:	2307      	movs	r3, #7
 8003a98:	e00c      	b.n	8003ab4 <HAL_GPIO_Init+0x240>
 8003a9a:	2306      	movs	r3, #6
 8003a9c:	e00a      	b.n	8003ab4 <HAL_GPIO_Init+0x240>
 8003a9e:	2305      	movs	r3, #5
 8003aa0:	e008      	b.n	8003ab4 <HAL_GPIO_Init+0x240>
 8003aa2:	2304      	movs	r3, #4
 8003aa4:	e006      	b.n	8003ab4 <HAL_GPIO_Init+0x240>
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e004      	b.n	8003ab4 <HAL_GPIO_Init+0x240>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e002      	b.n	8003ab4 <HAL_GPIO_Init+0x240>
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e000      	b.n	8003ab4 <HAL_GPIO_Init+0x240>
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	69fa      	ldr	r2, [r7, #28]
 8003ab6:	f002 0203 	and.w	r2, r2, #3
 8003aba:	0092      	lsls	r2, r2, #2
 8003abc:	4093      	lsls	r3, r2
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003ac4:	4935      	ldr	r1, [pc, #212]	; (8003b9c <HAL_GPIO_Init+0x328>)
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	089b      	lsrs	r3, r3, #2
 8003aca:	3302      	adds	r3, #2
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ad2:	4b3d      	ldr	r3, [pc, #244]	; (8003bc8 <HAL_GPIO_Init+0x354>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	43db      	mvns	r3, r3
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003af6:	4a34      	ldr	r2, [pc, #208]	; (8003bc8 <HAL_GPIO_Init+0x354>)
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003afc:	4b32      	ldr	r3, [pc, #200]	; (8003bc8 <HAL_GPIO_Init+0x354>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	43db      	mvns	r3, r3
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b20:	4a29      	ldr	r2, [pc, #164]	; (8003bc8 <HAL_GPIO_Init+0x354>)
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b26:	4b28      	ldr	r3, [pc, #160]	; (8003bc8 <HAL_GPIO_Init+0x354>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	43db      	mvns	r3, r3
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	4013      	ands	r3, r2
 8003b34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b4a:	4a1f      	ldr	r2, [pc, #124]	; (8003bc8 <HAL_GPIO_Init+0x354>)
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b50:	4b1d      	ldr	r3, [pc, #116]	; (8003bc8 <HAL_GPIO_Init+0x354>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d003      	beq.n	8003b74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b74:	4a14      	ldr	r2, [pc, #80]	; (8003bc8 <HAL_GPIO_Init+0x354>)
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	61fb      	str	r3, [r7, #28]
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	2b0f      	cmp	r3, #15
 8003b84:	f67f ae86 	bls.w	8003894 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003b88:	bf00      	nop
 8003b8a:	bf00      	nop
 8003b8c:	3724      	adds	r7, #36	; 0x24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	40013800 	.word	0x40013800
 8003ba0:	40020000 	.word	0x40020000
 8003ba4:	40020400 	.word	0x40020400
 8003ba8:	40020800 	.word	0x40020800
 8003bac:	40020c00 	.word	0x40020c00
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	40021400 	.word	0x40021400
 8003bb8:	40021800 	.word	0x40021800
 8003bbc:	40021c00 	.word	0x40021c00
 8003bc0:	40022000 	.word	0x40022000
 8003bc4:	40022400 	.word	0x40022400
 8003bc8:	40013c00 	.word	0x40013c00

08003bcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691a      	ldr	r2, [r3, #16]
 8003bdc:	887b      	ldrh	r3, [r7, #2]
 8003bde:	4013      	ands	r3, r2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d002      	beq.n	8003bea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003be4:	2301      	movs	r3, #1
 8003be6:	73fb      	strb	r3, [r7, #15]
 8003be8:	e001      	b.n	8003bee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bea:	2300      	movs	r3, #0
 8003bec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	460b      	mov	r3, r1
 8003c06:	807b      	strh	r3, [r7, #2]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c0c:	787b      	ldrb	r3, [r7, #1]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c12:	887a      	ldrh	r2, [r7, #2]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003c18:	e003      	b.n	8003c22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003c1a:	887b      	ldrh	r3, [r7, #2]
 8003c1c:	041a      	lsls	r2, r3, #16
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	619a      	str	r2, [r3, #24]
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b085      	sub	sp, #20
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
 8003c36:	460b      	mov	r3, r1
 8003c38:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c40:	887a      	ldrh	r2, [r7, #2]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	4013      	ands	r3, r2
 8003c46:	041a      	lsls	r2, r3, #16
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	43d9      	mvns	r1, r3
 8003c4c:	887b      	ldrh	r3, [r7, #2]
 8003c4e:	400b      	ands	r3, r1
 8003c50:	431a      	orrs	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	619a      	str	r2, [r3, #24]
}
 8003c56:	bf00      	nop
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
	...

08003c64 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003c6e:	4b23      	ldr	r3, [pc, #140]	; (8003cfc <HAL_PWREx_EnableOverDrive+0x98>)
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	4a22      	ldr	r2, [pc, #136]	; (8003cfc <HAL_PWREx_EnableOverDrive+0x98>)
 8003c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c78:	6413      	str	r3, [r2, #64]	; 0x40
 8003c7a:	4b20      	ldr	r3, [pc, #128]	; (8003cfc <HAL_PWREx_EnableOverDrive+0x98>)
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c82:	603b      	str	r3, [r7, #0]
 8003c84:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003c86:	4b1e      	ldr	r3, [pc, #120]	; (8003d00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a1d      	ldr	r2, [pc, #116]	; (8003d00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c90:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c92:	f7fe fe53 	bl	800293c <HAL_GetTick>
 8003c96:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c98:	e009      	b.n	8003cae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c9a:	f7fe fe4f 	bl	800293c <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ca8:	d901      	bls.n	8003cae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e022      	b.n	8003cf4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003cae:	4b14      	ldr	r3, [pc, #80]	; (8003d00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cba:	d1ee      	bne.n	8003c9a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003cbc:	4b10      	ldr	r3, [pc, #64]	; (8003d00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a0f      	ldr	r2, [pc, #60]	; (8003d00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cc6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cc8:	f7fe fe38 	bl	800293c <HAL_GetTick>
 8003ccc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003cce:	e009      	b.n	8003ce4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003cd0:	f7fe fe34 	bl	800293c <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cde:	d901      	bls.n	8003ce4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e007      	b.n	8003cf4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ce4:	4b06      	ldr	r3, [pc, #24]	; (8003d00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cf0:	d1ee      	bne.n	8003cd0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3708      	adds	r7, #8
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	40023800 	.word	0x40023800
 8003d00:	40007000 	.word	0x40007000

08003d04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e29b      	b.n	8004252 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 8087 	beq.w	8003e36 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d28:	4b96      	ldr	r3, [pc, #600]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f003 030c 	and.w	r3, r3, #12
 8003d30:	2b04      	cmp	r3, #4
 8003d32:	d00c      	beq.n	8003d4e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d34:	4b93      	ldr	r3, [pc, #588]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f003 030c 	and.w	r3, r3, #12
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d112      	bne.n	8003d66 <HAL_RCC_OscConfig+0x62>
 8003d40:	4b90      	ldr	r3, [pc, #576]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d4c:	d10b      	bne.n	8003d66 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d4e:	4b8d      	ldr	r3, [pc, #564]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d06c      	beq.n	8003e34 <HAL_RCC_OscConfig+0x130>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d168      	bne.n	8003e34 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e275      	b.n	8004252 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d6e:	d106      	bne.n	8003d7e <HAL_RCC_OscConfig+0x7a>
 8003d70:	4b84      	ldr	r3, [pc, #528]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a83      	ldr	r2, [pc, #524]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003d76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d7a:	6013      	str	r3, [r2, #0]
 8003d7c:	e02e      	b.n	8003ddc <HAL_RCC_OscConfig+0xd8>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10c      	bne.n	8003da0 <HAL_RCC_OscConfig+0x9c>
 8003d86:	4b7f      	ldr	r3, [pc, #508]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a7e      	ldr	r2, [pc, #504]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	4b7c      	ldr	r3, [pc, #496]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a7b      	ldr	r2, [pc, #492]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003d98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	e01d      	b.n	8003ddc <HAL_RCC_OscConfig+0xd8>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003da8:	d10c      	bne.n	8003dc4 <HAL_RCC_OscConfig+0xc0>
 8003daa:	4b76      	ldr	r3, [pc, #472]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a75      	ldr	r2, [pc, #468]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003db4:	6013      	str	r3, [r2, #0]
 8003db6:	4b73      	ldr	r3, [pc, #460]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a72      	ldr	r2, [pc, #456]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	e00b      	b.n	8003ddc <HAL_RCC_OscConfig+0xd8>
 8003dc4:	4b6f      	ldr	r3, [pc, #444]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a6e      	ldr	r2, [pc, #440]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dce:	6013      	str	r3, [r2, #0]
 8003dd0:	4b6c      	ldr	r3, [pc, #432]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a6b      	ldr	r2, [pc, #428]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003dd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d013      	beq.n	8003e0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de4:	f7fe fdaa 	bl	800293c <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dec:	f7fe fda6 	bl	800293c <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b64      	cmp	r3, #100	; 0x64
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e229      	b.n	8004252 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dfe:	4b61      	ldr	r3, [pc, #388]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d0f0      	beq.n	8003dec <HAL_RCC_OscConfig+0xe8>
 8003e0a:	e014      	b.n	8003e36 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0c:	f7fe fd96 	bl	800293c <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e14:	f7fe fd92 	bl	800293c <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b64      	cmp	r3, #100	; 0x64
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e215      	b.n	8004252 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e26:	4b57      	ldr	r3, [pc, #348]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f0      	bne.n	8003e14 <HAL_RCC_OscConfig+0x110>
 8003e32:	e000      	b.n	8003e36 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d069      	beq.n	8003f16 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e42:	4b50      	ldr	r3, [pc, #320]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 030c 	and.w	r3, r3, #12
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00b      	beq.n	8003e66 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e4e:	4b4d      	ldr	r3, [pc, #308]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 030c 	and.w	r3, r3, #12
 8003e56:	2b08      	cmp	r3, #8
 8003e58:	d11c      	bne.n	8003e94 <HAL_RCC_OscConfig+0x190>
 8003e5a:	4b4a      	ldr	r3, [pc, #296]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d116      	bne.n	8003e94 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e66:	4b47      	ldr	r3, [pc, #284]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d005      	beq.n	8003e7e <HAL_RCC_OscConfig+0x17a>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d001      	beq.n	8003e7e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e1e9      	b.n	8004252 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e7e:	4b41      	ldr	r3, [pc, #260]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	493d      	ldr	r1, [pc, #244]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e92:	e040      	b.n	8003f16 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d023      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e9c:	4b39      	ldr	r3, [pc, #228]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a38      	ldr	r2, [pc, #224]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003ea2:	f043 0301 	orr.w	r3, r3, #1
 8003ea6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea8:	f7fe fd48 	bl	800293c <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eb0:	f7fe fd44 	bl	800293c <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e1c7      	b.n	8004252 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec2:	4b30      	ldr	r3, [pc, #192]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0f0      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ece:	4b2d      	ldr	r3, [pc, #180]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	4929      	ldr	r1, [pc, #164]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	600b      	str	r3, [r1, #0]
 8003ee2:	e018      	b.n	8003f16 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ee4:	4b27      	ldr	r3, [pc, #156]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a26      	ldr	r2, [pc, #152]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003eea:	f023 0301 	bic.w	r3, r3, #1
 8003eee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef0:	f7fe fd24 	bl	800293c <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ef8:	f7fe fd20 	bl	800293c <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e1a3      	b.n	8004252 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f0a:	4b1e      	ldr	r3, [pc, #120]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1f0      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0308 	and.w	r3, r3, #8
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d038      	beq.n	8003f94 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d019      	beq.n	8003f5e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f2a:	4b16      	ldr	r3, [pc, #88]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f2e:	4a15      	ldr	r2, [pc, #84]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003f30:	f043 0301 	orr.w	r3, r3, #1
 8003f34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f36:	f7fe fd01 	bl	800293c <HAL_GetTick>
 8003f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f3c:	e008      	b.n	8003f50 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f3e:	f7fe fcfd 	bl	800293c <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e180      	b.n	8004252 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f50:	4b0c      	ldr	r3, [pc, #48]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003f52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0f0      	beq.n	8003f3e <HAL_RCC_OscConfig+0x23a>
 8003f5c:	e01a      	b.n	8003f94 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f5e:	4b09      	ldr	r3, [pc, #36]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f62:	4a08      	ldr	r2, [pc, #32]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003f64:	f023 0301 	bic.w	r3, r3, #1
 8003f68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f6a:	f7fe fce7 	bl	800293c <HAL_GetTick>
 8003f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f70:	e00a      	b.n	8003f88 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f72:	f7fe fce3 	bl	800293c <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d903      	bls.n	8003f88 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e166      	b.n	8004252 <HAL_RCC_OscConfig+0x54e>
 8003f84:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f88:	4b92      	ldr	r3, [pc, #584]	; (80041d4 <HAL_RCC_OscConfig+0x4d0>)
 8003f8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1ee      	bne.n	8003f72 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 80a4 	beq.w	80040ea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fa2:	4b8c      	ldr	r3, [pc, #560]	; (80041d4 <HAL_RCC_OscConfig+0x4d0>)
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10d      	bne.n	8003fca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fae:	4b89      	ldr	r3, [pc, #548]	; (80041d4 <HAL_RCC_OscConfig+0x4d0>)
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	4a88      	ldr	r2, [pc, #544]	; (80041d4 <HAL_RCC_OscConfig+0x4d0>)
 8003fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8003fba:	4b86      	ldr	r3, [pc, #536]	; (80041d4 <HAL_RCC_OscConfig+0x4d0>)
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc2:	60bb      	str	r3, [r7, #8]
 8003fc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fca:	4b83      	ldr	r3, [pc, #524]	; (80041d8 <HAL_RCC_OscConfig+0x4d4>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d118      	bne.n	8004008 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003fd6:	4b80      	ldr	r3, [pc, #512]	; (80041d8 <HAL_RCC_OscConfig+0x4d4>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a7f      	ldr	r2, [pc, #508]	; (80041d8 <HAL_RCC_OscConfig+0x4d4>)
 8003fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fe2:	f7fe fcab 	bl	800293c <HAL_GetTick>
 8003fe6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fe8:	e008      	b.n	8003ffc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fea:	f7fe fca7 	bl	800293c <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b64      	cmp	r3, #100	; 0x64
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e12a      	b.n	8004252 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ffc:	4b76      	ldr	r3, [pc, #472]	; (80041d8 <HAL_RCC_OscConfig+0x4d4>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004004:	2b00      	cmp	r3, #0
 8004006:	d0f0      	beq.n	8003fea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d106      	bne.n	800401e <HAL_RCC_OscConfig+0x31a>
 8004010:	4b70      	ldr	r3, [pc, #448]	; (80041d4 <HAL_RCC_OscConfig+0x4d0>)
 8004012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004014:	4a6f      	ldr	r2, [pc, #444]	; (80041d4 <HAL_RCC_OscConfig+0x4d0>)
 8004016:	f043 0301 	orr.w	r3, r3, #1
 800401a:	6713      	str	r3, [r2, #112]	; 0x70
 800401c:	e02d      	b.n	800407a <HAL_RCC_OscConfig+0x376>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10c      	bne.n	8004040 <HAL_RCC_OscConfig+0x33c>
 8004026:	4b6b      	ldr	r3, [pc, #428]	; (80041d4 <HAL_RCC_OscConfig+0x4d0>)
 8004028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402a:	4a6a      	ldr	r2, [pc, #424]	; (80041d4 <HAL_RCC_OscConfig+0x4d0>)
 800402c:	f023 0301 	bic.w	r3, r3, #1
 8004030:	6713      	str	r3, [r2, #112]	; 0x70
 8004032:	4b68      	ldr	r3, [pc, #416]	; (80041d4 <HAL_RCC_OscConfig+0x4d0>)
 8004034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004036:	4a67      	ldr	r2, [pc, #412]	; (80041d4 <HAL_RCC_OscConfig+0x4d0>)
 8004038:	f023 0304 	bic.w	r3, r3, #4
 800403c:	6713      	str	r3, [r2, #112]	; 0x70
 800403e:	e01c      	b.n	800407a <HAL_RCC_OscConfig+0x376>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	2b05      	cmp	r3, #5
 8004046:	d10c      	bne.n	8004062 <HAL_RCC_OscConfig+0x35e>
 8004048:	4b62      	ldr	r3, [pc, #392]	; (80041d4 <HAL_RCC_OscConfig+0x4d0>)
 800404a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404c:	4a61      	ldr	r2, [pc, #388]	; (80041d4 <HAL_RCC_OscConfig+0x4d0>)
 800404e:	f043 0304 	orr.w	r3, r3, #4
 8004052:	6713      	str	r3, [r2, #112]	; 0x70
 8004054:	4b5f      	ldr	r3, [pc, #380]	; (80041d4 <HAL_RCC_OscConfig+0x4d0>)
 8004056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004058:	4a5e      	ldr	r2, [pc, #376]	; (80041d4 <HAL_RCC_OscConfig+0x4d0>)
 800405a:	f043 0301 	orr.w	r3, r3, #1
 800405e:	6713      	str	r3, [r2, #112]	; 0x70
 8004060:	e00b      	b.n	800407a <HAL_RCC_OscConfig+0x376>
 8004062:	4b5c      	ldr	r3, [pc, #368]	; (80041d4 <HAL_RCC_OscConfig+0x4d0>)
 8004064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004066:	4a5b      	ldr	r2, [pc, #364]	; (80041d4 <HAL_RCC_OscConfig+0x4d0>)
 8004068:	f023 0301 	bic.w	r3, r3, #1
 800406c:	6713      	str	r3, [r2, #112]	; 0x70
 800406e:	4b59      	ldr	r3, [pc, #356]	; (80041d4 <HAL_RCC_OscConfig+0x4d0>)
 8004070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004072:	4a58      	ldr	r2, [pc, #352]	; (80041d4 <HAL_RCC_OscConfig+0x4d0>)
 8004074:	f023 0304 	bic.w	r3, r3, #4
 8004078:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d015      	beq.n	80040ae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004082:	f7fe fc5b 	bl	800293c <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004088:	e00a      	b.n	80040a0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800408a:	f7fe fc57 	bl	800293c <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	f241 3288 	movw	r2, #5000	; 0x1388
 8004098:	4293      	cmp	r3, r2
 800409a:	d901      	bls.n	80040a0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e0d8      	b.n	8004252 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a0:	4b4c      	ldr	r3, [pc, #304]	; (80041d4 <HAL_RCC_OscConfig+0x4d0>)
 80040a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d0ee      	beq.n	800408a <HAL_RCC_OscConfig+0x386>
 80040ac:	e014      	b.n	80040d8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ae:	f7fe fc45 	bl	800293c <HAL_GetTick>
 80040b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040b4:	e00a      	b.n	80040cc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040b6:	f7fe fc41 	bl	800293c <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e0c2      	b.n	8004252 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040cc:	4b41      	ldr	r3, [pc, #260]	; (80041d4 <HAL_RCC_OscConfig+0x4d0>)
 80040ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1ee      	bne.n	80040b6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040d8:	7dfb      	ldrb	r3, [r7, #23]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d105      	bne.n	80040ea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040de:	4b3d      	ldr	r3, [pc, #244]	; (80041d4 <HAL_RCC_OscConfig+0x4d0>)
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	4a3c      	ldr	r2, [pc, #240]	; (80041d4 <HAL_RCC_OscConfig+0x4d0>)
 80040e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 80ae 	beq.w	8004250 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040f4:	4b37      	ldr	r3, [pc, #220]	; (80041d4 <HAL_RCC_OscConfig+0x4d0>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f003 030c 	and.w	r3, r3, #12
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d06d      	beq.n	80041dc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	2b02      	cmp	r3, #2
 8004106:	d14b      	bne.n	80041a0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004108:	4b32      	ldr	r3, [pc, #200]	; (80041d4 <HAL_RCC_OscConfig+0x4d0>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a31      	ldr	r2, [pc, #196]	; (80041d4 <HAL_RCC_OscConfig+0x4d0>)
 800410e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004112:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004114:	f7fe fc12 	bl	800293c <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800411a:	e008      	b.n	800412e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800411c:	f7fe fc0e 	bl	800293c <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b02      	cmp	r3, #2
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e091      	b.n	8004252 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800412e:	4b29      	ldr	r3, [pc, #164]	; (80041d4 <HAL_RCC_OscConfig+0x4d0>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1f0      	bne.n	800411c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	69da      	ldr	r2, [r3, #28]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	019b      	lsls	r3, r3, #6
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004150:	085b      	lsrs	r3, r3, #1
 8004152:	3b01      	subs	r3, #1
 8004154:	041b      	lsls	r3, r3, #16
 8004156:	431a      	orrs	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415c:	061b      	lsls	r3, r3, #24
 800415e:	431a      	orrs	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004164:	071b      	lsls	r3, r3, #28
 8004166:	491b      	ldr	r1, [pc, #108]	; (80041d4 <HAL_RCC_OscConfig+0x4d0>)
 8004168:	4313      	orrs	r3, r2
 800416a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800416c:	4b19      	ldr	r3, [pc, #100]	; (80041d4 <HAL_RCC_OscConfig+0x4d0>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a18      	ldr	r2, [pc, #96]	; (80041d4 <HAL_RCC_OscConfig+0x4d0>)
 8004172:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004176:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004178:	f7fe fbe0 	bl	800293c <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004180:	f7fe fbdc 	bl	800293c <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e05f      	b.n	8004252 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004192:	4b10      	ldr	r3, [pc, #64]	; (80041d4 <HAL_RCC_OscConfig+0x4d0>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0f0      	beq.n	8004180 <HAL_RCC_OscConfig+0x47c>
 800419e:	e057      	b.n	8004250 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041a0:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <HAL_RCC_OscConfig+0x4d0>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a0b      	ldr	r2, [pc, #44]	; (80041d4 <HAL_RCC_OscConfig+0x4d0>)
 80041a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ac:	f7fe fbc6 	bl	800293c <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041b4:	f7fe fbc2 	bl	800293c <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e045      	b.n	8004252 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041c6:	4b03      	ldr	r3, [pc, #12]	; (80041d4 <HAL_RCC_OscConfig+0x4d0>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1f0      	bne.n	80041b4 <HAL_RCC_OscConfig+0x4b0>
 80041d2:	e03d      	b.n	8004250 <HAL_RCC_OscConfig+0x54c>
 80041d4:	40023800 	.word	0x40023800
 80041d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80041dc:	4b1f      	ldr	r3, [pc, #124]	; (800425c <HAL_RCC_OscConfig+0x558>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d030      	beq.n	800424c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d129      	bne.n	800424c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004202:	429a      	cmp	r2, r3
 8004204:	d122      	bne.n	800424c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800420c:	4013      	ands	r3, r2
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004212:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004214:	4293      	cmp	r3, r2
 8004216:	d119      	bne.n	800424c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004222:	085b      	lsrs	r3, r3, #1
 8004224:	3b01      	subs	r3, #1
 8004226:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004228:	429a      	cmp	r2, r3
 800422a:	d10f      	bne.n	800424c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004236:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004238:	429a      	cmp	r2, r3
 800423a:	d107      	bne.n	800424c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004246:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004248:	429a      	cmp	r2, r3
 800424a:	d001      	beq.n	8004250 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e000      	b.n	8004252 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3718      	adds	r7, #24
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	40023800 	.word	0x40023800

08004260 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800426a:	2300      	movs	r3, #0
 800426c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e0d0      	b.n	800441a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004278:	4b6a      	ldr	r3, [pc, #424]	; (8004424 <HAL_RCC_ClockConfig+0x1c4>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 030f 	and.w	r3, r3, #15
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	429a      	cmp	r2, r3
 8004284:	d910      	bls.n	80042a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004286:	4b67      	ldr	r3, [pc, #412]	; (8004424 <HAL_RCC_ClockConfig+0x1c4>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f023 020f 	bic.w	r2, r3, #15
 800428e:	4965      	ldr	r1, [pc, #404]	; (8004424 <HAL_RCC_ClockConfig+0x1c4>)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	4313      	orrs	r3, r2
 8004294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004296:	4b63      	ldr	r3, [pc, #396]	; (8004424 <HAL_RCC_ClockConfig+0x1c4>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 030f 	and.w	r3, r3, #15
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d001      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e0b8      	b.n	800441a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d020      	beq.n	80042f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d005      	beq.n	80042cc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042c0:	4b59      	ldr	r3, [pc, #356]	; (8004428 <HAL_RCC_ClockConfig+0x1c8>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	4a58      	ldr	r2, [pc, #352]	; (8004428 <HAL_RCC_ClockConfig+0x1c8>)
 80042c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0308 	and.w	r3, r3, #8
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d005      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042d8:	4b53      	ldr	r3, [pc, #332]	; (8004428 <HAL_RCC_ClockConfig+0x1c8>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	4a52      	ldr	r2, [pc, #328]	; (8004428 <HAL_RCC_ClockConfig+0x1c8>)
 80042de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042e4:	4b50      	ldr	r3, [pc, #320]	; (8004428 <HAL_RCC_ClockConfig+0x1c8>)
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	494d      	ldr	r1, [pc, #308]	; (8004428 <HAL_RCC_ClockConfig+0x1c8>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d040      	beq.n	8004384 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d107      	bne.n	800431a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800430a:	4b47      	ldr	r3, [pc, #284]	; (8004428 <HAL_RCC_ClockConfig+0x1c8>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d115      	bne.n	8004342 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e07f      	b.n	800441a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	2b02      	cmp	r3, #2
 8004320:	d107      	bne.n	8004332 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004322:	4b41      	ldr	r3, [pc, #260]	; (8004428 <HAL_RCC_ClockConfig+0x1c8>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d109      	bne.n	8004342 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e073      	b.n	800441a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004332:	4b3d      	ldr	r3, [pc, #244]	; (8004428 <HAL_RCC_ClockConfig+0x1c8>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e06b      	b.n	800441a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004342:	4b39      	ldr	r3, [pc, #228]	; (8004428 <HAL_RCC_ClockConfig+0x1c8>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f023 0203 	bic.w	r2, r3, #3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	4936      	ldr	r1, [pc, #216]	; (8004428 <HAL_RCC_ClockConfig+0x1c8>)
 8004350:	4313      	orrs	r3, r2
 8004352:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004354:	f7fe faf2 	bl	800293c <HAL_GetTick>
 8004358:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800435a:	e00a      	b.n	8004372 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800435c:	f7fe faee 	bl	800293c <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	f241 3288 	movw	r2, #5000	; 0x1388
 800436a:	4293      	cmp	r3, r2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e053      	b.n	800441a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004372:	4b2d      	ldr	r3, [pc, #180]	; (8004428 <HAL_RCC_ClockConfig+0x1c8>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 020c 	and.w	r2, r3, #12
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	429a      	cmp	r2, r3
 8004382:	d1eb      	bne.n	800435c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004384:	4b27      	ldr	r3, [pc, #156]	; (8004424 <HAL_RCC_ClockConfig+0x1c4>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 030f 	and.w	r3, r3, #15
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	429a      	cmp	r2, r3
 8004390:	d210      	bcs.n	80043b4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004392:	4b24      	ldr	r3, [pc, #144]	; (8004424 <HAL_RCC_ClockConfig+0x1c4>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f023 020f 	bic.w	r2, r3, #15
 800439a:	4922      	ldr	r1, [pc, #136]	; (8004424 <HAL_RCC_ClockConfig+0x1c4>)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	4313      	orrs	r3, r2
 80043a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043a2:	4b20      	ldr	r3, [pc, #128]	; (8004424 <HAL_RCC_ClockConfig+0x1c4>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 030f 	and.w	r3, r3, #15
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d001      	beq.n	80043b4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e032      	b.n	800441a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d008      	beq.n	80043d2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043c0:	4b19      	ldr	r3, [pc, #100]	; (8004428 <HAL_RCC_ClockConfig+0x1c8>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	4916      	ldr	r1, [pc, #88]	; (8004428 <HAL_RCC_ClockConfig+0x1c8>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0308 	and.w	r3, r3, #8
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d009      	beq.n	80043f2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043de:	4b12      	ldr	r3, [pc, #72]	; (8004428 <HAL_RCC_ClockConfig+0x1c8>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	490e      	ldr	r1, [pc, #56]	; (8004428 <HAL_RCC_ClockConfig+0x1c8>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043f2:	f000 f821 	bl	8004438 <HAL_RCC_GetSysClockFreq>
 80043f6:	4602      	mov	r2, r0
 80043f8:	4b0b      	ldr	r3, [pc, #44]	; (8004428 <HAL_RCC_ClockConfig+0x1c8>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	091b      	lsrs	r3, r3, #4
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	490a      	ldr	r1, [pc, #40]	; (800442c <HAL_RCC_ClockConfig+0x1cc>)
 8004404:	5ccb      	ldrb	r3, [r1, r3]
 8004406:	fa22 f303 	lsr.w	r3, r2, r3
 800440a:	4a09      	ldr	r2, [pc, #36]	; (8004430 <HAL_RCC_ClockConfig+0x1d0>)
 800440c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800440e:	4b09      	ldr	r3, [pc, #36]	; (8004434 <HAL_RCC_ClockConfig+0x1d4>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4618      	mov	r0, r3
 8004414:	f7fe fa4e 	bl	80028b4 <HAL_InitTick>

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	40023c00 	.word	0x40023c00
 8004428:	40023800 	.word	0x40023800
 800442c:	0800ad10 	.word	0x0800ad10
 8004430:	20000028 	.word	0x20000028
 8004434:	2000002c 	.word	0x2000002c

08004438 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800443c:	b090      	sub	sp, #64	; 0x40
 800443e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004440:	2300      	movs	r3, #0
 8004442:	637b      	str	r3, [r7, #52]	; 0x34
 8004444:	2300      	movs	r3, #0
 8004446:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004448:	2300      	movs	r3, #0
 800444a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800444c:	2300      	movs	r3, #0
 800444e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004450:	4b59      	ldr	r3, [pc, #356]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f003 030c 	and.w	r3, r3, #12
 8004458:	2b08      	cmp	r3, #8
 800445a:	d00d      	beq.n	8004478 <HAL_RCC_GetSysClockFreq+0x40>
 800445c:	2b08      	cmp	r3, #8
 800445e:	f200 80a1 	bhi.w	80045a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004462:	2b00      	cmp	r3, #0
 8004464:	d002      	beq.n	800446c <HAL_RCC_GetSysClockFreq+0x34>
 8004466:	2b04      	cmp	r3, #4
 8004468:	d003      	beq.n	8004472 <HAL_RCC_GetSysClockFreq+0x3a>
 800446a:	e09b      	b.n	80045a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800446c:	4b53      	ldr	r3, [pc, #332]	; (80045bc <HAL_RCC_GetSysClockFreq+0x184>)
 800446e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004470:	e09b      	b.n	80045aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004472:	4b53      	ldr	r3, [pc, #332]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004474:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004476:	e098      	b.n	80045aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004478:	4b4f      	ldr	r3, [pc, #316]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004480:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004482:	4b4d      	ldr	r3, [pc, #308]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d028      	beq.n	80044e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800448e:	4b4a      	ldr	r3, [pc, #296]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	099b      	lsrs	r3, r3, #6
 8004494:	2200      	movs	r2, #0
 8004496:	623b      	str	r3, [r7, #32]
 8004498:	627a      	str	r2, [r7, #36]	; 0x24
 800449a:	6a3b      	ldr	r3, [r7, #32]
 800449c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80044a0:	2100      	movs	r1, #0
 80044a2:	4b47      	ldr	r3, [pc, #284]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80044a4:	fb03 f201 	mul.w	r2, r3, r1
 80044a8:	2300      	movs	r3, #0
 80044aa:	fb00 f303 	mul.w	r3, r0, r3
 80044ae:	4413      	add	r3, r2
 80044b0:	4a43      	ldr	r2, [pc, #268]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80044b2:	fba0 1202 	umull	r1, r2, r0, r2
 80044b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044b8:	460a      	mov	r2, r1
 80044ba:	62ba      	str	r2, [r7, #40]	; 0x28
 80044bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044be:	4413      	add	r3, r2
 80044c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044c4:	2200      	movs	r2, #0
 80044c6:	61bb      	str	r3, [r7, #24]
 80044c8:	61fa      	str	r2, [r7, #28]
 80044ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80044d2:	f7fc f8c9 	bl	8000668 <__aeabi_uldivmod>
 80044d6:	4602      	mov	r2, r0
 80044d8:	460b      	mov	r3, r1
 80044da:	4613      	mov	r3, r2
 80044dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044de:	e053      	b.n	8004588 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044e0:	4b35      	ldr	r3, [pc, #212]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x180>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	099b      	lsrs	r3, r3, #6
 80044e6:	2200      	movs	r2, #0
 80044e8:	613b      	str	r3, [r7, #16]
 80044ea:	617a      	str	r2, [r7, #20]
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80044f2:	f04f 0b00 	mov.w	fp, #0
 80044f6:	4652      	mov	r2, sl
 80044f8:	465b      	mov	r3, fp
 80044fa:	f04f 0000 	mov.w	r0, #0
 80044fe:	f04f 0100 	mov.w	r1, #0
 8004502:	0159      	lsls	r1, r3, #5
 8004504:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004508:	0150      	lsls	r0, r2, #5
 800450a:	4602      	mov	r2, r0
 800450c:	460b      	mov	r3, r1
 800450e:	ebb2 080a 	subs.w	r8, r2, sl
 8004512:	eb63 090b 	sbc.w	r9, r3, fp
 8004516:	f04f 0200 	mov.w	r2, #0
 800451a:	f04f 0300 	mov.w	r3, #0
 800451e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004522:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004526:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800452a:	ebb2 0408 	subs.w	r4, r2, r8
 800452e:	eb63 0509 	sbc.w	r5, r3, r9
 8004532:	f04f 0200 	mov.w	r2, #0
 8004536:	f04f 0300 	mov.w	r3, #0
 800453a:	00eb      	lsls	r3, r5, #3
 800453c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004540:	00e2      	lsls	r2, r4, #3
 8004542:	4614      	mov	r4, r2
 8004544:	461d      	mov	r5, r3
 8004546:	eb14 030a 	adds.w	r3, r4, sl
 800454a:	603b      	str	r3, [r7, #0]
 800454c:	eb45 030b 	adc.w	r3, r5, fp
 8004550:	607b      	str	r3, [r7, #4]
 8004552:	f04f 0200 	mov.w	r2, #0
 8004556:	f04f 0300 	mov.w	r3, #0
 800455a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800455e:	4629      	mov	r1, r5
 8004560:	028b      	lsls	r3, r1, #10
 8004562:	4621      	mov	r1, r4
 8004564:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004568:	4621      	mov	r1, r4
 800456a:	028a      	lsls	r2, r1, #10
 800456c:	4610      	mov	r0, r2
 800456e:	4619      	mov	r1, r3
 8004570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004572:	2200      	movs	r2, #0
 8004574:	60bb      	str	r3, [r7, #8]
 8004576:	60fa      	str	r2, [r7, #12]
 8004578:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800457c:	f7fc f874 	bl	8000668 <__aeabi_uldivmod>
 8004580:	4602      	mov	r2, r0
 8004582:	460b      	mov	r3, r1
 8004584:	4613      	mov	r3, r2
 8004586:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004588:	4b0b      	ldr	r3, [pc, #44]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	0c1b      	lsrs	r3, r3, #16
 800458e:	f003 0303 	and.w	r3, r3, #3
 8004592:	3301      	adds	r3, #1
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004598:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800459a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459c:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80045a2:	e002      	b.n	80045aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045a4:	4b05      	ldr	r3, [pc, #20]	; (80045bc <HAL_RCC_GetSysClockFreq+0x184>)
 80045a6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80045a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3740      	adds	r7, #64	; 0x40
 80045b0:	46bd      	mov	sp, r7
 80045b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045b6:	bf00      	nop
 80045b8:	40023800 	.word	0x40023800
 80045bc:	00f42400 	.word	0x00f42400
 80045c0:	017d7840 	.word	0x017d7840

080045c4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045c8:	4b03      	ldr	r3, [pc, #12]	; (80045d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80045ca:	681b      	ldr	r3, [r3, #0]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	20000028 	.word	0x20000028

080045dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045e0:	f7ff fff0 	bl	80045c4 <HAL_RCC_GetHCLKFreq>
 80045e4:	4602      	mov	r2, r0
 80045e6:	4b05      	ldr	r3, [pc, #20]	; (80045fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	0a9b      	lsrs	r3, r3, #10
 80045ec:	f003 0307 	and.w	r3, r3, #7
 80045f0:	4903      	ldr	r1, [pc, #12]	; (8004600 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045f2:	5ccb      	ldrb	r3, [r1, r3]
 80045f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	40023800 	.word	0x40023800
 8004600:	0800ad20 	.word	0x0800ad20

08004604 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004608:	f7ff ffdc 	bl	80045c4 <HAL_RCC_GetHCLKFreq>
 800460c:	4602      	mov	r2, r0
 800460e:	4b05      	ldr	r3, [pc, #20]	; (8004624 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	0b5b      	lsrs	r3, r3, #13
 8004614:	f003 0307 	and.w	r3, r3, #7
 8004618:	4903      	ldr	r1, [pc, #12]	; (8004628 <HAL_RCC_GetPCLK2Freq+0x24>)
 800461a:	5ccb      	ldrb	r3, [r1, r3]
 800461c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004620:	4618      	mov	r0, r3
 8004622:	bd80      	pop	{r7, pc}
 8004624:	40023800 	.word	0x40023800
 8004628:	0800ad20 	.word	0x0800ad20

0800462c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b088      	sub	sp, #32
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004634:	2300      	movs	r3, #0
 8004636:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004638:	2300      	movs	r3, #0
 800463a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800463c:	2300      	movs	r3, #0
 800463e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004640:	2300      	movs	r3, #0
 8004642:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004644:	2300      	movs	r3, #0
 8004646:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b00      	cmp	r3, #0
 8004652:	d012      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004654:	4b69      	ldr	r3, [pc, #420]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	4a68      	ldr	r2, [pc, #416]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800465a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800465e:	6093      	str	r3, [r2, #8]
 8004660:	4b66      	ldr	r3, [pc, #408]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004668:	4964      	ldr	r1, [pc, #400]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800466a:	4313      	orrs	r3, r2
 800466c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004676:	2301      	movs	r3, #1
 8004678:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d017      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004686:	4b5d      	ldr	r3, [pc, #372]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800468c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004694:	4959      	ldr	r1, [pc, #356]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004696:	4313      	orrs	r3, r2
 8004698:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046a4:	d101      	bne.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80046a6:	2301      	movs	r3, #1
 80046a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80046b2:	2301      	movs	r3, #1
 80046b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d017      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046c2:	4b4e      	ldr	r3, [pc, #312]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d0:	494a      	ldr	r1, [pc, #296]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046e0:	d101      	bne.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80046e2:	2301      	movs	r3, #1
 80046e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80046ee:	2301      	movs	r3, #1
 80046f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80046fe:	2301      	movs	r3, #1
 8004700:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0320 	and.w	r3, r3, #32
 800470a:	2b00      	cmp	r3, #0
 800470c:	f000 808b 	beq.w	8004826 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004710:	4b3a      	ldr	r3, [pc, #232]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004714:	4a39      	ldr	r2, [pc, #228]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800471a:	6413      	str	r3, [r2, #64]	; 0x40
 800471c:	4b37      	ldr	r3, [pc, #220]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800471e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004724:	60bb      	str	r3, [r7, #8]
 8004726:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004728:	4b35      	ldr	r3, [pc, #212]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a34      	ldr	r2, [pc, #208]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800472e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004732:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004734:	f7fe f902 	bl	800293c <HAL_GetTick>
 8004738:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800473a:	e008      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800473c:	f7fe f8fe 	bl	800293c <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b64      	cmp	r3, #100	; 0x64
 8004748:	d901      	bls.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e38f      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800474e:	4b2c      	ldr	r3, [pc, #176]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004756:	2b00      	cmp	r3, #0
 8004758:	d0f0      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800475a:	4b28      	ldr	r3, [pc, #160]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800475c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004762:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d035      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	429a      	cmp	r2, r3
 8004776:	d02e      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004778:	4b20      	ldr	r3, [pc, #128]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800477a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004780:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004782:	4b1e      	ldr	r3, [pc, #120]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004786:	4a1d      	ldr	r2, [pc, #116]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800478c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800478e:	4b1b      	ldr	r3, [pc, #108]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004792:	4a1a      	ldr	r2, [pc, #104]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004794:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004798:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800479a:	4a18      	ldr	r2, [pc, #96]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80047a0:	4b16      	ldr	r3, [pc, #88]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d114      	bne.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ac:	f7fe f8c6 	bl	800293c <HAL_GetTick>
 80047b0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047b2:	e00a      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047b4:	f7fe f8c2 	bl	800293c <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d901      	bls.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e351      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ca:	4b0c      	ldr	r3, [pc, #48]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0ee      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047e2:	d111      	bne.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80047e4:	4b05      	ldr	r3, [pc, #20]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047f0:	4b04      	ldr	r3, [pc, #16]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80047f2:	400b      	ands	r3, r1
 80047f4:	4901      	ldr	r1, [pc, #4]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	608b      	str	r3, [r1, #8]
 80047fa:	e00b      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80047fc:	40023800 	.word	0x40023800
 8004800:	40007000 	.word	0x40007000
 8004804:	0ffffcff 	.word	0x0ffffcff
 8004808:	4bac      	ldr	r3, [pc, #688]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	4aab      	ldr	r2, [pc, #684]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800480e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004812:	6093      	str	r3, [r2, #8]
 8004814:	4ba9      	ldr	r3, [pc, #676]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004816:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004820:	49a6      	ldr	r1, [pc, #664]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004822:	4313      	orrs	r3, r2
 8004824:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0310 	and.w	r3, r3, #16
 800482e:	2b00      	cmp	r3, #0
 8004830:	d010      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004832:	4ba2      	ldr	r3, [pc, #648]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004834:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004838:	4aa0      	ldr	r2, [pc, #640]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800483a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800483e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004842:	4b9e      	ldr	r3, [pc, #632]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004844:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484c:	499b      	ldr	r1, [pc, #620]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800484e:	4313      	orrs	r3, r2
 8004850:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00a      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004860:	4b96      	ldr	r3, [pc, #600]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004866:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800486e:	4993      	ldr	r1, [pc, #588]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004870:	4313      	orrs	r3, r2
 8004872:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00a      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004882:	4b8e      	ldr	r3, [pc, #568]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004888:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004890:	498a      	ldr	r1, [pc, #552]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004892:	4313      	orrs	r3, r2
 8004894:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00a      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048a4:	4b85      	ldr	r3, [pc, #532]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048b2:	4982      	ldr	r1, [pc, #520]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00a      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80048c6:	4b7d      	ldr	r3, [pc, #500]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d4:	4979      	ldr	r1, [pc, #484]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00a      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048e8:	4b74      	ldr	r3, [pc, #464]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ee:	f023 0203 	bic.w	r2, r3, #3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f6:	4971      	ldr	r1, [pc, #452]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00a      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800490a:	4b6c      	ldr	r3, [pc, #432]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800490c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004910:	f023 020c 	bic.w	r2, r3, #12
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004918:	4968      	ldr	r1, [pc, #416]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800491a:	4313      	orrs	r3, r2
 800491c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00a      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800492c:	4b63      	ldr	r3, [pc, #396]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800492e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004932:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800493a:	4960      	ldr	r1, [pc, #384]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800493c:	4313      	orrs	r3, r2
 800493e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00a      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800494e:	4b5b      	ldr	r3, [pc, #364]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004954:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800495c:	4957      	ldr	r1, [pc, #348]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800495e:	4313      	orrs	r3, r2
 8004960:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00a      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004970:	4b52      	ldr	r3, [pc, #328]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004976:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497e:	494f      	ldr	r1, [pc, #316]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004980:	4313      	orrs	r3, r2
 8004982:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00a      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004992:	4b4a      	ldr	r3, [pc, #296]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004998:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a0:	4946      	ldr	r1, [pc, #280]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00a      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80049b4:	4b41      	ldr	r3, [pc, #260]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c2:	493e      	ldr	r1, [pc, #248]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00a      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80049d6:	4b39      	ldr	r3, [pc, #228]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049e4:	4935      	ldr	r1, [pc, #212]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00a      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80049f8:	4b30      	ldr	r3, [pc, #192]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a06:	492d      	ldr	r1, [pc, #180]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d011      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004a1a:	4b28      	ldr	r3, [pc, #160]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a20:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a28:	4924      	ldr	r1, [pc, #144]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a38:	d101      	bne.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0308 	and.w	r3, r3, #8
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a5a:	4b18      	ldr	r3, [pc, #96]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a60:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a68:	4914      	ldr	r1, [pc, #80]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00b      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a7c:	4b0f      	ldr	r3, [pc, #60]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a82:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a8c:	490b      	ldr	r1, [pc, #44]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00f      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004aa0:	4b06      	ldr	r3, [pc, #24]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ab0:	4902      	ldr	r1, [pc, #8]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004ab8:	e002      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004aba:	bf00      	nop
 8004abc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00b      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004acc:	4b8a      	ldr	r3, [pc, #552]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ace:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ad2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004adc:	4986      	ldr	r1, [pc, #536]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00b      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004af0:	4b81      	ldr	r3, [pc, #516]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004af2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004af6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b00:	497d      	ldr	r1, [pc, #500]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d006      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f000 80d6 	beq.w	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b1c:	4b76      	ldr	r3, [pc, #472]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a75      	ldr	r2, [pc, #468]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b28:	f7fd ff08 	bl	800293c <HAL_GetTick>
 8004b2c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b2e:	e008      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b30:	f7fd ff04 	bl	800293c <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b64      	cmp	r3, #100	; 0x64
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e195      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b42:	4b6d      	ldr	r3, [pc, #436]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1f0      	bne.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d021      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d11d      	bne.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004b62:	4b65      	ldr	r3, [pc, #404]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b68:	0c1b      	lsrs	r3, r3, #16
 8004b6a:	f003 0303 	and.w	r3, r3, #3
 8004b6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b70:	4b61      	ldr	r3, [pc, #388]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b76:	0e1b      	lsrs	r3, r3, #24
 8004b78:	f003 030f 	and.w	r3, r3, #15
 8004b7c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	019a      	lsls	r2, r3, #6
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	041b      	lsls	r3, r3, #16
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	061b      	lsls	r3, r3, #24
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	071b      	lsls	r3, r3, #28
 8004b96:	4958      	ldr	r1, [pc, #352]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d004      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bb2:	d00a      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d02e      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bc8:	d129      	bne.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004bca:	4b4b      	ldr	r3, [pc, #300]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bd0:	0c1b      	lsrs	r3, r3, #16
 8004bd2:	f003 0303 	and.w	r3, r3, #3
 8004bd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004bd8:	4b47      	ldr	r3, [pc, #284]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bde:	0f1b      	lsrs	r3, r3, #28
 8004be0:	f003 0307 	and.w	r3, r3, #7
 8004be4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	019a      	lsls	r2, r3, #6
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	041b      	lsls	r3, r3, #16
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	061b      	lsls	r3, r3, #24
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	071b      	lsls	r3, r3, #28
 8004bfe:	493e      	ldr	r1, [pc, #248]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004c06:	4b3c      	ldr	r3, [pc, #240]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c0c:	f023 021f 	bic.w	r2, r3, #31
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	3b01      	subs	r3, #1
 8004c16:	4938      	ldr	r1, [pc, #224]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d01d      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c2a:	4b33      	ldr	r3, [pc, #204]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c30:	0e1b      	lsrs	r3, r3, #24
 8004c32:	f003 030f 	and.w	r3, r3, #15
 8004c36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c38:	4b2f      	ldr	r3, [pc, #188]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c3e:	0f1b      	lsrs	r3, r3, #28
 8004c40:	f003 0307 	and.w	r3, r3, #7
 8004c44:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	019a      	lsls	r2, r3, #6
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	041b      	lsls	r3, r3, #16
 8004c52:	431a      	orrs	r2, r3
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	061b      	lsls	r3, r3, #24
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	071b      	lsls	r3, r3, #28
 8004c5e:	4926      	ldr	r1, [pc, #152]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d011      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	019a      	lsls	r2, r3, #6
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	041b      	lsls	r3, r3, #16
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	061b      	lsls	r3, r3, #24
 8004c86:	431a      	orrs	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	071b      	lsls	r3, r3, #28
 8004c8e:	491a      	ldr	r1, [pc, #104]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c96:	4b18      	ldr	r3, [pc, #96]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a17      	ldr	r2, [pc, #92]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ca0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ca2:	f7fd fe4b 	bl	800293c <HAL_GetTick>
 8004ca6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ca8:	e008      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004caa:	f7fd fe47 	bl	800293c <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b64      	cmp	r3, #100	; 0x64
 8004cb6:	d901      	bls.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e0d8      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cbc:	4b0e      	ldr	r3, [pc, #56]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d0f0      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	f040 80ce 	bne.w	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004cd0:	4b09      	ldr	r3, [pc, #36]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a08      	ldr	r2, [pc, #32]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cdc:	f7fd fe2e 	bl	800293c <HAL_GetTick>
 8004ce0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ce2:	e00b      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ce4:	f7fd fe2a 	bl	800293c <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b64      	cmp	r3, #100	; 0x64
 8004cf0:	d904      	bls.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e0bb      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004cf6:	bf00      	nop
 8004cf8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004cfc:	4b5e      	ldr	r3, [pc, #376]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d08:	d0ec      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d009      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d02e      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d12a      	bne.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d32:	4b51      	ldr	r3, [pc, #324]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d38:	0c1b      	lsrs	r3, r3, #16
 8004d3a:	f003 0303 	and.w	r3, r3, #3
 8004d3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d40:	4b4d      	ldr	r3, [pc, #308]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d46:	0f1b      	lsrs	r3, r3, #28
 8004d48:	f003 0307 	and.w	r3, r3, #7
 8004d4c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	019a      	lsls	r2, r3, #6
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	041b      	lsls	r3, r3, #16
 8004d58:	431a      	orrs	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	061b      	lsls	r3, r3, #24
 8004d60:	431a      	orrs	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	071b      	lsls	r3, r3, #28
 8004d66:	4944      	ldr	r1, [pc, #272]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004d6e:	4b42      	ldr	r3, [pc, #264]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d74:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	021b      	lsls	r3, r3, #8
 8004d80:	493d      	ldr	r1, [pc, #244]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d022      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d9c:	d11d      	bne.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d9e:	4b36      	ldr	r3, [pc, #216]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da4:	0e1b      	lsrs	r3, r3, #24
 8004da6:	f003 030f 	and.w	r3, r3, #15
 8004daa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004dac:	4b32      	ldr	r3, [pc, #200]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db2:	0f1b      	lsrs	r3, r3, #28
 8004db4:	f003 0307 	and.w	r3, r3, #7
 8004db8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	019a      	lsls	r2, r3, #6
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
 8004dc4:	041b      	lsls	r3, r3, #16
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	061b      	lsls	r3, r3, #24
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	071b      	lsls	r3, r3, #28
 8004dd2:	4929      	ldr	r1, [pc, #164]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0308 	and.w	r3, r3, #8
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d028      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004de6:	4b24      	ldr	r3, [pc, #144]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dec:	0e1b      	lsrs	r3, r3, #24
 8004dee:	f003 030f 	and.w	r3, r3, #15
 8004df2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004df4:	4b20      	ldr	r3, [pc, #128]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfa:	0c1b      	lsrs	r3, r3, #16
 8004dfc:	f003 0303 	and.w	r3, r3, #3
 8004e00:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	019a      	lsls	r2, r3, #6
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	041b      	lsls	r3, r3, #16
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	061b      	lsls	r3, r3, #24
 8004e12:	431a      	orrs	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	071b      	lsls	r3, r3, #28
 8004e1a:	4917      	ldr	r1, [pc, #92]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004e22:	4b15      	ldr	r3, [pc, #84]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e30:	4911      	ldr	r1, [pc, #68]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004e38:	4b0f      	ldr	r3, [pc, #60]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a0e      	ldr	r2, [pc, #56]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e44:	f7fd fd7a 	bl	800293c <HAL_GetTick>
 8004e48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e4a:	e008      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e4c:	f7fd fd76 	bl	800293c <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b64      	cmp	r3, #100	; 0x64
 8004e58:	d901      	bls.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e007      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e5e:	4b06      	ldr	r3, [pc, #24]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e6a:	d1ef      	bne.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3720      	adds	r7, #32
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	40023800 	.word	0x40023800

08004e7c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e01c      	b.n	8004ec8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	795b      	ldrb	r3, [r3, #5]
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d105      	bne.n	8004ea4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7fd f966 	bl	8002170 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f042 0204 	orr.w	r2, r2, #4
 8004eb8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3708      	adds	r7, #8
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e09d      	b.n	800501e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d108      	bne.n	8004efc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ef2:	d009      	beq.n	8004f08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	61da      	str	r2, [r3, #28]
 8004efa:	e005      	b.n	8004f08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d106      	bne.n	8004f28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7fd f996 	bl	8002254 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f3e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f48:	d902      	bls.n	8004f50 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60fb      	str	r3, [r7, #12]
 8004f4e:	e002      	b.n	8004f56 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004f50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f54:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004f5e:	d007      	beq.n	8004f70 <HAL_SPI_Init+0xa0>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f68:	d002      	beq.n	8004f70 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f80:	431a      	orrs	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	695b      	ldr	r3, [r3, #20]
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	431a      	orrs	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	69db      	ldr	r3, [r3, #28]
 8004fa4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb2:	ea42 0103 	orr.w	r1, r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	0c1b      	lsrs	r3, r3, #16
 8004fcc:	f003 0204 	and.w	r2, r3, #4
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	f003 0310 	and.w	r3, r3, #16
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fde:	f003 0308 	and.w	r3, r3, #8
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004fec:	ea42 0103 	orr.w	r1, r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	69da      	ldr	r2, [r3, #28]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800500c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b088      	sub	sp, #32
 800502a:	af00      	add	r7, sp, #0
 800502c:	60f8      	str	r0, [r7, #12]
 800502e:	60b9      	str	r1, [r7, #8]
 8005030:	603b      	str	r3, [r7, #0]
 8005032:	4613      	mov	r3, r2
 8005034:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005036:	2300      	movs	r3, #0
 8005038:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005040:	2b01      	cmp	r3, #1
 8005042:	d101      	bne.n	8005048 <HAL_SPI_Transmit+0x22>
 8005044:	2302      	movs	r3, #2
 8005046:	e158      	b.n	80052fa <HAL_SPI_Transmit+0x2d4>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005050:	f7fd fc74 	bl	800293c <HAL_GetTick>
 8005054:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005056:	88fb      	ldrh	r3, [r7, #6]
 8005058:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b01      	cmp	r3, #1
 8005064:	d002      	beq.n	800506c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005066:	2302      	movs	r3, #2
 8005068:	77fb      	strb	r3, [r7, #31]
    goto error;
 800506a:	e13d      	b.n	80052e8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d002      	beq.n	8005078 <HAL_SPI_Transmit+0x52>
 8005072:	88fb      	ldrh	r3, [r7, #6]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d102      	bne.n	800507e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800507c:	e134      	b.n	80052e8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2203      	movs	r2, #3
 8005082:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	68ba      	ldr	r2, [r7, #8]
 8005090:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	88fa      	ldrh	r2, [r7, #6]
 8005096:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	88fa      	ldrh	r2, [r7, #6]
 800509c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050c8:	d10f      	bne.n	80050ea <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f4:	2b40      	cmp	r3, #64	; 0x40
 80050f6:	d007      	beq.n	8005108 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005106:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005110:	d94b      	bls.n	80051aa <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d002      	beq.n	8005120 <HAL_SPI_Transmit+0xfa>
 800511a:	8afb      	ldrh	r3, [r7, #22]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d13e      	bne.n	800519e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005124:	881a      	ldrh	r2, [r3, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005130:	1c9a      	adds	r2, r3, #2
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800513a:	b29b      	uxth	r3, r3
 800513c:	3b01      	subs	r3, #1
 800513e:	b29a      	uxth	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005144:	e02b      	b.n	800519e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	2b02      	cmp	r3, #2
 8005152:	d112      	bne.n	800517a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005158:	881a      	ldrh	r2, [r3, #0]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005164:	1c9a      	adds	r2, r3, #2
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800516e:	b29b      	uxth	r3, r3
 8005170:	3b01      	subs	r3, #1
 8005172:	b29a      	uxth	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005178:	e011      	b.n	800519e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800517a:	f7fd fbdf 	bl	800293c <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	429a      	cmp	r2, r3
 8005188:	d803      	bhi.n	8005192 <HAL_SPI_Transmit+0x16c>
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005190:	d102      	bne.n	8005198 <HAL_SPI_Transmit+0x172>
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d102      	bne.n	800519e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800519c:	e0a4      	b.n	80052e8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1ce      	bne.n	8005146 <HAL_SPI_Transmit+0x120>
 80051a8:	e07c      	b.n	80052a4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d002      	beq.n	80051b8 <HAL_SPI_Transmit+0x192>
 80051b2:	8afb      	ldrh	r3, [r7, #22]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d170      	bne.n	800529a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051bc:	b29b      	uxth	r3, r3
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d912      	bls.n	80051e8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c6:	881a      	ldrh	r2, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d2:	1c9a      	adds	r2, r3, #2
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051dc:	b29b      	uxth	r3, r3
 80051de:	3b02      	subs	r3, #2
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051e6:	e058      	b.n	800529a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	330c      	adds	r3, #12
 80051f2:	7812      	ldrb	r2, [r2, #0]
 80051f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fa:	1c5a      	adds	r2, r3, #1
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005204:	b29b      	uxth	r3, r3
 8005206:	3b01      	subs	r3, #1
 8005208:	b29a      	uxth	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800520e:	e044      	b.n	800529a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b02      	cmp	r3, #2
 800521c:	d12b      	bne.n	8005276 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005222:	b29b      	uxth	r3, r3
 8005224:	2b01      	cmp	r3, #1
 8005226:	d912      	bls.n	800524e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522c:	881a      	ldrh	r2, [r3, #0]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005238:	1c9a      	adds	r2, r3, #2
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005242:	b29b      	uxth	r3, r3
 8005244:	3b02      	subs	r3, #2
 8005246:	b29a      	uxth	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800524c:	e025      	b.n	800529a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	330c      	adds	r3, #12
 8005258:	7812      	ldrb	r2, [r2, #0]
 800525a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005260:	1c5a      	adds	r2, r3, #1
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800526a:	b29b      	uxth	r3, r3
 800526c:	3b01      	subs	r3, #1
 800526e:	b29a      	uxth	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005274:	e011      	b.n	800529a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005276:	f7fd fb61 	bl	800293c <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	429a      	cmp	r2, r3
 8005284:	d803      	bhi.n	800528e <HAL_SPI_Transmit+0x268>
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528c:	d102      	bne.n	8005294 <HAL_SPI_Transmit+0x26e>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d102      	bne.n	800529a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005298:	e026      	b.n	80052e8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800529e:	b29b      	uxth	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1b5      	bne.n	8005210 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	6839      	ldr	r1, [r7, #0]
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f000 f949 	bl	8005540 <SPI_EndRxTxTransaction>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d002      	beq.n	80052ba <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2220      	movs	r2, #32
 80052b8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d10a      	bne.n	80052d8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052c2:	2300      	movs	r3, #0
 80052c4:	613b      	str	r3, [r7, #16]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	613b      	str	r3, [r7, #16]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	613b      	str	r3, [r7, #16]
 80052d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d002      	beq.n	80052e6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	77fb      	strb	r3, [r7, #31]
 80052e4:	e000      	b.n	80052e8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80052e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80052f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3720      	adds	r7, #32
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
	...

08005304 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b088      	sub	sp, #32
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	603b      	str	r3, [r7, #0]
 8005310:	4613      	mov	r3, r2
 8005312:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005314:	f7fd fb12 	bl	800293c <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531c:	1a9b      	subs	r3, r3, r2
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	4413      	add	r3, r2
 8005322:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005324:	f7fd fb0a 	bl	800293c <HAL_GetTick>
 8005328:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800532a:	4b39      	ldr	r3, [pc, #228]	; (8005410 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	015b      	lsls	r3, r3, #5
 8005330:	0d1b      	lsrs	r3, r3, #20
 8005332:	69fa      	ldr	r2, [r7, #28]
 8005334:	fb02 f303 	mul.w	r3, r2, r3
 8005338:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800533a:	e054      	b.n	80053e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005342:	d050      	beq.n	80053e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005344:	f7fd fafa 	bl	800293c <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	69fa      	ldr	r2, [r7, #28]
 8005350:	429a      	cmp	r2, r3
 8005352:	d902      	bls.n	800535a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d13d      	bne.n	80053d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005368:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005372:	d111      	bne.n	8005398 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800537c:	d004      	beq.n	8005388 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005386:	d107      	bne.n	8005398 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005396:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053a0:	d10f      	bne.n	80053c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053b0:	601a      	str	r2, [r3, #0]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e017      	b.n	8005406 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053dc:	2300      	movs	r3, #0
 80053de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	3b01      	subs	r3, #1
 80053e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	689a      	ldr	r2, [r3, #8]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	4013      	ands	r3, r2
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	bf0c      	ite	eq
 80053f6:	2301      	moveq	r3, #1
 80053f8:	2300      	movne	r3, #0
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	461a      	mov	r2, r3
 80053fe:	79fb      	ldrb	r3, [r7, #7]
 8005400:	429a      	cmp	r2, r3
 8005402:	d19b      	bne.n	800533c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3720      	adds	r7, #32
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	20000028 	.word	0x20000028

08005414 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b08a      	sub	sp, #40	; 0x28
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
 8005420:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005422:	2300      	movs	r3, #0
 8005424:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005426:	f7fd fa89 	bl	800293c <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542e:	1a9b      	subs	r3, r3, r2
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	4413      	add	r3, r2
 8005434:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005436:	f7fd fa81 	bl	800293c <HAL_GetTick>
 800543a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	330c      	adds	r3, #12
 8005442:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005444:	4b3d      	ldr	r3, [pc, #244]	; (800553c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	4613      	mov	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	00da      	lsls	r2, r3, #3
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	0d1b      	lsrs	r3, r3, #20
 8005454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005456:	fb02 f303 	mul.w	r3, r2, r3
 800545a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800545c:	e060      	b.n	8005520 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005464:	d107      	bne.n	8005476 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d104      	bne.n	8005476 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	b2db      	uxtb	r3, r3
 8005472:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005474:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800547c:	d050      	beq.n	8005520 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800547e:	f7fd fa5d 	bl	800293c <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	6a3b      	ldr	r3, [r7, #32]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800548a:	429a      	cmp	r2, r3
 800548c:	d902      	bls.n	8005494 <SPI_WaitFifoStateUntilTimeout+0x80>
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	2b00      	cmp	r3, #0
 8005492:	d13d      	bne.n	8005510 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054ac:	d111      	bne.n	80054d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054b6:	d004      	beq.n	80054c2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054c0:	d107      	bne.n	80054d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054da:	d10f      	bne.n	80054fc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054ea:	601a      	str	r2, [r3, #0]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e010      	b.n	8005532 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005516:	2300      	movs	r3, #0
 8005518:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	3b01      	subs	r3, #1
 800551e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689a      	ldr	r2, [r3, #8]
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	4013      	ands	r3, r2
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	429a      	cmp	r2, r3
 800552e:	d196      	bne.n	800545e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3728      	adds	r7, #40	; 0x28
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	20000028 	.word	0x20000028

08005540 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b088      	sub	sp, #32
 8005544:	af02      	add	r7, sp, #8
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	9300      	str	r3, [sp, #0]
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	2200      	movs	r2, #0
 8005554:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f7ff ff5b 	bl	8005414 <SPI_WaitFifoStateUntilTimeout>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d007      	beq.n	8005574 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005568:	f043 0220 	orr.w	r2, r3, #32
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e046      	b.n	8005602 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005574:	4b25      	ldr	r3, [pc, #148]	; (800560c <SPI_EndRxTxTransaction+0xcc>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a25      	ldr	r2, [pc, #148]	; (8005610 <SPI_EndRxTxTransaction+0xd0>)
 800557a:	fba2 2303 	umull	r2, r3, r2, r3
 800557e:	0d5b      	lsrs	r3, r3, #21
 8005580:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005584:	fb02 f303 	mul.w	r3, r2, r3
 8005588:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005592:	d112      	bne.n	80055ba <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	2200      	movs	r2, #0
 800559c:	2180      	movs	r1, #128	; 0x80
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f7ff feb0 	bl	8005304 <SPI_WaitFlagStateUntilTimeout>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d016      	beq.n	80055d8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ae:	f043 0220 	orr.w	r2, r3, #32
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e023      	b.n	8005602 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00a      	beq.n	80055d6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	3b01      	subs	r3, #1
 80055c4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055d0:	2b80      	cmp	r3, #128	; 0x80
 80055d2:	d0f2      	beq.n	80055ba <SPI_EndRxTxTransaction+0x7a>
 80055d4:	e000      	b.n	80055d8 <SPI_EndRxTxTransaction+0x98>
        break;
 80055d6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	9300      	str	r3, [sp, #0]
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	2200      	movs	r2, #0
 80055e0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f7ff ff15 	bl	8005414 <SPI_WaitFifoStateUntilTimeout>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d007      	beq.n	8005600 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055f4:	f043 0220 	orr.w	r2, r3, #32
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e000      	b.n	8005602 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3718      	adds	r7, #24
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	20000028 	.word	0x20000028
 8005610:	165e9f81 	.word	0x165e9f81

08005614 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d101      	bne.n	8005626 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e049      	b.n	80056ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d106      	bne.n	8005640 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f7fc ffd2 	bl	80025e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2202      	movs	r2, #2
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	3304      	adds	r3, #4
 8005650:	4619      	mov	r1, r3
 8005652:	4610      	mov	r0, r2
 8005654:	f000 f900 	bl	8005858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3708      	adds	r7, #8
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
	...

080056c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056ce:	2300      	movs	r3, #0
 80056d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d101      	bne.n	80056e0 <HAL_TIM_ConfigClockSource+0x1c>
 80056dc:	2302      	movs	r3, #2
 80056de:	e0b4      	b.n	800584a <HAL_TIM_ConfigClockSource+0x186>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2202      	movs	r2, #2
 80056ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	4b56      	ldr	r3, [pc, #344]	; (8005854 <HAL_TIM_ConfigClockSource+0x190>)
 80056fc:	4013      	ands	r3, r2
 80056fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005706:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005718:	d03e      	beq.n	8005798 <HAL_TIM_ConfigClockSource+0xd4>
 800571a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800571e:	f200 8087 	bhi.w	8005830 <HAL_TIM_ConfigClockSource+0x16c>
 8005722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005726:	f000 8086 	beq.w	8005836 <HAL_TIM_ConfigClockSource+0x172>
 800572a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800572e:	d87f      	bhi.n	8005830 <HAL_TIM_ConfigClockSource+0x16c>
 8005730:	2b70      	cmp	r3, #112	; 0x70
 8005732:	d01a      	beq.n	800576a <HAL_TIM_ConfigClockSource+0xa6>
 8005734:	2b70      	cmp	r3, #112	; 0x70
 8005736:	d87b      	bhi.n	8005830 <HAL_TIM_ConfigClockSource+0x16c>
 8005738:	2b60      	cmp	r3, #96	; 0x60
 800573a:	d050      	beq.n	80057de <HAL_TIM_ConfigClockSource+0x11a>
 800573c:	2b60      	cmp	r3, #96	; 0x60
 800573e:	d877      	bhi.n	8005830 <HAL_TIM_ConfigClockSource+0x16c>
 8005740:	2b50      	cmp	r3, #80	; 0x50
 8005742:	d03c      	beq.n	80057be <HAL_TIM_ConfigClockSource+0xfa>
 8005744:	2b50      	cmp	r3, #80	; 0x50
 8005746:	d873      	bhi.n	8005830 <HAL_TIM_ConfigClockSource+0x16c>
 8005748:	2b40      	cmp	r3, #64	; 0x40
 800574a:	d058      	beq.n	80057fe <HAL_TIM_ConfigClockSource+0x13a>
 800574c:	2b40      	cmp	r3, #64	; 0x40
 800574e:	d86f      	bhi.n	8005830 <HAL_TIM_ConfigClockSource+0x16c>
 8005750:	2b30      	cmp	r3, #48	; 0x30
 8005752:	d064      	beq.n	800581e <HAL_TIM_ConfigClockSource+0x15a>
 8005754:	2b30      	cmp	r3, #48	; 0x30
 8005756:	d86b      	bhi.n	8005830 <HAL_TIM_ConfigClockSource+0x16c>
 8005758:	2b20      	cmp	r3, #32
 800575a:	d060      	beq.n	800581e <HAL_TIM_ConfigClockSource+0x15a>
 800575c:	2b20      	cmp	r3, #32
 800575e:	d867      	bhi.n	8005830 <HAL_TIM_ConfigClockSource+0x16c>
 8005760:	2b00      	cmp	r3, #0
 8005762:	d05c      	beq.n	800581e <HAL_TIM_ConfigClockSource+0x15a>
 8005764:	2b10      	cmp	r3, #16
 8005766:	d05a      	beq.n	800581e <HAL_TIM_ConfigClockSource+0x15a>
 8005768:	e062      	b.n	8005830 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6818      	ldr	r0, [r3, #0]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	6899      	ldr	r1, [r3, #8]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	f000 f987 	bl	8005a8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800578c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	609a      	str	r2, [r3, #8]
      break;
 8005796:	e04f      	b.n	8005838 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6818      	ldr	r0, [r3, #0]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	6899      	ldr	r1, [r3, #8]
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	685a      	ldr	r2, [r3, #4]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	f000 f970 	bl	8005a8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	689a      	ldr	r2, [r3, #8]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057ba:	609a      	str	r2, [r3, #8]
      break;
 80057bc:	e03c      	b.n	8005838 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6818      	ldr	r0, [r3, #0]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	6859      	ldr	r1, [r3, #4]
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	461a      	mov	r2, r3
 80057cc:	f000 f8e4 	bl	8005998 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2150      	movs	r1, #80	; 0x50
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 f93d 	bl	8005a56 <TIM_ITRx_SetConfig>
      break;
 80057dc:	e02c      	b.n	8005838 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6818      	ldr	r0, [r3, #0]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	6859      	ldr	r1, [r3, #4]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	461a      	mov	r2, r3
 80057ec:	f000 f903 	bl	80059f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2160      	movs	r1, #96	; 0x60
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 f92d 	bl	8005a56 <TIM_ITRx_SetConfig>
      break;
 80057fc:	e01c      	b.n	8005838 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6818      	ldr	r0, [r3, #0]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	6859      	ldr	r1, [r3, #4]
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	461a      	mov	r2, r3
 800580c:	f000 f8c4 	bl	8005998 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2140      	movs	r1, #64	; 0x40
 8005816:	4618      	mov	r0, r3
 8005818:	f000 f91d 	bl	8005a56 <TIM_ITRx_SetConfig>
      break;
 800581c:	e00c      	b.n	8005838 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4619      	mov	r1, r3
 8005828:	4610      	mov	r0, r2
 800582a:	f000 f914 	bl	8005a56 <TIM_ITRx_SetConfig>
      break;
 800582e:	e003      	b.n	8005838 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	73fb      	strb	r3, [r7, #15]
      break;
 8005834:	e000      	b.n	8005838 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005836:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005848:	7bfb      	ldrb	r3, [r7, #15]
}
 800584a:	4618      	mov	r0, r3
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	fffeff88 	.word	0xfffeff88

08005858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a40      	ldr	r2, [pc, #256]	; (800596c <TIM_Base_SetConfig+0x114>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d013      	beq.n	8005898 <TIM_Base_SetConfig+0x40>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005876:	d00f      	beq.n	8005898 <TIM_Base_SetConfig+0x40>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a3d      	ldr	r2, [pc, #244]	; (8005970 <TIM_Base_SetConfig+0x118>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d00b      	beq.n	8005898 <TIM_Base_SetConfig+0x40>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a3c      	ldr	r2, [pc, #240]	; (8005974 <TIM_Base_SetConfig+0x11c>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d007      	beq.n	8005898 <TIM_Base_SetConfig+0x40>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a3b      	ldr	r2, [pc, #236]	; (8005978 <TIM_Base_SetConfig+0x120>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d003      	beq.n	8005898 <TIM_Base_SetConfig+0x40>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a3a      	ldr	r2, [pc, #232]	; (800597c <TIM_Base_SetConfig+0x124>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d108      	bne.n	80058aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800589e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a2f      	ldr	r2, [pc, #188]	; (800596c <TIM_Base_SetConfig+0x114>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d02b      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058b8:	d027      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a2c      	ldr	r2, [pc, #176]	; (8005970 <TIM_Base_SetConfig+0x118>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d023      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a2b      	ldr	r2, [pc, #172]	; (8005974 <TIM_Base_SetConfig+0x11c>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d01f      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a2a      	ldr	r2, [pc, #168]	; (8005978 <TIM_Base_SetConfig+0x120>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d01b      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a29      	ldr	r2, [pc, #164]	; (800597c <TIM_Base_SetConfig+0x124>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d017      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a28      	ldr	r2, [pc, #160]	; (8005980 <TIM_Base_SetConfig+0x128>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d013      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a27      	ldr	r2, [pc, #156]	; (8005984 <TIM_Base_SetConfig+0x12c>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d00f      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a26      	ldr	r2, [pc, #152]	; (8005988 <TIM_Base_SetConfig+0x130>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d00b      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a25      	ldr	r2, [pc, #148]	; (800598c <TIM_Base_SetConfig+0x134>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d007      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a24      	ldr	r2, [pc, #144]	; (8005990 <TIM_Base_SetConfig+0x138>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d003      	beq.n	800590a <TIM_Base_SetConfig+0xb2>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a23      	ldr	r2, [pc, #140]	; (8005994 <TIM_Base_SetConfig+0x13c>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d108      	bne.n	800591c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005910:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	4313      	orrs	r3, r2
 800591a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	4313      	orrs	r3, r2
 8005928:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	689a      	ldr	r2, [r3, #8]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a0a      	ldr	r2, [pc, #40]	; (800596c <TIM_Base_SetConfig+0x114>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d003      	beq.n	8005950 <TIM_Base_SetConfig+0xf8>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a0c      	ldr	r2, [pc, #48]	; (800597c <TIM_Base_SetConfig+0x124>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d103      	bne.n	8005958 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	691a      	ldr	r2, [r3, #16]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	615a      	str	r2, [r3, #20]
}
 800595e:	bf00      	nop
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	40010000 	.word	0x40010000
 8005970:	40000400 	.word	0x40000400
 8005974:	40000800 	.word	0x40000800
 8005978:	40000c00 	.word	0x40000c00
 800597c:	40010400 	.word	0x40010400
 8005980:	40014000 	.word	0x40014000
 8005984:	40014400 	.word	0x40014400
 8005988:	40014800 	.word	0x40014800
 800598c:	40001800 	.word	0x40001800
 8005990:	40001c00 	.word	0x40001c00
 8005994:	40002000 	.word	0x40002000

08005998 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005998:	b480      	push	{r7}
 800599a:	b087      	sub	sp, #28
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	f023 0201 	bic.w	r2, r3, #1
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	011b      	lsls	r3, r3, #4
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	f023 030a 	bic.w	r3, r3, #10
 80059d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	4313      	orrs	r3, r2
 80059dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	621a      	str	r2, [r3, #32]
}
 80059ea:	bf00      	nop
 80059ec:	371c      	adds	r7, #28
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b087      	sub	sp, #28
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	60f8      	str	r0, [r7, #12]
 80059fe:	60b9      	str	r1, [r7, #8]
 8005a00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	f023 0210 	bic.w	r2, r3, #16
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6a1b      	ldr	r3, [r3, #32]
 8005a18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	031b      	lsls	r3, r3, #12
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	011b      	lsls	r3, r3, #4
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	621a      	str	r2, [r3, #32]
}
 8005a4a:	bf00      	nop
 8005a4c:	371c      	adds	r7, #28
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b085      	sub	sp, #20
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
 8005a5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a6e:	683a      	ldr	r2, [r7, #0]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	f043 0307 	orr.w	r3, r3, #7
 8005a78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	609a      	str	r2, [r3, #8]
}
 8005a80:	bf00      	nop
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b087      	sub	sp, #28
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
 8005a98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005aa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	021a      	lsls	r2, r3, #8
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	431a      	orrs	r2, r3
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	609a      	str	r2, [r3, #8]
}
 8005ac0:	bf00      	nop
 8005ac2:	371c      	adds	r7, #28
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d101      	bne.n	8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	e06d      	b.n	8005bc0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2202      	movs	r2, #2
 8005af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a30      	ldr	r2, [pc, #192]	; (8005bcc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d004      	beq.n	8005b18 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a2f      	ldr	r2, [pc, #188]	; (8005bd0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d108      	bne.n	8005b2a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b1e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b30:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a20      	ldr	r2, [pc, #128]	; (8005bcc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d022      	beq.n	8005b94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b56:	d01d      	beq.n	8005b94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a1d      	ldr	r2, [pc, #116]	; (8005bd4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d018      	beq.n	8005b94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a1c      	ldr	r2, [pc, #112]	; (8005bd8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d013      	beq.n	8005b94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a1a      	ldr	r2, [pc, #104]	; (8005bdc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d00e      	beq.n	8005b94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a15      	ldr	r2, [pc, #84]	; (8005bd0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d009      	beq.n	8005b94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a16      	ldr	r2, [pc, #88]	; (8005be0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d004      	beq.n	8005b94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a15      	ldr	r2, [pc, #84]	; (8005be4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d10c      	bne.n	8005bae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b9a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68ba      	ldr	r2, [r7, #8]
 8005bac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3714      	adds	r7, #20
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	40010000 	.word	0x40010000
 8005bd0:	40010400 	.word	0x40010400
 8005bd4:	40000400 	.word	0x40000400
 8005bd8:	40000800 	.word	0x40000800
 8005bdc:	40000c00 	.word	0x40000c00
 8005be0:	40014000 	.word	0x40014000
 8005be4:	40001800 	.word	0x40001800

08005be8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e040      	b.n	8005c7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d106      	bne.n	8005c10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7fc fd6a 	bl	80026e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2224      	movs	r2, #36	; 0x24
 8005c14:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 0201 	bic.w	r2, r2, #1
 8005c24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f8b0 	bl	8005d8c <UART_SetConfig>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d101      	bne.n	8005c36 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e022      	b.n	8005c7c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d002      	beq.n	8005c44 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 fb08 	bl	8006254 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685a      	ldr	r2, [r3, #4]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	689a      	ldr	r2, [r3, #8]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f042 0201 	orr.w	r2, r2, #1
 8005c72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 fb8f 	bl	8006398 <UART_CheckIdleState>
 8005c7a:	4603      	mov	r3, r0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3708      	adds	r7, #8
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b08a      	sub	sp, #40	; 0x28
 8005c88:	af02      	add	r7, sp, #8
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	603b      	str	r3, [r7, #0]
 8005c90:	4613      	mov	r3, r2
 8005c92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c98:	2b20      	cmp	r3, #32
 8005c9a:	d171      	bne.n	8005d80 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d002      	beq.n	8005ca8 <HAL_UART_Transmit+0x24>
 8005ca2:	88fb      	ldrh	r3, [r7, #6]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d101      	bne.n	8005cac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e06a      	b.n	8005d82 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2221      	movs	r2, #33	; 0x21
 8005cb8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cba:	f7fc fe3f 	bl	800293c <HAL_GetTick>
 8005cbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	88fa      	ldrh	r2, [r7, #6]
 8005cc4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	88fa      	ldrh	r2, [r7, #6]
 8005ccc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cd8:	d108      	bne.n	8005cec <HAL_UART_Transmit+0x68>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d104      	bne.n	8005cec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	61bb      	str	r3, [r7, #24]
 8005cea:	e003      	b.n	8005cf4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005cf4:	e02c      	b.n	8005d50 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	9300      	str	r3, [sp, #0]
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	2180      	movs	r1, #128	; 0x80
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f000 fb96 	bl	8006432 <UART_WaitOnFlagUntilTimeout>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d001      	beq.n	8005d10 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e038      	b.n	8005d82 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10b      	bne.n	8005d2e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	881b      	ldrh	r3, [r3, #0]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d24:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	3302      	adds	r3, #2
 8005d2a:	61bb      	str	r3, [r7, #24]
 8005d2c:	e007      	b.n	8005d3e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	781a      	ldrb	r2, [r3, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	3b01      	subs	r3, #1
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1cc      	bne.n	8005cf6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	9300      	str	r3, [sp, #0]
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	2200      	movs	r2, #0
 8005d64:	2140      	movs	r1, #64	; 0x40
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	f000 fb63 	bl	8006432 <UART_WaitOnFlagUntilTimeout>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d001      	beq.n	8005d76 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e005      	b.n	8005d82 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2220      	movs	r2, #32
 8005d7a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	e000      	b.n	8005d82 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005d80:	2302      	movs	r3, #2
  }
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3720      	adds	r7, #32
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
	...

08005d8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b088      	sub	sp, #32
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d94:	2300      	movs	r3, #0
 8005d96:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	431a      	orrs	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	431a      	orrs	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	69db      	ldr	r3, [r3, #28]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	4ba6      	ldr	r3, [pc, #664]	; (8006050 <UART_SetConfig+0x2c4>)
 8005db8:	4013      	ands	r3, r2
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	6812      	ldr	r2, [r2, #0]
 8005dbe:	6979      	ldr	r1, [r7, #20]
 8005dc0:	430b      	orrs	r3, r1
 8005dc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68da      	ldr	r2, [r3, #12]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a1b      	ldr	r3, [r3, #32]
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a94      	ldr	r2, [pc, #592]	; (8006054 <UART_SetConfig+0x2c8>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d120      	bne.n	8005e4a <UART_SetConfig+0xbe>
 8005e08:	4b93      	ldr	r3, [pc, #588]	; (8006058 <UART_SetConfig+0x2cc>)
 8005e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e0e:	f003 0303 	and.w	r3, r3, #3
 8005e12:	2b03      	cmp	r3, #3
 8005e14:	d816      	bhi.n	8005e44 <UART_SetConfig+0xb8>
 8005e16:	a201      	add	r2, pc, #4	; (adr r2, 8005e1c <UART_SetConfig+0x90>)
 8005e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1c:	08005e2d 	.word	0x08005e2d
 8005e20:	08005e39 	.word	0x08005e39
 8005e24:	08005e33 	.word	0x08005e33
 8005e28:	08005e3f 	.word	0x08005e3f
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	77fb      	strb	r3, [r7, #31]
 8005e30:	e150      	b.n	80060d4 <UART_SetConfig+0x348>
 8005e32:	2302      	movs	r3, #2
 8005e34:	77fb      	strb	r3, [r7, #31]
 8005e36:	e14d      	b.n	80060d4 <UART_SetConfig+0x348>
 8005e38:	2304      	movs	r3, #4
 8005e3a:	77fb      	strb	r3, [r7, #31]
 8005e3c:	e14a      	b.n	80060d4 <UART_SetConfig+0x348>
 8005e3e:	2308      	movs	r3, #8
 8005e40:	77fb      	strb	r3, [r7, #31]
 8005e42:	e147      	b.n	80060d4 <UART_SetConfig+0x348>
 8005e44:	2310      	movs	r3, #16
 8005e46:	77fb      	strb	r3, [r7, #31]
 8005e48:	e144      	b.n	80060d4 <UART_SetConfig+0x348>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a83      	ldr	r2, [pc, #524]	; (800605c <UART_SetConfig+0x2d0>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d132      	bne.n	8005eba <UART_SetConfig+0x12e>
 8005e54:	4b80      	ldr	r3, [pc, #512]	; (8006058 <UART_SetConfig+0x2cc>)
 8005e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e5a:	f003 030c 	and.w	r3, r3, #12
 8005e5e:	2b0c      	cmp	r3, #12
 8005e60:	d828      	bhi.n	8005eb4 <UART_SetConfig+0x128>
 8005e62:	a201      	add	r2, pc, #4	; (adr r2, 8005e68 <UART_SetConfig+0xdc>)
 8005e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e68:	08005e9d 	.word	0x08005e9d
 8005e6c:	08005eb5 	.word	0x08005eb5
 8005e70:	08005eb5 	.word	0x08005eb5
 8005e74:	08005eb5 	.word	0x08005eb5
 8005e78:	08005ea9 	.word	0x08005ea9
 8005e7c:	08005eb5 	.word	0x08005eb5
 8005e80:	08005eb5 	.word	0x08005eb5
 8005e84:	08005eb5 	.word	0x08005eb5
 8005e88:	08005ea3 	.word	0x08005ea3
 8005e8c:	08005eb5 	.word	0x08005eb5
 8005e90:	08005eb5 	.word	0x08005eb5
 8005e94:	08005eb5 	.word	0x08005eb5
 8005e98:	08005eaf 	.word	0x08005eaf
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	77fb      	strb	r3, [r7, #31]
 8005ea0:	e118      	b.n	80060d4 <UART_SetConfig+0x348>
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	77fb      	strb	r3, [r7, #31]
 8005ea6:	e115      	b.n	80060d4 <UART_SetConfig+0x348>
 8005ea8:	2304      	movs	r3, #4
 8005eaa:	77fb      	strb	r3, [r7, #31]
 8005eac:	e112      	b.n	80060d4 <UART_SetConfig+0x348>
 8005eae:	2308      	movs	r3, #8
 8005eb0:	77fb      	strb	r3, [r7, #31]
 8005eb2:	e10f      	b.n	80060d4 <UART_SetConfig+0x348>
 8005eb4:	2310      	movs	r3, #16
 8005eb6:	77fb      	strb	r3, [r7, #31]
 8005eb8:	e10c      	b.n	80060d4 <UART_SetConfig+0x348>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a68      	ldr	r2, [pc, #416]	; (8006060 <UART_SetConfig+0x2d4>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d120      	bne.n	8005f06 <UART_SetConfig+0x17a>
 8005ec4:	4b64      	ldr	r3, [pc, #400]	; (8006058 <UART_SetConfig+0x2cc>)
 8005ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ece:	2b30      	cmp	r3, #48	; 0x30
 8005ed0:	d013      	beq.n	8005efa <UART_SetConfig+0x16e>
 8005ed2:	2b30      	cmp	r3, #48	; 0x30
 8005ed4:	d814      	bhi.n	8005f00 <UART_SetConfig+0x174>
 8005ed6:	2b20      	cmp	r3, #32
 8005ed8:	d009      	beq.n	8005eee <UART_SetConfig+0x162>
 8005eda:	2b20      	cmp	r3, #32
 8005edc:	d810      	bhi.n	8005f00 <UART_SetConfig+0x174>
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d002      	beq.n	8005ee8 <UART_SetConfig+0x15c>
 8005ee2:	2b10      	cmp	r3, #16
 8005ee4:	d006      	beq.n	8005ef4 <UART_SetConfig+0x168>
 8005ee6:	e00b      	b.n	8005f00 <UART_SetConfig+0x174>
 8005ee8:	2300      	movs	r3, #0
 8005eea:	77fb      	strb	r3, [r7, #31]
 8005eec:	e0f2      	b.n	80060d4 <UART_SetConfig+0x348>
 8005eee:	2302      	movs	r3, #2
 8005ef0:	77fb      	strb	r3, [r7, #31]
 8005ef2:	e0ef      	b.n	80060d4 <UART_SetConfig+0x348>
 8005ef4:	2304      	movs	r3, #4
 8005ef6:	77fb      	strb	r3, [r7, #31]
 8005ef8:	e0ec      	b.n	80060d4 <UART_SetConfig+0x348>
 8005efa:	2308      	movs	r3, #8
 8005efc:	77fb      	strb	r3, [r7, #31]
 8005efe:	e0e9      	b.n	80060d4 <UART_SetConfig+0x348>
 8005f00:	2310      	movs	r3, #16
 8005f02:	77fb      	strb	r3, [r7, #31]
 8005f04:	e0e6      	b.n	80060d4 <UART_SetConfig+0x348>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a56      	ldr	r2, [pc, #344]	; (8006064 <UART_SetConfig+0x2d8>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d120      	bne.n	8005f52 <UART_SetConfig+0x1c6>
 8005f10:	4b51      	ldr	r3, [pc, #324]	; (8006058 <UART_SetConfig+0x2cc>)
 8005f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f16:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005f1a:	2bc0      	cmp	r3, #192	; 0xc0
 8005f1c:	d013      	beq.n	8005f46 <UART_SetConfig+0x1ba>
 8005f1e:	2bc0      	cmp	r3, #192	; 0xc0
 8005f20:	d814      	bhi.n	8005f4c <UART_SetConfig+0x1c0>
 8005f22:	2b80      	cmp	r3, #128	; 0x80
 8005f24:	d009      	beq.n	8005f3a <UART_SetConfig+0x1ae>
 8005f26:	2b80      	cmp	r3, #128	; 0x80
 8005f28:	d810      	bhi.n	8005f4c <UART_SetConfig+0x1c0>
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d002      	beq.n	8005f34 <UART_SetConfig+0x1a8>
 8005f2e:	2b40      	cmp	r3, #64	; 0x40
 8005f30:	d006      	beq.n	8005f40 <UART_SetConfig+0x1b4>
 8005f32:	e00b      	b.n	8005f4c <UART_SetConfig+0x1c0>
 8005f34:	2300      	movs	r3, #0
 8005f36:	77fb      	strb	r3, [r7, #31]
 8005f38:	e0cc      	b.n	80060d4 <UART_SetConfig+0x348>
 8005f3a:	2302      	movs	r3, #2
 8005f3c:	77fb      	strb	r3, [r7, #31]
 8005f3e:	e0c9      	b.n	80060d4 <UART_SetConfig+0x348>
 8005f40:	2304      	movs	r3, #4
 8005f42:	77fb      	strb	r3, [r7, #31]
 8005f44:	e0c6      	b.n	80060d4 <UART_SetConfig+0x348>
 8005f46:	2308      	movs	r3, #8
 8005f48:	77fb      	strb	r3, [r7, #31]
 8005f4a:	e0c3      	b.n	80060d4 <UART_SetConfig+0x348>
 8005f4c:	2310      	movs	r3, #16
 8005f4e:	77fb      	strb	r3, [r7, #31]
 8005f50:	e0c0      	b.n	80060d4 <UART_SetConfig+0x348>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a44      	ldr	r2, [pc, #272]	; (8006068 <UART_SetConfig+0x2dc>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d125      	bne.n	8005fa8 <UART_SetConfig+0x21c>
 8005f5c:	4b3e      	ldr	r3, [pc, #248]	; (8006058 <UART_SetConfig+0x2cc>)
 8005f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f6a:	d017      	beq.n	8005f9c <UART_SetConfig+0x210>
 8005f6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f70:	d817      	bhi.n	8005fa2 <UART_SetConfig+0x216>
 8005f72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f76:	d00b      	beq.n	8005f90 <UART_SetConfig+0x204>
 8005f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f7c:	d811      	bhi.n	8005fa2 <UART_SetConfig+0x216>
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d003      	beq.n	8005f8a <UART_SetConfig+0x1fe>
 8005f82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f86:	d006      	beq.n	8005f96 <UART_SetConfig+0x20a>
 8005f88:	e00b      	b.n	8005fa2 <UART_SetConfig+0x216>
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	77fb      	strb	r3, [r7, #31]
 8005f8e:	e0a1      	b.n	80060d4 <UART_SetConfig+0x348>
 8005f90:	2302      	movs	r3, #2
 8005f92:	77fb      	strb	r3, [r7, #31]
 8005f94:	e09e      	b.n	80060d4 <UART_SetConfig+0x348>
 8005f96:	2304      	movs	r3, #4
 8005f98:	77fb      	strb	r3, [r7, #31]
 8005f9a:	e09b      	b.n	80060d4 <UART_SetConfig+0x348>
 8005f9c:	2308      	movs	r3, #8
 8005f9e:	77fb      	strb	r3, [r7, #31]
 8005fa0:	e098      	b.n	80060d4 <UART_SetConfig+0x348>
 8005fa2:	2310      	movs	r3, #16
 8005fa4:	77fb      	strb	r3, [r7, #31]
 8005fa6:	e095      	b.n	80060d4 <UART_SetConfig+0x348>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a2f      	ldr	r2, [pc, #188]	; (800606c <UART_SetConfig+0x2e0>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d125      	bne.n	8005ffe <UART_SetConfig+0x272>
 8005fb2:	4b29      	ldr	r3, [pc, #164]	; (8006058 <UART_SetConfig+0x2cc>)
 8005fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005fbc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fc0:	d017      	beq.n	8005ff2 <UART_SetConfig+0x266>
 8005fc2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fc6:	d817      	bhi.n	8005ff8 <UART_SetConfig+0x26c>
 8005fc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fcc:	d00b      	beq.n	8005fe6 <UART_SetConfig+0x25a>
 8005fce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fd2:	d811      	bhi.n	8005ff8 <UART_SetConfig+0x26c>
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d003      	beq.n	8005fe0 <UART_SetConfig+0x254>
 8005fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fdc:	d006      	beq.n	8005fec <UART_SetConfig+0x260>
 8005fde:	e00b      	b.n	8005ff8 <UART_SetConfig+0x26c>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	77fb      	strb	r3, [r7, #31]
 8005fe4:	e076      	b.n	80060d4 <UART_SetConfig+0x348>
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	77fb      	strb	r3, [r7, #31]
 8005fea:	e073      	b.n	80060d4 <UART_SetConfig+0x348>
 8005fec:	2304      	movs	r3, #4
 8005fee:	77fb      	strb	r3, [r7, #31]
 8005ff0:	e070      	b.n	80060d4 <UART_SetConfig+0x348>
 8005ff2:	2308      	movs	r3, #8
 8005ff4:	77fb      	strb	r3, [r7, #31]
 8005ff6:	e06d      	b.n	80060d4 <UART_SetConfig+0x348>
 8005ff8:	2310      	movs	r3, #16
 8005ffa:	77fb      	strb	r3, [r7, #31]
 8005ffc:	e06a      	b.n	80060d4 <UART_SetConfig+0x348>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a1b      	ldr	r2, [pc, #108]	; (8006070 <UART_SetConfig+0x2e4>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d138      	bne.n	800607a <UART_SetConfig+0x2ee>
 8006008:	4b13      	ldr	r3, [pc, #76]	; (8006058 <UART_SetConfig+0x2cc>)
 800600a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800600e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006012:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006016:	d017      	beq.n	8006048 <UART_SetConfig+0x2bc>
 8006018:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800601c:	d82a      	bhi.n	8006074 <UART_SetConfig+0x2e8>
 800601e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006022:	d00b      	beq.n	800603c <UART_SetConfig+0x2b0>
 8006024:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006028:	d824      	bhi.n	8006074 <UART_SetConfig+0x2e8>
 800602a:	2b00      	cmp	r3, #0
 800602c:	d003      	beq.n	8006036 <UART_SetConfig+0x2aa>
 800602e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006032:	d006      	beq.n	8006042 <UART_SetConfig+0x2b6>
 8006034:	e01e      	b.n	8006074 <UART_SetConfig+0x2e8>
 8006036:	2300      	movs	r3, #0
 8006038:	77fb      	strb	r3, [r7, #31]
 800603a:	e04b      	b.n	80060d4 <UART_SetConfig+0x348>
 800603c:	2302      	movs	r3, #2
 800603e:	77fb      	strb	r3, [r7, #31]
 8006040:	e048      	b.n	80060d4 <UART_SetConfig+0x348>
 8006042:	2304      	movs	r3, #4
 8006044:	77fb      	strb	r3, [r7, #31]
 8006046:	e045      	b.n	80060d4 <UART_SetConfig+0x348>
 8006048:	2308      	movs	r3, #8
 800604a:	77fb      	strb	r3, [r7, #31]
 800604c:	e042      	b.n	80060d4 <UART_SetConfig+0x348>
 800604e:	bf00      	nop
 8006050:	efff69f3 	.word	0xefff69f3
 8006054:	40011000 	.word	0x40011000
 8006058:	40023800 	.word	0x40023800
 800605c:	40004400 	.word	0x40004400
 8006060:	40004800 	.word	0x40004800
 8006064:	40004c00 	.word	0x40004c00
 8006068:	40005000 	.word	0x40005000
 800606c:	40011400 	.word	0x40011400
 8006070:	40007800 	.word	0x40007800
 8006074:	2310      	movs	r3, #16
 8006076:	77fb      	strb	r3, [r7, #31]
 8006078:	e02c      	b.n	80060d4 <UART_SetConfig+0x348>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a72      	ldr	r2, [pc, #456]	; (8006248 <UART_SetConfig+0x4bc>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d125      	bne.n	80060d0 <UART_SetConfig+0x344>
 8006084:	4b71      	ldr	r3, [pc, #452]	; (800624c <UART_SetConfig+0x4c0>)
 8006086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800608a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800608e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006092:	d017      	beq.n	80060c4 <UART_SetConfig+0x338>
 8006094:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006098:	d817      	bhi.n	80060ca <UART_SetConfig+0x33e>
 800609a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800609e:	d00b      	beq.n	80060b8 <UART_SetConfig+0x32c>
 80060a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060a4:	d811      	bhi.n	80060ca <UART_SetConfig+0x33e>
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d003      	beq.n	80060b2 <UART_SetConfig+0x326>
 80060aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060ae:	d006      	beq.n	80060be <UART_SetConfig+0x332>
 80060b0:	e00b      	b.n	80060ca <UART_SetConfig+0x33e>
 80060b2:	2300      	movs	r3, #0
 80060b4:	77fb      	strb	r3, [r7, #31]
 80060b6:	e00d      	b.n	80060d4 <UART_SetConfig+0x348>
 80060b8:	2302      	movs	r3, #2
 80060ba:	77fb      	strb	r3, [r7, #31]
 80060bc:	e00a      	b.n	80060d4 <UART_SetConfig+0x348>
 80060be:	2304      	movs	r3, #4
 80060c0:	77fb      	strb	r3, [r7, #31]
 80060c2:	e007      	b.n	80060d4 <UART_SetConfig+0x348>
 80060c4:	2308      	movs	r3, #8
 80060c6:	77fb      	strb	r3, [r7, #31]
 80060c8:	e004      	b.n	80060d4 <UART_SetConfig+0x348>
 80060ca:	2310      	movs	r3, #16
 80060cc:	77fb      	strb	r3, [r7, #31]
 80060ce:	e001      	b.n	80060d4 <UART_SetConfig+0x348>
 80060d0:	2310      	movs	r3, #16
 80060d2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	69db      	ldr	r3, [r3, #28]
 80060d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060dc:	d15b      	bne.n	8006196 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80060de:	7ffb      	ldrb	r3, [r7, #31]
 80060e0:	2b08      	cmp	r3, #8
 80060e2:	d828      	bhi.n	8006136 <UART_SetConfig+0x3aa>
 80060e4:	a201      	add	r2, pc, #4	; (adr r2, 80060ec <UART_SetConfig+0x360>)
 80060e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ea:	bf00      	nop
 80060ec:	08006111 	.word	0x08006111
 80060f0:	08006119 	.word	0x08006119
 80060f4:	08006121 	.word	0x08006121
 80060f8:	08006137 	.word	0x08006137
 80060fc:	08006127 	.word	0x08006127
 8006100:	08006137 	.word	0x08006137
 8006104:	08006137 	.word	0x08006137
 8006108:	08006137 	.word	0x08006137
 800610c:	0800612f 	.word	0x0800612f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006110:	f7fe fa64 	bl	80045dc <HAL_RCC_GetPCLK1Freq>
 8006114:	61b8      	str	r0, [r7, #24]
        break;
 8006116:	e013      	b.n	8006140 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006118:	f7fe fa74 	bl	8004604 <HAL_RCC_GetPCLK2Freq>
 800611c:	61b8      	str	r0, [r7, #24]
        break;
 800611e:	e00f      	b.n	8006140 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006120:	4b4b      	ldr	r3, [pc, #300]	; (8006250 <UART_SetConfig+0x4c4>)
 8006122:	61bb      	str	r3, [r7, #24]
        break;
 8006124:	e00c      	b.n	8006140 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006126:	f7fe f987 	bl	8004438 <HAL_RCC_GetSysClockFreq>
 800612a:	61b8      	str	r0, [r7, #24]
        break;
 800612c:	e008      	b.n	8006140 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800612e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006132:	61bb      	str	r3, [r7, #24]
        break;
 8006134:	e004      	b.n	8006140 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006136:	2300      	movs	r3, #0
 8006138:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	77bb      	strb	r3, [r7, #30]
        break;
 800613e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d074      	beq.n	8006230 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	005a      	lsls	r2, r3, #1
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	085b      	lsrs	r3, r3, #1
 8006150:	441a      	add	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	fbb2 f3f3 	udiv	r3, r2, r3
 800615a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	2b0f      	cmp	r3, #15
 8006160:	d916      	bls.n	8006190 <UART_SetConfig+0x404>
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006168:	d212      	bcs.n	8006190 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	b29b      	uxth	r3, r3
 800616e:	f023 030f 	bic.w	r3, r3, #15
 8006172:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	085b      	lsrs	r3, r3, #1
 8006178:	b29b      	uxth	r3, r3
 800617a:	f003 0307 	and.w	r3, r3, #7
 800617e:	b29a      	uxth	r2, r3
 8006180:	89fb      	ldrh	r3, [r7, #14]
 8006182:	4313      	orrs	r3, r2
 8006184:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	89fa      	ldrh	r2, [r7, #14]
 800618c:	60da      	str	r2, [r3, #12]
 800618e:	e04f      	b.n	8006230 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	77bb      	strb	r3, [r7, #30]
 8006194:	e04c      	b.n	8006230 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006196:	7ffb      	ldrb	r3, [r7, #31]
 8006198:	2b08      	cmp	r3, #8
 800619a:	d828      	bhi.n	80061ee <UART_SetConfig+0x462>
 800619c:	a201      	add	r2, pc, #4	; (adr r2, 80061a4 <UART_SetConfig+0x418>)
 800619e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a2:	bf00      	nop
 80061a4:	080061c9 	.word	0x080061c9
 80061a8:	080061d1 	.word	0x080061d1
 80061ac:	080061d9 	.word	0x080061d9
 80061b0:	080061ef 	.word	0x080061ef
 80061b4:	080061df 	.word	0x080061df
 80061b8:	080061ef 	.word	0x080061ef
 80061bc:	080061ef 	.word	0x080061ef
 80061c0:	080061ef 	.word	0x080061ef
 80061c4:	080061e7 	.word	0x080061e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061c8:	f7fe fa08 	bl	80045dc <HAL_RCC_GetPCLK1Freq>
 80061cc:	61b8      	str	r0, [r7, #24]
        break;
 80061ce:	e013      	b.n	80061f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061d0:	f7fe fa18 	bl	8004604 <HAL_RCC_GetPCLK2Freq>
 80061d4:	61b8      	str	r0, [r7, #24]
        break;
 80061d6:	e00f      	b.n	80061f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061d8:	4b1d      	ldr	r3, [pc, #116]	; (8006250 <UART_SetConfig+0x4c4>)
 80061da:	61bb      	str	r3, [r7, #24]
        break;
 80061dc:	e00c      	b.n	80061f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061de:	f7fe f92b 	bl	8004438 <HAL_RCC_GetSysClockFreq>
 80061e2:	61b8      	str	r0, [r7, #24]
        break;
 80061e4:	e008      	b.n	80061f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061ea:	61bb      	str	r3, [r7, #24]
        break;
 80061ec:	e004      	b.n	80061f8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80061ee:	2300      	movs	r3, #0
 80061f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	77bb      	strb	r3, [r7, #30]
        break;
 80061f6:	bf00      	nop
    }

    if (pclk != 0U)
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d018      	beq.n	8006230 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	085a      	lsrs	r2, r3, #1
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	441a      	add	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006210:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	2b0f      	cmp	r3, #15
 8006216:	d909      	bls.n	800622c <UART_SetConfig+0x4a0>
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800621e:	d205      	bcs.n	800622c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	b29a      	uxth	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	60da      	str	r2, [r3, #12]
 800622a:	e001      	b.n	8006230 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800623c:	7fbb      	ldrb	r3, [r7, #30]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3720      	adds	r7, #32
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	40007c00 	.word	0x40007c00
 800624c:	40023800 	.word	0x40023800
 8006250:	00f42400 	.word	0x00f42400

08006254 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006260:	f003 0301 	and.w	r3, r3, #1
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00a      	beq.n	800627e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	430a      	orrs	r2, r1
 800627c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006282:	f003 0302 	and.w	r3, r3, #2
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00a      	beq.n	80062a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	430a      	orrs	r2, r1
 800629e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a4:	f003 0304 	and.w	r3, r3, #4
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00a      	beq.n	80062c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	430a      	orrs	r2, r1
 80062c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c6:	f003 0308 	and.w	r3, r3, #8
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00a      	beq.n	80062e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	430a      	orrs	r2, r1
 80062e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e8:	f003 0310 	and.w	r3, r3, #16
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00a      	beq.n	8006306 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	430a      	orrs	r2, r1
 8006304:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630a:	f003 0320 	and.w	r3, r3, #32
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00a      	beq.n	8006328 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	430a      	orrs	r2, r1
 8006326:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006330:	2b00      	cmp	r3, #0
 8006332:	d01a      	beq.n	800636a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	430a      	orrs	r2, r1
 8006348:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006352:	d10a      	bne.n	800636a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	430a      	orrs	r2, r1
 8006368:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00a      	beq.n	800638c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	430a      	orrs	r2, r1
 800638a:	605a      	str	r2, [r3, #4]
  }
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b086      	sub	sp, #24
 800639c:	af02      	add	r7, sp, #8
 800639e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063a8:	f7fc fac8 	bl	800293c <HAL_GetTick>
 80063ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0308 	and.w	r3, r3, #8
 80063b8:	2b08      	cmp	r3, #8
 80063ba:	d10e      	bne.n	80063da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063c0:	9300      	str	r3, [sp, #0]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 f831 	bl	8006432 <UART_WaitOnFlagUntilTimeout>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d001      	beq.n	80063da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e027      	b.n	800642a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0304 	and.w	r3, r3, #4
 80063e4:	2b04      	cmp	r3, #4
 80063e6:	d10e      	bne.n	8006406 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 f81b 	bl	8006432 <UART_WaitOnFlagUntilTimeout>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d001      	beq.n	8006406 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e011      	b.n	800642a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2220      	movs	r2, #32
 800640a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2220      	movs	r2, #32
 8006410:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b09c      	sub	sp, #112	; 0x70
 8006436:	af00      	add	r7, sp, #0
 8006438:	60f8      	str	r0, [r7, #12]
 800643a:	60b9      	str	r1, [r7, #8]
 800643c:	603b      	str	r3, [r7, #0]
 800643e:	4613      	mov	r3, r2
 8006440:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006442:	e0a7      	b.n	8006594 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006444:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644a:	f000 80a3 	beq.w	8006594 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800644e:	f7fc fa75 	bl	800293c <HAL_GetTick>
 8006452:	4602      	mov	r2, r0
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800645a:	429a      	cmp	r2, r3
 800645c:	d302      	bcc.n	8006464 <UART_WaitOnFlagUntilTimeout+0x32>
 800645e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006460:	2b00      	cmp	r3, #0
 8006462:	d13f      	bne.n	80064e4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800646c:	e853 3f00 	ldrex	r3, [r3]
 8006470:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006474:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006478:	667b      	str	r3, [r7, #100]	; 0x64
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	461a      	mov	r2, r3
 8006480:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006482:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006484:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006486:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006488:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800648a:	e841 2300 	strex	r3, r2, [r1]
 800648e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1e6      	bne.n	8006464 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	3308      	adds	r3, #8
 800649c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064a0:	e853 3f00 	ldrex	r3, [r3]
 80064a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a8:	f023 0301 	bic.w	r3, r3, #1
 80064ac:	663b      	str	r3, [r7, #96]	; 0x60
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3308      	adds	r3, #8
 80064b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80064b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80064b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80064bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064be:	e841 2300 	strex	r3, r2, [r1]
 80064c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80064c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1e5      	bne.n	8006496 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2220      	movs	r2, #32
 80064ce:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2220      	movs	r2, #32
 80064d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e068      	b.n	80065b6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0304 	and.w	r3, r3, #4
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d050      	beq.n	8006594 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	69db      	ldr	r3, [r3, #28]
 80064f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006500:	d148      	bne.n	8006594 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800650a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006514:	e853 3f00 	ldrex	r3, [r3]
 8006518:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006520:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	461a      	mov	r2, r3
 8006528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800652a:	637b      	str	r3, [r7, #52]	; 0x34
 800652c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006530:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006532:	e841 2300 	strex	r3, r2, [r1]
 8006536:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1e6      	bne.n	800650c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	3308      	adds	r3, #8
 8006544:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	e853 3f00 	ldrex	r3, [r3]
 800654c:	613b      	str	r3, [r7, #16]
   return(result);
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	f023 0301 	bic.w	r3, r3, #1
 8006554:	66bb      	str	r3, [r7, #104]	; 0x68
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	3308      	adds	r3, #8
 800655c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800655e:	623a      	str	r2, [r7, #32]
 8006560:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006562:	69f9      	ldr	r1, [r7, #28]
 8006564:	6a3a      	ldr	r2, [r7, #32]
 8006566:	e841 2300 	strex	r3, r2, [r1]
 800656a:	61bb      	str	r3, [r7, #24]
   return(result);
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1e5      	bne.n	800653e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2220      	movs	r2, #32
 8006576:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2220      	movs	r2, #32
 800657c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2220      	movs	r2, #32
 8006584:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e010      	b.n	80065b6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	69da      	ldr	r2, [r3, #28]
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	4013      	ands	r3, r2
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	bf0c      	ite	eq
 80065a4:	2301      	moveq	r3, #1
 80065a6:	2300      	movne	r3, #0
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	461a      	mov	r2, r3
 80065ac:	79fb      	ldrb	r3, [r7, #7]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	f43f af48 	beq.w	8006444 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3770      	adds	r7, #112	; 0x70
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
	...

080065c0 <__errno>:
 80065c0:	4b01      	ldr	r3, [pc, #4]	; (80065c8 <__errno+0x8>)
 80065c2:	6818      	ldr	r0, [r3, #0]
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	20000034 	.word	0x20000034

080065cc <__libc_init_array>:
 80065cc:	b570      	push	{r4, r5, r6, lr}
 80065ce:	4d0d      	ldr	r5, [pc, #52]	; (8006604 <__libc_init_array+0x38>)
 80065d0:	4c0d      	ldr	r4, [pc, #52]	; (8006608 <__libc_init_array+0x3c>)
 80065d2:	1b64      	subs	r4, r4, r5
 80065d4:	10a4      	asrs	r4, r4, #2
 80065d6:	2600      	movs	r6, #0
 80065d8:	42a6      	cmp	r6, r4
 80065da:	d109      	bne.n	80065f0 <__libc_init_array+0x24>
 80065dc:	4d0b      	ldr	r5, [pc, #44]	; (800660c <__libc_init_array+0x40>)
 80065de:	4c0c      	ldr	r4, [pc, #48]	; (8006610 <__libc_init_array+0x44>)
 80065e0:	f004 fb8a 	bl	800acf8 <_init>
 80065e4:	1b64      	subs	r4, r4, r5
 80065e6:	10a4      	asrs	r4, r4, #2
 80065e8:	2600      	movs	r6, #0
 80065ea:	42a6      	cmp	r6, r4
 80065ec:	d105      	bne.n	80065fa <__libc_init_array+0x2e>
 80065ee:	bd70      	pop	{r4, r5, r6, pc}
 80065f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80065f4:	4798      	blx	r3
 80065f6:	3601      	adds	r6, #1
 80065f8:	e7ee      	b.n	80065d8 <__libc_init_array+0xc>
 80065fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80065fe:	4798      	blx	r3
 8006600:	3601      	adds	r6, #1
 8006602:	e7f2      	b.n	80065ea <__libc_init_array+0x1e>
 8006604:	0800b1dc 	.word	0x0800b1dc
 8006608:	0800b1dc 	.word	0x0800b1dc
 800660c:	0800b1dc 	.word	0x0800b1dc
 8006610:	0800b1e0 	.word	0x0800b1e0

08006614 <memset>:
 8006614:	4402      	add	r2, r0
 8006616:	4603      	mov	r3, r0
 8006618:	4293      	cmp	r3, r2
 800661a:	d100      	bne.n	800661e <memset+0xa>
 800661c:	4770      	bx	lr
 800661e:	f803 1b01 	strb.w	r1, [r3], #1
 8006622:	e7f9      	b.n	8006618 <memset+0x4>

08006624 <__cvt>:
 8006624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006626:	ed2d 8b02 	vpush	{d8}
 800662a:	eeb0 8b40 	vmov.f64	d8, d0
 800662e:	b085      	sub	sp, #20
 8006630:	4617      	mov	r7, r2
 8006632:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006634:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006636:	ee18 2a90 	vmov	r2, s17
 800663a:	f025 0520 	bic.w	r5, r5, #32
 800663e:	2a00      	cmp	r2, #0
 8006640:	bfb6      	itet	lt
 8006642:	222d      	movlt	r2, #45	; 0x2d
 8006644:	2200      	movge	r2, #0
 8006646:	eeb1 8b40 	vneglt.f64	d8, d0
 800664a:	2d46      	cmp	r5, #70	; 0x46
 800664c:	460c      	mov	r4, r1
 800664e:	701a      	strb	r2, [r3, #0]
 8006650:	d004      	beq.n	800665c <__cvt+0x38>
 8006652:	2d45      	cmp	r5, #69	; 0x45
 8006654:	d100      	bne.n	8006658 <__cvt+0x34>
 8006656:	3401      	adds	r4, #1
 8006658:	2102      	movs	r1, #2
 800665a:	e000      	b.n	800665e <__cvt+0x3a>
 800665c:	2103      	movs	r1, #3
 800665e:	ab03      	add	r3, sp, #12
 8006660:	9301      	str	r3, [sp, #4]
 8006662:	ab02      	add	r3, sp, #8
 8006664:	9300      	str	r3, [sp, #0]
 8006666:	4622      	mov	r2, r4
 8006668:	4633      	mov	r3, r6
 800666a:	eeb0 0b48 	vmov.f64	d0, d8
 800666e:	f001 fd2f 	bl	80080d0 <_dtoa_r>
 8006672:	2d47      	cmp	r5, #71	; 0x47
 8006674:	d101      	bne.n	800667a <__cvt+0x56>
 8006676:	07fb      	lsls	r3, r7, #31
 8006678:	d51a      	bpl.n	80066b0 <__cvt+0x8c>
 800667a:	2d46      	cmp	r5, #70	; 0x46
 800667c:	eb00 0204 	add.w	r2, r0, r4
 8006680:	d10c      	bne.n	800669c <__cvt+0x78>
 8006682:	7803      	ldrb	r3, [r0, #0]
 8006684:	2b30      	cmp	r3, #48	; 0x30
 8006686:	d107      	bne.n	8006698 <__cvt+0x74>
 8006688:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800668c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006690:	bf1c      	itt	ne
 8006692:	f1c4 0401 	rsbne	r4, r4, #1
 8006696:	6034      	strne	r4, [r6, #0]
 8006698:	6833      	ldr	r3, [r6, #0]
 800669a:	441a      	add	r2, r3
 800669c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80066a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066a4:	bf08      	it	eq
 80066a6:	9203      	streq	r2, [sp, #12]
 80066a8:	2130      	movs	r1, #48	; 0x30
 80066aa:	9b03      	ldr	r3, [sp, #12]
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d307      	bcc.n	80066c0 <__cvt+0x9c>
 80066b0:	9b03      	ldr	r3, [sp, #12]
 80066b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066b4:	1a1b      	subs	r3, r3, r0
 80066b6:	6013      	str	r3, [r2, #0]
 80066b8:	b005      	add	sp, #20
 80066ba:	ecbd 8b02 	vpop	{d8}
 80066be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066c0:	1c5c      	adds	r4, r3, #1
 80066c2:	9403      	str	r4, [sp, #12]
 80066c4:	7019      	strb	r1, [r3, #0]
 80066c6:	e7f0      	b.n	80066aa <__cvt+0x86>

080066c8 <__exponent>:
 80066c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066ca:	4603      	mov	r3, r0
 80066cc:	2900      	cmp	r1, #0
 80066ce:	bfb8      	it	lt
 80066d0:	4249      	neglt	r1, r1
 80066d2:	f803 2b02 	strb.w	r2, [r3], #2
 80066d6:	bfb4      	ite	lt
 80066d8:	222d      	movlt	r2, #45	; 0x2d
 80066da:	222b      	movge	r2, #43	; 0x2b
 80066dc:	2909      	cmp	r1, #9
 80066de:	7042      	strb	r2, [r0, #1]
 80066e0:	dd2a      	ble.n	8006738 <__exponent+0x70>
 80066e2:	f10d 0407 	add.w	r4, sp, #7
 80066e6:	46a4      	mov	ip, r4
 80066e8:	270a      	movs	r7, #10
 80066ea:	46a6      	mov	lr, r4
 80066ec:	460a      	mov	r2, r1
 80066ee:	fb91 f6f7 	sdiv	r6, r1, r7
 80066f2:	fb07 1516 	mls	r5, r7, r6, r1
 80066f6:	3530      	adds	r5, #48	; 0x30
 80066f8:	2a63      	cmp	r2, #99	; 0x63
 80066fa:	f104 34ff 	add.w	r4, r4, #4294967295
 80066fe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006702:	4631      	mov	r1, r6
 8006704:	dcf1      	bgt.n	80066ea <__exponent+0x22>
 8006706:	3130      	adds	r1, #48	; 0x30
 8006708:	f1ae 0502 	sub.w	r5, lr, #2
 800670c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006710:	1c44      	adds	r4, r0, #1
 8006712:	4629      	mov	r1, r5
 8006714:	4561      	cmp	r1, ip
 8006716:	d30a      	bcc.n	800672e <__exponent+0x66>
 8006718:	f10d 0209 	add.w	r2, sp, #9
 800671c:	eba2 020e 	sub.w	r2, r2, lr
 8006720:	4565      	cmp	r5, ip
 8006722:	bf88      	it	hi
 8006724:	2200      	movhi	r2, #0
 8006726:	4413      	add	r3, r2
 8006728:	1a18      	subs	r0, r3, r0
 800672a:	b003      	add	sp, #12
 800672c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800672e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006732:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006736:	e7ed      	b.n	8006714 <__exponent+0x4c>
 8006738:	2330      	movs	r3, #48	; 0x30
 800673a:	3130      	adds	r1, #48	; 0x30
 800673c:	7083      	strb	r3, [r0, #2]
 800673e:	70c1      	strb	r1, [r0, #3]
 8006740:	1d03      	adds	r3, r0, #4
 8006742:	e7f1      	b.n	8006728 <__exponent+0x60>
 8006744:	0000      	movs	r0, r0
	...

08006748 <_printf_float>:
 8006748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800674c:	b08b      	sub	sp, #44	; 0x2c
 800674e:	460c      	mov	r4, r1
 8006750:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006754:	4616      	mov	r6, r2
 8006756:	461f      	mov	r7, r3
 8006758:	4605      	mov	r5, r0
 800675a:	f002 fd97 	bl	800928c <_localeconv_r>
 800675e:	f8d0 b000 	ldr.w	fp, [r0]
 8006762:	4658      	mov	r0, fp
 8006764:	f7f9 fd6c 	bl	8000240 <strlen>
 8006768:	2300      	movs	r3, #0
 800676a:	9308      	str	r3, [sp, #32]
 800676c:	f8d8 3000 	ldr.w	r3, [r8]
 8006770:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006774:	6822      	ldr	r2, [r4, #0]
 8006776:	3307      	adds	r3, #7
 8006778:	f023 0307 	bic.w	r3, r3, #7
 800677c:	f103 0108 	add.w	r1, r3, #8
 8006780:	f8c8 1000 	str.w	r1, [r8]
 8006784:	4682      	mov	sl, r0
 8006786:	e9d3 0100 	ldrd	r0, r1, [r3]
 800678a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800678e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80069f0 <_printf_float+0x2a8>
 8006792:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8006796:	eeb0 6bc0 	vabs.f64	d6, d0
 800679a:	eeb4 6b47 	vcmp.f64	d6, d7
 800679e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067a2:	dd24      	ble.n	80067ee <_printf_float+0xa6>
 80067a4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80067a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067ac:	d502      	bpl.n	80067b4 <_printf_float+0x6c>
 80067ae:	232d      	movs	r3, #45	; 0x2d
 80067b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067b4:	4b90      	ldr	r3, [pc, #576]	; (80069f8 <_printf_float+0x2b0>)
 80067b6:	4891      	ldr	r0, [pc, #580]	; (80069fc <_printf_float+0x2b4>)
 80067b8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80067bc:	bf94      	ite	ls
 80067be:	4698      	movls	r8, r3
 80067c0:	4680      	movhi	r8, r0
 80067c2:	2303      	movs	r3, #3
 80067c4:	6123      	str	r3, [r4, #16]
 80067c6:	f022 0204 	bic.w	r2, r2, #4
 80067ca:	2300      	movs	r3, #0
 80067cc:	6022      	str	r2, [r4, #0]
 80067ce:	9304      	str	r3, [sp, #16]
 80067d0:	9700      	str	r7, [sp, #0]
 80067d2:	4633      	mov	r3, r6
 80067d4:	aa09      	add	r2, sp, #36	; 0x24
 80067d6:	4621      	mov	r1, r4
 80067d8:	4628      	mov	r0, r5
 80067da:	f000 f9d3 	bl	8006b84 <_printf_common>
 80067de:	3001      	adds	r0, #1
 80067e0:	f040 808a 	bne.w	80068f8 <_printf_float+0x1b0>
 80067e4:	f04f 30ff 	mov.w	r0, #4294967295
 80067e8:	b00b      	add	sp, #44	; 0x2c
 80067ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ee:	eeb4 0b40 	vcmp.f64	d0, d0
 80067f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067f6:	d709      	bvc.n	800680c <_printf_float+0xc4>
 80067f8:	ee10 3a90 	vmov	r3, s1
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	bfbc      	itt	lt
 8006800:	232d      	movlt	r3, #45	; 0x2d
 8006802:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006806:	487e      	ldr	r0, [pc, #504]	; (8006a00 <_printf_float+0x2b8>)
 8006808:	4b7e      	ldr	r3, [pc, #504]	; (8006a04 <_printf_float+0x2bc>)
 800680a:	e7d5      	b.n	80067b8 <_printf_float+0x70>
 800680c:	6863      	ldr	r3, [r4, #4]
 800680e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006812:	9104      	str	r1, [sp, #16]
 8006814:	1c59      	adds	r1, r3, #1
 8006816:	d13c      	bne.n	8006892 <_printf_float+0x14a>
 8006818:	2306      	movs	r3, #6
 800681a:	6063      	str	r3, [r4, #4]
 800681c:	2300      	movs	r3, #0
 800681e:	9303      	str	r3, [sp, #12]
 8006820:	ab08      	add	r3, sp, #32
 8006822:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006826:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800682a:	ab07      	add	r3, sp, #28
 800682c:	6861      	ldr	r1, [r4, #4]
 800682e:	9300      	str	r3, [sp, #0]
 8006830:	6022      	str	r2, [r4, #0]
 8006832:	f10d 031b 	add.w	r3, sp, #27
 8006836:	4628      	mov	r0, r5
 8006838:	f7ff fef4 	bl	8006624 <__cvt>
 800683c:	9b04      	ldr	r3, [sp, #16]
 800683e:	9907      	ldr	r1, [sp, #28]
 8006840:	2b47      	cmp	r3, #71	; 0x47
 8006842:	4680      	mov	r8, r0
 8006844:	d108      	bne.n	8006858 <_printf_float+0x110>
 8006846:	1cc8      	adds	r0, r1, #3
 8006848:	db02      	blt.n	8006850 <_printf_float+0x108>
 800684a:	6863      	ldr	r3, [r4, #4]
 800684c:	4299      	cmp	r1, r3
 800684e:	dd41      	ble.n	80068d4 <_printf_float+0x18c>
 8006850:	f1a9 0902 	sub.w	r9, r9, #2
 8006854:	fa5f f989 	uxtb.w	r9, r9
 8006858:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800685c:	d820      	bhi.n	80068a0 <_printf_float+0x158>
 800685e:	3901      	subs	r1, #1
 8006860:	464a      	mov	r2, r9
 8006862:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006866:	9107      	str	r1, [sp, #28]
 8006868:	f7ff ff2e 	bl	80066c8 <__exponent>
 800686c:	9a08      	ldr	r2, [sp, #32]
 800686e:	9004      	str	r0, [sp, #16]
 8006870:	1813      	adds	r3, r2, r0
 8006872:	2a01      	cmp	r2, #1
 8006874:	6123      	str	r3, [r4, #16]
 8006876:	dc02      	bgt.n	800687e <_printf_float+0x136>
 8006878:	6822      	ldr	r2, [r4, #0]
 800687a:	07d2      	lsls	r2, r2, #31
 800687c:	d501      	bpl.n	8006882 <_printf_float+0x13a>
 800687e:	3301      	adds	r3, #1
 8006880:	6123      	str	r3, [r4, #16]
 8006882:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d0a2      	beq.n	80067d0 <_printf_float+0x88>
 800688a:	232d      	movs	r3, #45	; 0x2d
 800688c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006890:	e79e      	b.n	80067d0 <_printf_float+0x88>
 8006892:	9904      	ldr	r1, [sp, #16]
 8006894:	2947      	cmp	r1, #71	; 0x47
 8006896:	d1c1      	bne.n	800681c <_printf_float+0xd4>
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1bf      	bne.n	800681c <_printf_float+0xd4>
 800689c:	2301      	movs	r3, #1
 800689e:	e7bc      	b.n	800681a <_printf_float+0xd2>
 80068a0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80068a4:	d118      	bne.n	80068d8 <_printf_float+0x190>
 80068a6:	2900      	cmp	r1, #0
 80068a8:	6863      	ldr	r3, [r4, #4]
 80068aa:	dd0b      	ble.n	80068c4 <_printf_float+0x17c>
 80068ac:	6121      	str	r1, [r4, #16]
 80068ae:	b913      	cbnz	r3, 80068b6 <_printf_float+0x16e>
 80068b0:	6822      	ldr	r2, [r4, #0]
 80068b2:	07d0      	lsls	r0, r2, #31
 80068b4:	d502      	bpl.n	80068bc <_printf_float+0x174>
 80068b6:	3301      	adds	r3, #1
 80068b8:	440b      	add	r3, r1
 80068ba:	6123      	str	r3, [r4, #16]
 80068bc:	2300      	movs	r3, #0
 80068be:	65a1      	str	r1, [r4, #88]	; 0x58
 80068c0:	9304      	str	r3, [sp, #16]
 80068c2:	e7de      	b.n	8006882 <_printf_float+0x13a>
 80068c4:	b913      	cbnz	r3, 80068cc <_printf_float+0x184>
 80068c6:	6822      	ldr	r2, [r4, #0]
 80068c8:	07d2      	lsls	r2, r2, #31
 80068ca:	d501      	bpl.n	80068d0 <_printf_float+0x188>
 80068cc:	3302      	adds	r3, #2
 80068ce:	e7f4      	b.n	80068ba <_printf_float+0x172>
 80068d0:	2301      	movs	r3, #1
 80068d2:	e7f2      	b.n	80068ba <_printf_float+0x172>
 80068d4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80068d8:	9b08      	ldr	r3, [sp, #32]
 80068da:	4299      	cmp	r1, r3
 80068dc:	db05      	blt.n	80068ea <_printf_float+0x1a2>
 80068de:	6823      	ldr	r3, [r4, #0]
 80068e0:	6121      	str	r1, [r4, #16]
 80068e2:	07d8      	lsls	r0, r3, #31
 80068e4:	d5ea      	bpl.n	80068bc <_printf_float+0x174>
 80068e6:	1c4b      	adds	r3, r1, #1
 80068e8:	e7e7      	b.n	80068ba <_printf_float+0x172>
 80068ea:	2900      	cmp	r1, #0
 80068ec:	bfd4      	ite	le
 80068ee:	f1c1 0202 	rsble	r2, r1, #2
 80068f2:	2201      	movgt	r2, #1
 80068f4:	4413      	add	r3, r2
 80068f6:	e7e0      	b.n	80068ba <_printf_float+0x172>
 80068f8:	6823      	ldr	r3, [r4, #0]
 80068fa:	055a      	lsls	r2, r3, #21
 80068fc:	d407      	bmi.n	800690e <_printf_float+0x1c6>
 80068fe:	6923      	ldr	r3, [r4, #16]
 8006900:	4642      	mov	r2, r8
 8006902:	4631      	mov	r1, r6
 8006904:	4628      	mov	r0, r5
 8006906:	47b8      	blx	r7
 8006908:	3001      	adds	r0, #1
 800690a:	d12a      	bne.n	8006962 <_printf_float+0x21a>
 800690c:	e76a      	b.n	80067e4 <_printf_float+0x9c>
 800690e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006912:	f240 80e2 	bls.w	8006ada <_printf_float+0x392>
 8006916:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800691a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800691e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006922:	d133      	bne.n	800698c <_printf_float+0x244>
 8006924:	4a38      	ldr	r2, [pc, #224]	; (8006a08 <_printf_float+0x2c0>)
 8006926:	2301      	movs	r3, #1
 8006928:	4631      	mov	r1, r6
 800692a:	4628      	mov	r0, r5
 800692c:	47b8      	blx	r7
 800692e:	3001      	adds	r0, #1
 8006930:	f43f af58 	beq.w	80067e4 <_printf_float+0x9c>
 8006934:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006938:	429a      	cmp	r2, r3
 800693a:	db02      	blt.n	8006942 <_printf_float+0x1fa>
 800693c:	6823      	ldr	r3, [r4, #0]
 800693e:	07d8      	lsls	r0, r3, #31
 8006940:	d50f      	bpl.n	8006962 <_printf_float+0x21a>
 8006942:	4653      	mov	r3, sl
 8006944:	465a      	mov	r2, fp
 8006946:	4631      	mov	r1, r6
 8006948:	4628      	mov	r0, r5
 800694a:	47b8      	blx	r7
 800694c:	3001      	adds	r0, #1
 800694e:	f43f af49 	beq.w	80067e4 <_printf_float+0x9c>
 8006952:	f04f 0800 	mov.w	r8, #0
 8006956:	f104 091a 	add.w	r9, r4, #26
 800695a:	9b08      	ldr	r3, [sp, #32]
 800695c:	3b01      	subs	r3, #1
 800695e:	4543      	cmp	r3, r8
 8006960:	dc09      	bgt.n	8006976 <_printf_float+0x22e>
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	079b      	lsls	r3, r3, #30
 8006966:	f100 8108 	bmi.w	8006b7a <_printf_float+0x432>
 800696a:	68e0      	ldr	r0, [r4, #12]
 800696c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800696e:	4298      	cmp	r0, r3
 8006970:	bfb8      	it	lt
 8006972:	4618      	movlt	r0, r3
 8006974:	e738      	b.n	80067e8 <_printf_float+0xa0>
 8006976:	2301      	movs	r3, #1
 8006978:	464a      	mov	r2, r9
 800697a:	4631      	mov	r1, r6
 800697c:	4628      	mov	r0, r5
 800697e:	47b8      	blx	r7
 8006980:	3001      	adds	r0, #1
 8006982:	f43f af2f 	beq.w	80067e4 <_printf_float+0x9c>
 8006986:	f108 0801 	add.w	r8, r8, #1
 800698a:	e7e6      	b.n	800695a <_printf_float+0x212>
 800698c:	9b07      	ldr	r3, [sp, #28]
 800698e:	2b00      	cmp	r3, #0
 8006990:	dc3c      	bgt.n	8006a0c <_printf_float+0x2c4>
 8006992:	4a1d      	ldr	r2, [pc, #116]	; (8006a08 <_printf_float+0x2c0>)
 8006994:	2301      	movs	r3, #1
 8006996:	4631      	mov	r1, r6
 8006998:	4628      	mov	r0, r5
 800699a:	47b8      	blx	r7
 800699c:	3001      	adds	r0, #1
 800699e:	f43f af21 	beq.w	80067e4 <_printf_float+0x9c>
 80069a2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	d102      	bne.n	80069b0 <_printf_float+0x268>
 80069aa:	6823      	ldr	r3, [r4, #0]
 80069ac:	07d9      	lsls	r1, r3, #31
 80069ae:	d5d8      	bpl.n	8006962 <_printf_float+0x21a>
 80069b0:	4653      	mov	r3, sl
 80069b2:	465a      	mov	r2, fp
 80069b4:	4631      	mov	r1, r6
 80069b6:	4628      	mov	r0, r5
 80069b8:	47b8      	blx	r7
 80069ba:	3001      	adds	r0, #1
 80069bc:	f43f af12 	beq.w	80067e4 <_printf_float+0x9c>
 80069c0:	f04f 0900 	mov.w	r9, #0
 80069c4:	f104 0a1a 	add.w	sl, r4, #26
 80069c8:	9b07      	ldr	r3, [sp, #28]
 80069ca:	425b      	negs	r3, r3
 80069cc:	454b      	cmp	r3, r9
 80069ce:	dc01      	bgt.n	80069d4 <_printf_float+0x28c>
 80069d0:	9b08      	ldr	r3, [sp, #32]
 80069d2:	e795      	b.n	8006900 <_printf_float+0x1b8>
 80069d4:	2301      	movs	r3, #1
 80069d6:	4652      	mov	r2, sl
 80069d8:	4631      	mov	r1, r6
 80069da:	4628      	mov	r0, r5
 80069dc:	47b8      	blx	r7
 80069de:	3001      	adds	r0, #1
 80069e0:	f43f af00 	beq.w	80067e4 <_printf_float+0x9c>
 80069e4:	f109 0901 	add.w	r9, r9, #1
 80069e8:	e7ee      	b.n	80069c8 <_printf_float+0x280>
 80069ea:	bf00      	nop
 80069ec:	f3af 8000 	nop.w
 80069f0:	ffffffff 	.word	0xffffffff
 80069f4:	7fefffff 	.word	0x7fefffff
 80069f8:	0800ad34 	.word	0x0800ad34
 80069fc:	0800ad38 	.word	0x0800ad38
 8006a00:	0800ad40 	.word	0x0800ad40
 8006a04:	0800ad3c 	.word	0x0800ad3c
 8006a08:	0800ad44 	.word	0x0800ad44
 8006a0c:	9a08      	ldr	r2, [sp, #32]
 8006a0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a10:	429a      	cmp	r2, r3
 8006a12:	bfa8      	it	ge
 8006a14:	461a      	movge	r2, r3
 8006a16:	2a00      	cmp	r2, #0
 8006a18:	4691      	mov	r9, r2
 8006a1a:	dc38      	bgt.n	8006a8e <_printf_float+0x346>
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	9305      	str	r3, [sp, #20]
 8006a20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a24:	f104 021a 	add.w	r2, r4, #26
 8006a28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a2a:	9905      	ldr	r1, [sp, #20]
 8006a2c:	9304      	str	r3, [sp, #16]
 8006a2e:	eba3 0309 	sub.w	r3, r3, r9
 8006a32:	428b      	cmp	r3, r1
 8006a34:	dc33      	bgt.n	8006a9e <_printf_float+0x356>
 8006a36:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	db3c      	blt.n	8006ab8 <_printf_float+0x370>
 8006a3e:	6823      	ldr	r3, [r4, #0]
 8006a40:	07da      	lsls	r2, r3, #31
 8006a42:	d439      	bmi.n	8006ab8 <_printf_float+0x370>
 8006a44:	9b08      	ldr	r3, [sp, #32]
 8006a46:	9a04      	ldr	r2, [sp, #16]
 8006a48:	9907      	ldr	r1, [sp, #28]
 8006a4a:	1a9a      	subs	r2, r3, r2
 8006a4c:	eba3 0901 	sub.w	r9, r3, r1
 8006a50:	4591      	cmp	r9, r2
 8006a52:	bfa8      	it	ge
 8006a54:	4691      	movge	r9, r2
 8006a56:	f1b9 0f00 	cmp.w	r9, #0
 8006a5a:	dc35      	bgt.n	8006ac8 <_printf_float+0x380>
 8006a5c:	f04f 0800 	mov.w	r8, #0
 8006a60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a64:	f104 0a1a 	add.w	sl, r4, #26
 8006a68:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006a6c:	1a9b      	subs	r3, r3, r2
 8006a6e:	eba3 0309 	sub.w	r3, r3, r9
 8006a72:	4543      	cmp	r3, r8
 8006a74:	f77f af75 	ble.w	8006962 <_printf_float+0x21a>
 8006a78:	2301      	movs	r3, #1
 8006a7a:	4652      	mov	r2, sl
 8006a7c:	4631      	mov	r1, r6
 8006a7e:	4628      	mov	r0, r5
 8006a80:	47b8      	blx	r7
 8006a82:	3001      	adds	r0, #1
 8006a84:	f43f aeae 	beq.w	80067e4 <_printf_float+0x9c>
 8006a88:	f108 0801 	add.w	r8, r8, #1
 8006a8c:	e7ec      	b.n	8006a68 <_printf_float+0x320>
 8006a8e:	4613      	mov	r3, r2
 8006a90:	4631      	mov	r1, r6
 8006a92:	4642      	mov	r2, r8
 8006a94:	4628      	mov	r0, r5
 8006a96:	47b8      	blx	r7
 8006a98:	3001      	adds	r0, #1
 8006a9a:	d1bf      	bne.n	8006a1c <_printf_float+0x2d4>
 8006a9c:	e6a2      	b.n	80067e4 <_printf_float+0x9c>
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	4631      	mov	r1, r6
 8006aa2:	4628      	mov	r0, r5
 8006aa4:	9204      	str	r2, [sp, #16]
 8006aa6:	47b8      	blx	r7
 8006aa8:	3001      	adds	r0, #1
 8006aaa:	f43f ae9b 	beq.w	80067e4 <_printf_float+0x9c>
 8006aae:	9b05      	ldr	r3, [sp, #20]
 8006ab0:	9a04      	ldr	r2, [sp, #16]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	9305      	str	r3, [sp, #20]
 8006ab6:	e7b7      	b.n	8006a28 <_printf_float+0x2e0>
 8006ab8:	4653      	mov	r3, sl
 8006aba:	465a      	mov	r2, fp
 8006abc:	4631      	mov	r1, r6
 8006abe:	4628      	mov	r0, r5
 8006ac0:	47b8      	blx	r7
 8006ac2:	3001      	adds	r0, #1
 8006ac4:	d1be      	bne.n	8006a44 <_printf_float+0x2fc>
 8006ac6:	e68d      	b.n	80067e4 <_printf_float+0x9c>
 8006ac8:	9a04      	ldr	r2, [sp, #16]
 8006aca:	464b      	mov	r3, r9
 8006acc:	4442      	add	r2, r8
 8006ace:	4631      	mov	r1, r6
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	47b8      	blx	r7
 8006ad4:	3001      	adds	r0, #1
 8006ad6:	d1c1      	bne.n	8006a5c <_printf_float+0x314>
 8006ad8:	e684      	b.n	80067e4 <_printf_float+0x9c>
 8006ada:	9a08      	ldr	r2, [sp, #32]
 8006adc:	2a01      	cmp	r2, #1
 8006ade:	dc01      	bgt.n	8006ae4 <_printf_float+0x39c>
 8006ae0:	07db      	lsls	r3, r3, #31
 8006ae2:	d537      	bpl.n	8006b54 <_printf_float+0x40c>
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	4642      	mov	r2, r8
 8006ae8:	4631      	mov	r1, r6
 8006aea:	4628      	mov	r0, r5
 8006aec:	47b8      	blx	r7
 8006aee:	3001      	adds	r0, #1
 8006af0:	f43f ae78 	beq.w	80067e4 <_printf_float+0x9c>
 8006af4:	4653      	mov	r3, sl
 8006af6:	465a      	mov	r2, fp
 8006af8:	4631      	mov	r1, r6
 8006afa:	4628      	mov	r0, r5
 8006afc:	47b8      	blx	r7
 8006afe:	3001      	adds	r0, #1
 8006b00:	f43f ae70 	beq.w	80067e4 <_printf_float+0x9c>
 8006b04:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006b08:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b10:	d01b      	beq.n	8006b4a <_printf_float+0x402>
 8006b12:	9b08      	ldr	r3, [sp, #32]
 8006b14:	f108 0201 	add.w	r2, r8, #1
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	4631      	mov	r1, r6
 8006b1c:	4628      	mov	r0, r5
 8006b1e:	47b8      	blx	r7
 8006b20:	3001      	adds	r0, #1
 8006b22:	d10e      	bne.n	8006b42 <_printf_float+0x3fa>
 8006b24:	e65e      	b.n	80067e4 <_printf_float+0x9c>
 8006b26:	2301      	movs	r3, #1
 8006b28:	464a      	mov	r2, r9
 8006b2a:	4631      	mov	r1, r6
 8006b2c:	4628      	mov	r0, r5
 8006b2e:	47b8      	blx	r7
 8006b30:	3001      	adds	r0, #1
 8006b32:	f43f ae57 	beq.w	80067e4 <_printf_float+0x9c>
 8006b36:	f108 0801 	add.w	r8, r8, #1
 8006b3a:	9b08      	ldr	r3, [sp, #32]
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	4543      	cmp	r3, r8
 8006b40:	dcf1      	bgt.n	8006b26 <_printf_float+0x3de>
 8006b42:	9b04      	ldr	r3, [sp, #16]
 8006b44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006b48:	e6db      	b.n	8006902 <_printf_float+0x1ba>
 8006b4a:	f04f 0800 	mov.w	r8, #0
 8006b4e:	f104 091a 	add.w	r9, r4, #26
 8006b52:	e7f2      	b.n	8006b3a <_printf_float+0x3f2>
 8006b54:	2301      	movs	r3, #1
 8006b56:	4642      	mov	r2, r8
 8006b58:	e7df      	b.n	8006b1a <_printf_float+0x3d2>
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	464a      	mov	r2, r9
 8006b5e:	4631      	mov	r1, r6
 8006b60:	4628      	mov	r0, r5
 8006b62:	47b8      	blx	r7
 8006b64:	3001      	adds	r0, #1
 8006b66:	f43f ae3d 	beq.w	80067e4 <_printf_float+0x9c>
 8006b6a:	f108 0801 	add.w	r8, r8, #1
 8006b6e:	68e3      	ldr	r3, [r4, #12]
 8006b70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b72:	1a5b      	subs	r3, r3, r1
 8006b74:	4543      	cmp	r3, r8
 8006b76:	dcf0      	bgt.n	8006b5a <_printf_float+0x412>
 8006b78:	e6f7      	b.n	800696a <_printf_float+0x222>
 8006b7a:	f04f 0800 	mov.w	r8, #0
 8006b7e:	f104 0919 	add.w	r9, r4, #25
 8006b82:	e7f4      	b.n	8006b6e <_printf_float+0x426>

08006b84 <_printf_common>:
 8006b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b88:	4616      	mov	r6, r2
 8006b8a:	4699      	mov	r9, r3
 8006b8c:	688a      	ldr	r2, [r1, #8]
 8006b8e:	690b      	ldr	r3, [r1, #16]
 8006b90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b94:	4293      	cmp	r3, r2
 8006b96:	bfb8      	it	lt
 8006b98:	4613      	movlt	r3, r2
 8006b9a:	6033      	str	r3, [r6, #0]
 8006b9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ba0:	4607      	mov	r7, r0
 8006ba2:	460c      	mov	r4, r1
 8006ba4:	b10a      	cbz	r2, 8006baa <_printf_common+0x26>
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	6033      	str	r3, [r6, #0]
 8006baa:	6823      	ldr	r3, [r4, #0]
 8006bac:	0699      	lsls	r1, r3, #26
 8006bae:	bf42      	ittt	mi
 8006bb0:	6833      	ldrmi	r3, [r6, #0]
 8006bb2:	3302      	addmi	r3, #2
 8006bb4:	6033      	strmi	r3, [r6, #0]
 8006bb6:	6825      	ldr	r5, [r4, #0]
 8006bb8:	f015 0506 	ands.w	r5, r5, #6
 8006bbc:	d106      	bne.n	8006bcc <_printf_common+0x48>
 8006bbe:	f104 0a19 	add.w	sl, r4, #25
 8006bc2:	68e3      	ldr	r3, [r4, #12]
 8006bc4:	6832      	ldr	r2, [r6, #0]
 8006bc6:	1a9b      	subs	r3, r3, r2
 8006bc8:	42ab      	cmp	r3, r5
 8006bca:	dc26      	bgt.n	8006c1a <_printf_common+0x96>
 8006bcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006bd0:	1e13      	subs	r3, r2, #0
 8006bd2:	6822      	ldr	r2, [r4, #0]
 8006bd4:	bf18      	it	ne
 8006bd6:	2301      	movne	r3, #1
 8006bd8:	0692      	lsls	r2, r2, #26
 8006bda:	d42b      	bmi.n	8006c34 <_printf_common+0xb0>
 8006bdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006be0:	4649      	mov	r1, r9
 8006be2:	4638      	mov	r0, r7
 8006be4:	47c0      	blx	r8
 8006be6:	3001      	adds	r0, #1
 8006be8:	d01e      	beq.n	8006c28 <_printf_common+0xa4>
 8006bea:	6823      	ldr	r3, [r4, #0]
 8006bec:	68e5      	ldr	r5, [r4, #12]
 8006bee:	6832      	ldr	r2, [r6, #0]
 8006bf0:	f003 0306 	and.w	r3, r3, #6
 8006bf4:	2b04      	cmp	r3, #4
 8006bf6:	bf08      	it	eq
 8006bf8:	1aad      	subeq	r5, r5, r2
 8006bfa:	68a3      	ldr	r3, [r4, #8]
 8006bfc:	6922      	ldr	r2, [r4, #16]
 8006bfe:	bf0c      	ite	eq
 8006c00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c04:	2500      	movne	r5, #0
 8006c06:	4293      	cmp	r3, r2
 8006c08:	bfc4      	itt	gt
 8006c0a:	1a9b      	subgt	r3, r3, r2
 8006c0c:	18ed      	addgt	r5, r5, r3
 8006c0e:	2600      	movs	r6, #0
 8006c10:	341a      	adds	r4, #26
 8006c12:	42b5      	cmp	r5, r6
 8006c14:	d11a      	bne.n	8006c4c <_printf_common+0xc8>
 8006c16:	2000      	movs	r0, #0
 8006c18:	e008      	b.n	8006c2c <_printf_common+0xa8>
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	4652      	mov	r2, sl
 8006c1e:	4649      	mov	r1, r9
 8006c20:	4638      	mov	r0, r7
 8006c22:	47c0      	blx	r8
 8006c24:	3001      	adds	r0, #1
 8006c26:	d103      	bne.n	8006c30 <_printf_common+0xac>
 8006c28:	f04f 30ff 	mov.w	r0, #4294967295
 8006c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c30:	3501      	adds	r5, #1
 8006c32:	e7c6      	b.n	8006bc2 <_printf_common+0x3e>
 8006c34:	18e1      	adds	r1, r4, r3
 8006c36:	1c5a      	adds	r2, r3, #1
 8006c38:	2030      	movs	r0, #48	; 0x30
 8006c3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c3e:	4422      	add	r2, r4
 8006c40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c48:	3302      	adds	r3, #2
 8006c4a:	e7c7      	b.n	8006bdc <_printf_common+0x58>
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	4622      	mov	r2, r4
 8006c50:	4649      	mov	r1, r9
 8006c52:	4638      	mov	r0, r7
 8006c54:	47c0      	blx	r8
 8006c56:	3001      	adds	r0, #1
 8006c58:	d0e6      	beq.n	8006c28 <_printf_common+0xa4>
 8006c5a:	3601      	adds	r6, #1
 8006c5c:	e7d9      	b.n	8006c12 <_printf_common+0x8e>
	...

08006c60 <_printf_i>:
 8006c60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c64:	7e0f      	ldrb	r7, [r1, #24]
 8006c66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c68:	2f78      	cmp	r7, #120	; 0x78
 8006c6a:	4691      	mov	r9, r2
 8006c6c:	4680      	mov	r8, r0
 8006c6e:	460c      	mov	r4, r1
 8006c70:	469a      	mov	sl, r3
 8006c72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c76:	d807      	bhi.n	8006c88 <_printf_i+0x28>
 8006c78:	2f62      	cmp	r7, #98	; 0x62
 8006c7a:	d80a      	bhi.n	8006c92 <_printf_i+0x32>
 8006c7c:	2f00      	cmp	r7, #0
 8006c7e:	f000 80d8 	beq.w	8006e32 <_printf_i+0x1d2>
 8006c82:	2f58      	cmp	r7, #88	; 0x58
 8006c84:	f000 80a3 	beq.w	8006dce <_printf_i+0x16e>
 8006c88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c90:	e03a      	b.n	8006d08 <_printf_i+0xa8>
 8006c92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c96:	2b15      	cmp	r3, #21
 8006c98:	d8f6      	bhi.n	8006c88 <_printf_i+0x28>
 8006c9a:	a101      	add	r1, pc, #4	; (adr r1, 8006ca0 <_printf_i+0x40>)
 8006c9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ca0:	08006cf9 	.word	0x08006cf9
 8006ca4:	08006d0d 	.word	0x08006d0d
 8006ca8:	08006c89 	.word	0x08006c89
 8006cac:	08006c89 	.word	0x08006c89
 8006cb0:	08006c89 	.word	0x08006c89
 8006cb4:	08006c89 	.word	0x08006c89
 8006cb8:	08006d0d 	.word	0x08006d0d
 8006cbc:	08006c89 	.word	0x08006c89
 8006cc0:	08006c89 	.word	0x08006c89
 8006cc4:	08006c89 	.word	0x08006c89
 8006cc8:	08006c89 	.word	0x08006c89
 8006ccc:	08006e19 	.word	0x08006e19
 8006cd0:	08006d3d 	.word	0x08006d3d
 8006cd4:	08006dfb 	.word	0x08006dfb
 8006cd8:	08006c89 	.word	0x08006c89
 8006cdc:	08006c89 	.word	0x08006c89
 8006ce0:	08006e3b 	.word	0x08006e3b
 8006ce4:	08006c89 	.word	0x08006c89
 8006ce8:	08006d3d 	.word	0x08006d3d
 8006cec:	08006c89 	.word	0x08006c89
 8006cf0:	08006c89 	.word	0x08006c89
 8006cf4:	08006e03 	.word	0x08006e03
 8006cf8:	682b      	ldr	r3, [r5, #0]
 8006cfa:	1d1a      	adds	r2, r3, #4
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	602a      	str	r2, [r5, #0]
 8006d00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e0a3      	b.n	8006e54 <_printf_i+0x1f4>
 8006d0c:	6820      	ldr	r0, [r4, #0]
 8006d0e:	6829      	ldr	r1, [r5, #0]
 8006d10:	0606      	lsls	r6, r0, #24
 8006d12:	f101 0304 	add.w	r3, r1, #4
 8006d16:	d50a      	bpl.n	8006d2e <_printf_i+0xce>
 8006d18:	680e      	ldr	r6, [r1, #0]
 8006d1a:	602b      	str	r3, [r5, #0]
 8006d1c:	2e00      	cmp	r6, #0
 8006d1e:	da03      	bge.n	8006d28 <_printf_i+0xc8>
 8006d20:	232d      	movs	r3, #45	; 0x2d
 8006d22:	4276      	negs	r6, r6
 8006d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d28:	485e      	ldr	r0, [pc, #376]	; (8006ea4 <_printf_i+0x244>)
 8006d2a:	230a      	movs	r3, #10
 8006d2c:	e019      	b.n	8006d62 <_printf_i+0x102>
 8006d2e:	680e      	ldr	r6, [r1, #0]
 8006d30:	602b      	str	r3, [r5, #0]
 8006d32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d36:	bf18      	it	ne
 8006d38:	b236      	sxthne	r6, r6
 8006d3a:	e7ef      	b.n	8006d1c <_printf_i+0xbc>
 8006d3c:	682b      	ldr	r3, [r5, #0]
 8006d3e:	6820      	ldr	r0, [r4, #0]
 8006d40:	1d19      	adds	r1, r3, #4
 8006d42:	6029      	str	r1, [r5, #0]
 8006d44:	0601      	lsls	r1, r0, #24
 8006d46:	d501      	bpl.n	8006d4c <_printf_i+0xec>
 8006d48:	681e      	ldr	r6, [r3, #0]
 8006d4a:	e002      	b.n	8006d52 <_printf_i+0xf2>
 8006d4c:	0646      	lsls	r6, r0, #25
 8006d4e:	d5fb      	bpl.n	8006d48 <_printf_i+0xe8>
 8006d50:	881e      	ldrh	r6, [r3, #0]
 8006d52:	4854      	ldr	r0, [pc, #336]	; (8006ea4 <_printf_i+0x244>)
 8006d54:	2f6f      	cmp	r7, #111	; 0x6f
 8006d56:	bf0c      	ite	eq
 8006d58:	2308      	moveq	r3, #8
 8006d5a:	230a      	movne	r3, #10
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d62:	6865      	ldr	r5, [r4, #4]
 8006d64:	60a5      	str	r5, [r4, #8]
 8006d66:	2d00      	cmp	r5, #0
 8006d68:	bfa2      	ittt	ge
 8006d6a:	6821      	ldrge	r1, [r4, #0]
 8006d6c:	f021 0104 	bicge.w	r1, r1, #4
 8006d70:	6021      	strge	r1, [r4, #0]
 8006d72:	b90e      	cbnz	r6, 8006d78 <_printf_i+0x118>
 8006d74:	2d00      	cmp	r5, #0
 8006d76:	d04d      	beq.n	8006e14 <_printf_i+0x1b4>
 8006d78:	4615      	mov	r5, r2
 8006d7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d7e:	fb03 6711 	mls	r7, r3, r1, r6
 8006d82:	5dc7      	ldrb	r7, [r0, r7]
 8006d84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d88:	4637      	mov	r7, r6
 8006d8a:	42bb      	cmp	r3, r7
 8006d8c:	460e      	mov	r6, r1
 8006d8e:	d9f4      	bls.n	8006d7a <_printf_i+0x11a>
 8006d90:	2b08      	cmp	r3, #8
 8006d92:	d10b      	bne.n	8006dac <_printf_i+0x14c>
 8006d94:	6823      	ldr	r3, [r4, #0]
 8006d96:	07de      	lsls	r6, r3, #31
 8006d98:	d508      	bpl.n	8006dac <_printf_i+0x14c>
 8006d9a:	6923      	ldr	r3, [r4, #16]
 8006d9c:	6861      	ldr	r1, [r4, #4]
 8006d9e:	4299      	cmp	r1, r3
 8006da0:	bfde      	ittt	le
 8006da2:	2330      	movle	r3, #48	; 0x30
 8006da4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006da8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006dac:	1b52      	subs	r2, r2, r5
 8006dae:	6122      	str	r2, [r4, #16]
 8006db0:	f8cd a000 	str.w	sl, [sp]
 8006db4:	464b      	mov	r3, r9
 8006db6:	aa03      	add	r2, sp, #12
 8006db8:	4621      	mov	r1, r4
 8006dba:	4640      	mov	r0, r8
 8006dbc:	f7ff fee2 	bl	8006b84 <_printf_common>
 8006dc0:	3001      	adds	r0, #1
 8006dc2:	d14c      	bne.n	8006e5e <_printf_i+0x1fe>
 8006dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc8:	b004      	add	sp, #16
 8006dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dce:	4835      	ldr	r0, [pc, #212]	; (8006ea4 <_printf_i+0x244>)
 8006dd0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006dd4:	6829      	ldr	r1, [r5, #0]
 8006dd6:	6823      	ldr	r3, [r4, #0]
 8006dd8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ddc:	6029      	str	r1, [r5, #0]
 8006dde:	061d      	lsls	r5, r3, #24
 8006de0:	d514      	bpl.n	8006e0c <_printf_i+0x1ac>
 8006de2:	07df      	lsls	r7, r3, #31
 8006de4:	bf44      	itt	mi
 8006de6:	f043 0320 	orrmi.w	r3, r3, #32
 8006dea:	6023      	strmi	r3, [r4, #0]
 8006dec:	b91e      	cbnz	r6, 8006df6 <_printf_i+0x196>
 8006dee:	6823      	ldr	r3, [r4, #0]
 8006df0:	f023 0320 	bic.w	r3, r3, #32
 8006df4:	6023      	str	r3, [r4, #0]
 8006df6:	2310      	movs	r3, #16
 8006df8:	e7b0      	b.n	8006d5c <_printf_i+0xfc>
 8006dfa:	6823      	ldr	r3, [r4, #0]
 8006dfc:	f043 0320 	orr.w	r3, r3, #32
 8006e00:	6023      	str	r3, [r4, #0]
 8006e02:	2378      	movs	r3, #120	; 0x78
 8006e04:	4828      	ldr	r0, [pc, #160]	; (8006ea8 <_printf_i+0x248>)
 8006e06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e0a:	e7e3      	b.n	8006dd4 <_printf_i+0x174>
 8006e0c:	0659      	lsls	r1, r3, #25
 8006e0e:	bf48      	it	mi
 8006e10:	b2b6      	uxthmi	r6, r6
 8006e12:	e7e6      	b.n	8006de2 <_printf_i+0x182>
 8006e14:	4615      	mov	r5, r2
 8006e16:	e7bb      	b.n	8006d90 <_printf_i+0x130>
 8006e18:	682b      	ldr	r3, [r5, #0]
 8006e1a:	6826      	ldr	r6, [r4, #0]
 8006e1c:	6961      	ldr	r1, [r4, #20]
 8006e1e:	1d18      	adds	r0, r3, #4
 8006e20:	6028      	str	r0, [r5, #0]
 8006e22:	0635      	lsls	r5, r6, #24
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	d501      	bpl.n	8006e2c <_printf_i+0x1cc>
 8006e28:	6019      	str	r1, [r3, #0]
 8006e2a:	e002      	b.n	8006e32 <_printf_i+0x1d2>
 8006e2c:	0670      	lsls	r0, r6, #25
 8006e2e:	d5fb      	bpl.n	8006e28 <_printf_i+0x1c8>
 8006e30:	8019      	strh	r1, [r3, #0]
 8006e32:	2300      	movs	r3, #0
 8006e34:	6123      	str	r3, [r4, #16]
 8006e36:	4615      	mov	r5, r2
 8006e38:	e7ba      	b.n	8006db0 <_printf_i+0x150>
 8006e3a:	682b      	ldr	r3, [r5, #0]
 8006e3c:	1d1a      	adds	r2, r3, #4
 8006e3e:	602a      	str	r2, [r5, #0]
 8006e40:	681d      	ldr	r5, [r3, #0]
 8006e42:	6862      	ldr	r2, [r4, #4]
 8006e44:	2100      	movs	r1, #0
 8006e46:	4628      	mov	r0, r5
 8006e48:	f7f9 fa02 	bl	8000250 <memchr>
 8006e4c:	b108      	cbz	r0, 8006e52 <_printf_i+0x1f2>
 8006e4e:	1b40      	subs	r0, r0, r5
 8006e50:	6060      	str	r0, [r4, #4]
 8006e52:	6863      	ldr	r3, [r4, #4]
 8006e54:	6123      	str	r3, [r4, #16]
 8006e56:	2300      	movs	r3, #0
 8006e58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e5c:	e7a8      	b.n	8006db0 <_printf_i+0x150>
 8006e5e:	6923      	ldr	r3, [r4, #16]
 8006e60:	462a      	mov	r2, r5
 8006e62:	4649      	mov	r1, r9
 8006e64:	4640      	mov	r0, r8
 8006e66:	47d0      	blx	sl
 8006e68:	3001      	adds	r0, #1
 8006e6a:	d0ab      	beq.n	8006dc4 <_printf_i+0x164>
 8006e6c:	6823      	ldr	r3, [r4, #0]
 8006e6e:	079b      	lsls	r3, r3, #30
 8006e70:	d413      	bmi.n	8006e9a <_printf_i+0x23a>
 8006e72:	68e0      	ldr	r0, [r4, #12]
 8006e74:	9b03      	ldr	r3, [sp, #12]
 8006e76:	4298      	cmp	r0, r3
 8006e78:	bfb8      	it	lt
 8006e7a:	4618      	movlt	r0, r3
 8006e7c:	e7a4      	b.n	8006dc8 <_printf_i+0x168>
 8006e7e:	2301      	movs	r3, #1
 8006e80:	4632      	mov	r2, r6
 8006e82:	4649      	mov	r1, r9
 8006e84:	4640      	mov	r0, r8
 8006e86:	47d0      	blx	sl
 8006e88:	3001      	adds	r0, #1
 8006e8a:	d09b      	beq.n	8006dc4 <_printf_i+0x164>
 8006e8c:	3501      	adds	r5, #1
 8006e8e:	68e3      	ldr	r3, [r4, #12]
 8006e90:	9903      	ldr	r1, [sp, #12]
 8006e92:	1a5b      	subs	r3, r3, r1
 8006e94:	42ab      	cmp	r3, r5
 8006e96:	dcf2      	bgt.n	8006e7e <_printf_i+0x21e>
 8006e98:	e7eb      	b.n	8006e72 <_printf_i+0x212>
 8006e9a:	2500      	movs	r5, #0
 8006e9c:	f104 0619 	add.w	r6, r4, #25
 8006ea0:	e7f5      	b.n	8006e8e <_printf_i+0x22e>
 8006ea2:	bf00      	nop
 8006ea4:	0800ad46 	.word	0x0800ad46
 8006ea8:	0800ad57 	.word	0x0800ad57

08006eac <_scanf_float>:
 8006eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eb0:	b087      	sub	sp, #28
 8006eb2:	4617      	mov	r7, r2
 8006eb4:	9303      	str	r3, [sp, #12]
 8006eb6:	688b      	ldr	r3, [r1, #8]
 8006eb8:	1e5a      	subs	r2, r3, #1
 8006eba:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006ebe:	bf83      	ittte	hi
 8006ec0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006ec4:	195b      	addhi	r3, r3, r5
 8006ec6:	9302      	strhi	r3, [sp, #8]
 8006ec8:	2300      	movls	r3, #0
 8006eca:	bf86      	itte	hi
 8006ecc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006ed0:	608b      	strhi	r3, [r1, #8]
 8006ed2:	9302      	strls	r3, [sp, #8]
 8006ed4:	680b      	ldr	r3, [r1, #0]
 8006ed6:	468b      	mov	fp, r1
 8006ed8:	2500      	movs	r5, #0
 8006eda:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006ede:	f84b 3b1c 	str.w	r3, [fp], #28
 8006ee2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006ee6:	4680      	mov	r8, r0
 8006ee8:	460c      	mov	r4, r1
 8006eea:	465e      	mov	r6, fp
 8006eec:	46aa      	mov	sl, r5
 8006eee:	46a9      	mov	r9, r5
 8006ef0:	9501      	str	r5, [sp, #4]
 8006ef2:	68a2      	ldr	r2, [r4, #8]
 8006ef4:	b152      	cbz	r2, 8006f0c <_scanf_float+0x60>
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	2b4e      	cmp	r3, #78	; 0x4e
 8006efc:	d864      	bhi.n	8006fc8 <_scanf_float+0x11c>
 8006efe:	2b40      	cmp	r3, #64	; 0x40
 8006f00:	d83c      	bhi.n	8006f7c <_scanf_float+0xd0>
 8006f02:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006f06:	b2c8      	uxtb	r0, r1
 8006f08:	280e      	cmp	r0, #14
 8006f0a:	d93a      	bls.n	8006f82 <_scanf_float+0xd6>
 8006f0c:	f1b9 0f00 	cmp.w	r9, #0
 8006f10:	d003      	beq.n	8006f1a <_scanf_float+0x6e>
 8006f12:	6823      	ldr	r3, [r4, #0]
 8006f14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f18:	6023      	str	r3, [r4, #0]
 8006f1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f1e:	f1ba 0f01 	cmp.w	sl, #1
 8006f22:	f200 8113 	bhi.w	800714c <_scanf_float+0x2a0>
 8006f26:	455e      	cmp	r6, fp
 8006f28:	f200 8105 	bhi.w	8007136 <_scanf_float+0x28a>
 8006f2c:	2501      	movs	r5, #1
 8006f2e:	4628      	mov	r0, r5
 8006f30:	b007      	add	sp, #28
 8006f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f36:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006f3a:	2a0d      	cmp	r2, #13
 8006f3c:	d8e6      	bhi.n	8006f0c <_scanf_float+0x60>
 8006f3e:	a101      	add	r1, pc, #4	; (adr r1, 8006f44 <_scanf_float+0x98>)
 8006f40:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006f44:	08007083 	.word	0x08007083
 8006f48:	08006f0d 	.word	0x08006f0d
 8006f4c:	08006f0d 	.word	0x08006f0d
 8006f50:	08006f0d 	.word	0x08006f0d
 8006f54:	080070e3 	.word	0x080070e3
 8006f58:	080070bb 	.word	0x080070bb
 8006f5c:	08006f0d 	.word	0x08006f0d
 8006f60:	08006f0d 	.word	0x08006f0d
 8006f64:	08007091 	.word	0x08007091
 8006f68:	08006f0d 	.word	0x08006f0d
 8006f6c:	08006f0d 	.word	0x08006f0d
 8006f70:	08006f0d 	.word	0x08006f0d
 8006f74:	08006f0d 	.word	0x08006f0d
 8006f78:	08007049 	.word	0x08007049
 8006f7c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006f80:	e7db      	b.n	8006f3a <_scanf_float+0x8e>
 8006f82:	290e      	cmp	r1, #14
 8006f84:	d8c2      	bhi.n	8006f0c <_scanf_float+0x60>
 8006f86:	a001      	add	r0, pc, #4	; (adr r0, 8006f8c <_scanf_float+0xe0>)
 8006f88:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006f8c:	0800703b 	.word	0x0800703b
 8006f90:	08006f0d 	.word	0x08006f0d
 8006f94:	0800703b 	.word	0x0800703b
 8006f98:	080070cf 	.word	0x080070cf
 8006f9c:	08006f0d 	.word	0x08006f0d
 8006fa0:	08006fe9 	.word	0x08006fe9
 8006fa4:	08007025 	.word	0x08007025
 8006fa8:	08007025 	.word	0x08007025
 8006fac:	08007025 	.word	0x08007025
 8006fb0:	08007025 	.word	0x08007025
 8006fb4:	08007025 	.word	0x08007025
 8006fb8:	08007025 	.word	0x08007025
 8006fbc:	08007025 	.word	0x08007025
 8006fc0:	08007025 	.word	0x08007025
 8006fc4:	08007025 	.word	0x08007025
 8006fc8:	2b6e      	cmp	r3, #110	; 0x6e
 8006fca:	d809      	bhi.n	8006fe0 <_scanf_float+0x134>
 8006fcc:	2b60      	cmp	r3, #96	; 0x60
 8006fce:	d8b2      	bhi.n	8006f36 <_scanf_float+0x8a>
 8006fd0:	2b54      	cmp	r3, #84	; 0x54
 8006fd2:	d077      	beq.n	80070c4 <_scanf_float+0x218>
 8006fd4:	2b59      	cmp	r3, #89	; 0x59
 8006fd6:	d199      	bne.n	8006f0c <_scanf_float+0x60>
 8006fd8:	2d07      	cmp	r5, #7
 8006fda:	d197      	bne.n	8006f0c <_scanf_float+0x60>
 8006fdc:	2508      	movs	r5, #8
 8006fde:	e029      	b.n	8007034 <_scanf_float+0x188>
 8006fe0:	2b74      	cmp	r3, #116	; 0x74
 8006fe2:	d06f      	beq.n	80070c4 <_scanf_float+0x218>
 8006fe4:	2b79      	cmp	r3, #121	; 0x79
 8006fe6:	e7f6      	b.n	8006fd6 <_scanf_float+0x12a>
 8006fe8:	6821      	ldr	r1, [r4, #0]
 8006fea:	05c8      	lsls	r0, r1, #23
 8006fec:	d51a      	bpl.n	8007024 <_scanf_float+0x178>
 8006fee:	9b02      	ldr	r3, [sp, #8]
 8006ff0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006ff4:	6021      	str	r1, [r4, #0]
 8006ff6:	f109 0901 	add.w	r9, r9, #1
 8006ffa:	b11b      	cbz	r3, 8007004 <_scanf_float+0x158>
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	3201      	adds	r2, #1
 8007000:	9302      	str	r3, [sp, #8]
 8007002:	60a2      	str	r2, [r4, #8]
 8007004:	68a3      	ldr	r3, [r4, #8]
 8007006:	3b01      	subs	r3, #1
 8007008:	60a3      	str	r3, [r4, #8]
 800700a:	6923      	ldr	r3, [r4, #16]
 800700c:	3301      	adds	r3, #1
 800700e:	6123      	str	r3, [r4, #16]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	3b01      	subs	r3, #1
 8007014:	2b00      	cmp	r3, #0
 8007016:	607b      	str	r3, [r7, #4]
 8007018:	f340 8084 	ble.w	8007124 <_scanf_float+0x278>
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	3301      	adds	r3, #1
 8007020:	603b      	str	r3, [r7, #0]
 8007022:	e766      	b.n	8006ef2 <_scanf_float+0x46>
 8007024:	eb1a 0f05 	cmn.w	sl, r5
 8007028:	f47f af70 	bne.w	8006f0c <_scanf_float+0x60>
 800702c:	6822      	ldr	r2, [r4, #0]
 800702e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007032:	6022      	str	r2, [r4, #0]
 8007034:	f806 3b01 	strb.w	r3, [r6], #1
 8007038:	e7e4      	b.n	8007004 <_scanf_float+0x158>
 800703a:	6822      	ldr	r2, [r4, #0]
 800703c:	0610      	lsls	r0, r2, #24
 800703e:	f57f af65 	bpl.w	8006f0c <_scanf_float+0x60>
 8007042:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007046:	e7f4      	b.n	8007032 <_scanf_float+0x186>
 8007048:	f1ba 0f00 	cmp.w	sl, #0
 800704c:	d10e      	bne.n	800706c <_scanf_float+0x1c0>
 800704e:	f1b9 0f00 	cmp.w	r9, #0
 8007052:	d10e      	bne.n	8007072 <_scanf_float+0x1c6>
 8007054:	6822      	ldr	r2, [r4, #0]
 8007056:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800705a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800705e:	d108      	bne.n	8007072 <_scanf_float+0x1c6>
 8007060:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007064:	6022      	str	r2, [r4, #0]
 8007066:	f04f 0a01 	mov.w	sl, #1
 800706a:	e7e3      	b.n	8007034 <_scanf_float+0x188>
 800706c:	f1ba 0f02 	cmp.w	sl, #2
 8007070:	d055      	beq.n	800711e <_scanf_float+0x272>
 8007072:	2d01      	cmp	r5, #1
 8007074:	d002      	beq.n	800707c <_scanf_float+0x1d0>
 8007076:	2d04      	cmp	r5, #4
 8007078:	f47f af48 	bne.w	8006f0c <_scanf_float+0x60>
 800707c:	3501      	adds	r5, #1
 800707e:	b2ed      	uxtb	r5, r5
 8007080:	e7d8      	b.n	8007034 <_scanf_float+0x188>
 8007082:	f1ba 0f01 	cmp.w	sl, #1
 8007086:	f47f af41 	bne.w	8006f0c <_scanf_float+0x60>
 800708a:	f04f 0a02 	mov.w	sl, #2
 800708e:	e7d1      	b.n	8007034 <_scanf_float+0x188>
 8007090:	b97d      	cbnz	r5, 80070b2 <_scanf_float+0x206>
 8007092:	f1b9 0f00 	cmp.w	r9, #0
 8007096:	f47f af3c 	bne.w	8006f12 <_scanf_float+0x66>
 800709a:	6822      	ldr	r2, [r4, #0]
 800709c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80070a0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80070a4:	f47f af39 	bne.w	8006f1a <_scanf_float+0x6e>
 80070a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80070ac:	6022      	str	r2, [r4, #0]
 80070ae:	2501      	movs	r5, #1
 80070b0:	e7c0      	b.n	8007034 <_scanf_float+0x188>
 80070b2:	2d03      	cmp	r5, #3
 80070b4:	d0e2      	beq.n	800707c <_scanf_float+0x1d0>
 80070b6:	2d05      	cmp	r5, #5
 80070b8:	e7de      	b.n	8007078 <_scanf_float+0x1cc>
 80070ba:	2d02      	cmp	r5, #2
 80070bc:	f47f af26 	bne.w	8006f0c <_scanf_float+0x60>
 80070c0:	2503      	movs	r5, #3
 80070c2:	e7b7      	b.n	8007034 <_scanf_float+0x188>
 80070c4:	2d06      	cmp	r5, #6
 80070c6:	f47f af21 	bne.w	8006f0c <_scanf_float+0x60>
 80070ca:	2507      	movs	r5, #7
 80070cc:	e7b2      	b.n	8007034 <_scanf_float+0x188>
 80070ce:	6822      	ldr	r2, [r4, #0]
 80070d0:	0591      	lsls	r1, r2, #22
 80070d2:	f57f af1b 	bpl.w	8006f0c <_scanf_float+0x60>
 80070d6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80070da:	6022      	str	r2, [r4, #0]
 80070dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80070e0:	e7a8      	b.n	8007034 <_scanf_float+0x188>
 80070e2:	6822      	ldr	r2, [r4, #0]
 80070e4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80070e8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80070ec:	d006      	beq.n	80070fc <_scanf_float+0x250>
 80070ee:	0550      	lsls	r0, r2, #21
 80070f0:	f57f af0c 	bpl.w	8006f0c <_scanf_float+0x60>
 80070f4:	f1b9 0f00 	cmp.w	r9, #0
 80070f8:	f43f af0f 	beq.w	8006f1a <_scanf_float+0x6e>
 80070fc:	0591      	lsls	r1, r2, #22
 80070fe:	bf58      	it	pl
 8007100:	9901      	ldrpl	r1, [sp, #4]
 8007102:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007106:	bf58      	it	pl
 8007108:	eba9 0101 	subpl.w	r1, r9, r1
 800710c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007110:	bf58      	it	pl
 8007112:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007116:	6022      	str	r2, [r4, #0]
 8007118:	f04f 0900 	mov.w	r9, #0
 800711c:	e78a      	b.n	8007034 <_scanf_float+0x188>
 800711e:	f04f 0a03 	mov.w	sl, #3
 8007122:	e787      	b.n	8007034 <_scanf_float+0x188>
 8007124:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007128:	4639      	mov	r1, r7
 800712a:	4640      	mov	r0, r8
 800712c:	4798      	blx	r3
 800712e:	2800      	cmp	r0, #0
 8007130:	f43f aedf 	beq.w	8006ef2 <_scanf_float+0x46>
 8007134:	e6ea      	b.n	8006f0c <_scanf_float+0x60>
 8007136:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800713a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800713e:	463a      	mov	r2, r7
 8007140:	4640      	mov	r0, r8
 8007142:	4798      	blx	r3
 8007144:	6923      	ldr	r3, [r4, #16]
 8007146:	3b01      	subs	r3, #1
 8007148:	6123      	str	r3, [r4, #16]
 800714a:	e6ec      	b.n	8006f26 <_scanf_float+0x7a>
 800714c:	1e6b      	subs	r3, r5, #1
 800714e:	2b06      	cmp	r3, #6
 8007150:	d825      	bhi.n	800719e <_scanf_float+0x2f2>
 8007152:	2d02      	cmp	r5, #2
 8007154:	d836      	bhi.n	80071c4 <_scanf_float+0x318>
 8007156:	455e      	cmp	r6, fp
 8007158:	f67f aee8 	bls.w	8006f2c <_scanf_float+0x80>
 800715c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007160:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007164:	463a      	mov	r2, r7
 8007166:	4640      	mov	r0, r8
 8007168:	4798      	blx	r3
 800716a:	6923      	ldr	r3, [r4, #16]
 800716c:	3b01      	subs	r3, #1
 800716e:	6123      	str	r3, [r4, #16]
 8007170:	e7f1      	b.n	8007156 <_scanf_float+0x2aa>
 8007172:	9802      	ldr	r0, [sp, #8]
 8007174:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007178:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800717c:	9002      	str	r0, [sp, #8]
 800717e:	463a      	mov	r2, r7
 8007180:	4640      	mov	r0, r8
 8007182:	4798      	blx	r3
 8007184:	6923      	ldr	r3, [r4, #16]
 8007186:	3b01      	subs	r3, #1
 8007188:	6123      	str	r3, [r4, #16]
 800718a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800718e:	fa5f fa8a 	uxtb.w	sl, sl
 8007192:	f1ba 0f02 	cmp.w	sl, #2
 8007196:	d1ec      	bne.n	8007172 <_scanf_float+0x2c6>
 8007198:	3d03      	subs	r5, #3
 800719a:	b2ed      	uxtb	r5, r5
 800719c:	1b76      	subs	r6, r6, r5
 800719e:	6823      	ldr	r3, [r4, #0]
 80071a0:	05da      	lsls	r2, r3, #23
 80071a2:	d52f      	bpl.n	8007204 <_scanf_float+0x358>
 80071a4:	055b      	lsls	r3, r3, #21
 80071a6:	d510      	bpl.n	80071ca <_scanf_float+0x31e>
 80071a8:	455e      	cmp	r6, fp
 80071aa:	f67f aebf 	bls.w	8006f2c <_scanf_float+0x80>
 80071ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80071b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80071b6:	463a      	mov	r2, r7
 80071b8:	4640      	mov	r0, r8
 80071ba:	4798      	blx	r3
 80071bc:	6923      	ldr	r3, [r4, #16]
 80071be:	3b01      	subs	r3, #1
 80071c0:	6123      	str	r3, [r4, #16]
 80071c2:	e7f1      	b.n	80071a8 <_scanf_float+0x2fc>
 80071c4:	46aa      	mov	sl, r5
 80071c6:	9602      	str	r6, [sp, #8]
 80071c8:	e7df      	b.n	800718a <_scanf_float+0x2de>
 80071ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80071ce:	6923      	ldr	r3, [r4, #16]
 80071d0:	2965      	cmp	r1, #101	; 0x65
 80071d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80071d6:	f106 35ff 	add.w	r5, r6, #4294967295
 80071da:	6123      	str	r3, [r4, #16]
 80071dc:	d00c      	beq.n	80071f8 <_scanf_float+0x34c>
 80071de:	2945      	cmp	r1, #69	; 0x45
 80071e0:	d00a      	beq.n	80071f8 <_scanf_float+0x34c>
 80071e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80071e6:	463a      	mov	r2, r7
 80071e8:	4640      	mov	r0, r8
 80071ea:	4798      	blx	r3
 80071ec:	6923      	ldr	r3, [r4, #16]
 80071ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80071f2:	3b01      	subs	r3, #1
 80071f4:	1eb5      	subs	r5, r6, #2
 80071f6:	6123      	str	r3, [r4, #16]
 80071f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80071fc:	463a      	mov	r2, r7
 80071fe:	4640      	mov	r0, r8
 8007200:	4798      	blx	r3
 8007202:	462e      	mov	r6, r5
 8007204:	6825      	ldr	r5, [r4, #0]
 8007206:	f015 0510 	ands.w	r5, r5, #16
 800720a:	d14e      	bne.n	80072aa <_scanf_float+0x3fe>
 800720c:	7035      	strb	r5, [r6, #0]
 800720e:	6823      	ldr	r3, [r4, #0]
 8007210:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007218:	d119      	bne.n	800724e <_scanf_float+0x3a2>
 800721a:	9b01      	ldr	r3, [sp, #4]
 800721c:	454b      	cmp	r3, r9
 800721e:	eba3 0209 	sub.w	r2, r3, r9
 8007222:	d121      	bne.n	8007268 <_scanf_float+0x3bc>
 8007224:	2200      	movs	r2, #0
 8007226:	4659      	mov	r1, fp
 8007228:	4640      	mov	r0, r8
 800722a:	f000 fe3b 	bl	8007ea4 <_strtod_r>
 800722e:	6822      	ldr	r2, [r4, #0]
 8007230:	9b03      	ldr	r3, [sp, #12]
 8007232:	f012 0f02 	tst.w	r2, #2
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	d021      	beq.n	800727e <_scanf_float+0x3d2>
 800723a:	9903      	ldr	r1, [sp, #12]
 800723c:	1d1a      	adds	r2, r3, #4
 800723e:	600a      	str	r2, [r1, #0]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	ed83 0b00 	vstr	d0, [r3]
 8007246:	68e3      	ldr	r3, [r4, #12]
 8007248:	3301      	adds	r3, #1
 800724a:	60e3      	str	r3, [r4, #12]
 800724c:	e66f      	b.n	8006f2e <_scanf_float+0x82>
 800724e:	9b04      	ldr	r3, [sp, #16]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d0e7      	beq.n	8007224 <_scanf_float+0x378>
 8007254:	9905      	ldr	r1, [sp, #20]
 8007256:	230a      	movs	r3, #10
 8007258:	462a      	mov	r2, r5
 800725a:	3101      	adds	r1, #1
 800725c:	4640      	mov	r0, r8
 800725e:	f000 fea9 	bl	8007fb4 <_strtol_r>
 8007262:	9b04      	ldr	r3, [sp, #16]
 8007264:	9e05      	ldr	r6, [sp, #20]
 8007266:	1ac2      	subs	r2, r0, r3
 8007268:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800726c:	429e      	cmp	r6, r3
 800726e:	bf28      	it	cs
 8007270:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007274:	490e      	ldr	r1, [pc, #56]	; (80072b0 <_scanf_float+0x404>)
 8007276:	4630      	mov	r0, r6
 8007278:	f000 f824 	bl	80072c4 <siprintf>
 800727c:	e7d2      	b.n	8007224 <_scanf_float+0x378>
 800727e:	9903      	ldr	r1, [sp, #12]
 8007280:	f012 0f04 	tst.w	r2, #4
 8007284:	f103 0204 	add.w	r2, r3, #4
 8007288:	600a      	str	r2, [r1, #0]
 800728a:	d1d9      	bne.n	8007240 <_scanf_float+0x394>
 800728c:	eeb4 0b40 	vcmp.f64	d0, d0
 8007290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007294:	681e      	ldr	r6, [r3, #0]
 8007296:	d705      	bvc.n	80072a4 <_scanf_float+0x3f8>
 8007298:	4806      	ldr	r0, [pc, #24]	; (80072b4 <_scanf_float+0x408>)
 800729a:	f000 f80d 	bl	80072b8 <nanf>
 800729e:	ed86 0a00 	vstr	s0, [r6]
 80072a2:	e7d0      	b.n	8007246 <_scanf_float+0x39a>
 80072a4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80072a8:	e7f9      	b.n	800729e <_scanf_float+0x3f2>
 80072aa:	2500      	movs	r5, #0
 80072ac:	e63f      	b.n	8006f2e <_scanf_float+0x82>
 80072ae:	bf00      	nop
 80072b0:	0800ad68 	.word	0x0800ad68
 80072b4:	0800b170 	.word	0x0800b170

080072b8 <nanf>:
 80072b8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80072c0 <nanf+0x8>
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	7fc00000 	.word	0x7fc00000

080072c4 <siprintf>:
 80072c4:	b40e      	push	{r1, r2, r3}
 80072c6:	b500      	push	{lr}
 80072c8:	b09c      	sub	sp, #112	; 0x70
 80072ca:	ab1d      	add	r3, sp, #116	; 0x74
 80072cc:	9002      	str	r0, [sp, #8]
 80072ce:	9006      	str	r0, [sp, #24]
 80072d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80072d4:	4809      	ldr	r0, [pc, #36]	; (80072fc <siprintf+0x38>)
 80072d6:	9107      	str	r1, [sp, #28]
 80072d8:	9104      	str	r1, [sp, #16]
 80072da:	4909      	ldr	r1, [pc, #36]	; (8007300 <siprintf+0x3c>)
 80072dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80072e0:	9105      	str	r1, [sp, #20]
 80072e2:	6800      	ldr	r0, [r0, #0]
 80072e4:	9301      	str	r3, [sp, #4]
 80072e6:	a902      	add	r1, sp, #8
 80072e8:	f002 fe0c 	bl	8009f04 <_svfiprintf_r>
 80072ec:	9b02      	ldr	r3, [sp, #8]
 80072ee:	2200      	movs	r2, #0
 80072f0:	701a      	strb	r2, [r3, #0]
 80072f2:	b01c      	add	sp, #112	; 0x70
 80072f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80072f8:	b003      	add	sp, #12
 80072fa:	4770      	bx	lr
 80072fc:	20000034 	.word	0x20000034
 8007300:	ffff0208 	.word	0xffff0208

08007304 <sulp>:
 8007304:	b570      	push	{r4, r5, r6, lr}
 8007306:	4604      	mov	r4, r0
 8007308:	460d      	mov	r5, r1
 800730a:	4616      	mov	r6, r2
 800730c:	ec45 4b10 	vmov	d0, r4, r5
 8007310:	f002 fb5a 	bl	80099c8 <__ulp>
 8007314:	b17e      	cbz	r6, 8007336 <sulp+0x32>
 8007316:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800731a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800731e:	2b00      	cmp	r3, #0
 8007320:	dd09      	ble.n	8007336 <sulp+0x32>
 8007322:	051b      	lsls	r3, r3, #20
 8007324:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8007328:	2000      	movs	r0, #0
 800732a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800732e:	ec41 0b17 	vmov	d7, r0, r1
 8007332:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007336:	bd70      	pop	{r4, r5, r6, pc}

08007338 <_strtod_l>:
 8007338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800733c:	ed2d 8b0e 	vpush	{d8-d14}
 8007340:	b097      	sub	sp, #92	; 0x5c
 8007342:	461f      	mov	r7, r3
 8007344:	2300      	movs	r3, #0
 8007346:	9312      	str	r3, [sp, #72]	; 0x48
 8007348:	4ba1      	ldr	r3, [pc, #644]	; (80075d0 <_strtod_l+0x298>)
 800734a:	920d      	str	r2, [sp, #52]	; 0x34
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	9307      	str	r3, [sp, #28]
 8007350:	4604      	mov	r4, r0
 8007352:	4618      	mov	r0, r3
 8007354:	468b      	mov	fp, r1
 8007356:	f7f8 ff73 	bl	8000240 <strlen>
 800735a:	f04f 0800 	mov.w	r8, #0
 800735e:	4605      	mov	r5, r0
 8007360:	f04f 0900 	mov.w	r9, #0
 8007364:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8007368:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800736a:	7813      	ldrb	r3, [r2, #0]
 800736c:	2b2b      	cmp	r3, #43	; 0x2b
 800736e:	d04d      	beq.n	800740c <_strtod_l+0xd4>
 8007370:	d83a      	bhi.n	80073e8 <_strtod_l+0xb0>
 8007372:	2b0d      	cmp	r3, #13
 8007374:	d833      	bhi.n	80073de <_strtod_l+0xa6>
 8007376:	2b08      	cmp	r3, #8
 8007378:	d833      	bhi.n	80073e2 <_strtod_l+0xaa>
 800737a:	2b00      	cmp	r3, #0
 800737c:	d03d      	beq.n	80073fa <_strtod_l+0xc2>
 800737e:	2300      	movs	r3, #0
 8007380:	9308      	str	r3, [sp, #32]
 8007382:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8007384:	7833      	ldrb	r3, [r6, #0]
 8007386:	2b30      	cmp	r3, #48	; 0x30
 8007388:	f040 80b0 	bne.w	80074ec <_strtod_l+0x1b4>
 800738c:	7873      	ldrb	r3, [r6, #1]
 800738e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007392:	2b58      	cmp	r3, #88	; 0x58
 8007394:	d167      	bne.n	8007466 <_strtod_l+0x12e>
 8007396:	9b08      	ldr	r3, [sp, #32]
 8007398:	9301      	str	r3, [sp, #4]
 800739a:	ab12      	add	r3, sp, #72	; 0x48
 800739c:	9702      	str	r7, [sp, #8]
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	4a8c      	ldr	r2, [pc, #560]	; (80075d4 <_strtod_l+0x29c>)
 80073a2:	ab13      	add	r3, sp, #76	; 0x4c
 80073a4:	a911      	add	r1, sp, #68	; 0x44
 80073a6:	4620      	mov	r0, r4
 80073a8:	f001 fc68 	bl	8008c7c <__gethex>
 80073ac:	f010 0507 	ands.w	r5, r0, #7
 80073b0:	4607      	mov	r7, r0
 80073b2:	d005      	beq.n	80073c0 <_strtod_l+0x88>
 80073b4:	2d06      	cmp	r5, #6
 80073b6:	d12b      	bne.n	8007410 <_strtod_l+0xd8>
 80073b8:	3601      	adds	r6, #1
 80073ba:	2300      	movs	r3, #0
 80073bc:	9611      	str	r6, [sp, #68]	; 0x44
 80073be:	9308      	str	r3, [sp, #32]
 80073c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	f040 854e 	bne.w	8007e64 <_strtod_l+0xb2c>
 80073c8:	9b08      	ldr	r3, [sp, #32]
 80073ca:	b1e3      	cbz	r3, 8007406 <_strtod_l+0xce>
 80073cc:	ec49 8b17 	vmov	d7, r8, r9
 80073d0:	eeb1 0b47 	vneg.f64	d0, d7
 80073d4:	b017      	add	sp, #92	; 0x5c
 80073d6:	ecbd 8b0e 	vpop	{d8-d14}
 80073da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073de:	2b20      	cmp	r3, #32
 80073e0:	d1cd      	bne.n	800737e <_strtod_l+0x46>
 80073e2:	3201      	adds	r2, #1
 80073e4:	9211      	str	r2, [sp, #68]	; 0x44
 80073e6:	e7bf      	b.n	8007368 <_strtod_l+0x30>
 80073e8:	2b2d      	cmp	r3, #45	; 0x2d
 80073ea:	d1c8      	bne.n	800737e <_strtod_l+0x46>
 80073ec:	2301      	movs	r3, #1
 80073ee:	9308      	str	r3, [sp, #32]
 80073f0:	1c53      	adds	r3, r2, #1
 80073f2:	9311      	str	r3, [sp, #68]	; 0x44
 80073f4:	7853      	ldrb	r3, [r2, #1]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1c3      	bne.n	8007382 <_strtod_l+0x4a>
 80073fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073fc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8007400:	2b00      	cmp	r3, #0
 8007402:	f040 852d 	bne.w	8007e60 <_strtod_l+0xb28>
 8007406:	ec49 8b10 	vmov	d0, r8, r9
 800740a:	e7e3      	b.n	80073d4 <_strtod_l+0x9c>
 800740c:	2300      	movs	r3, #0
 800740e:	e7ee      	b.n	80073ee <_strtod_l+0xb6>
 8007410:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007412:	b13a      	cbz	r2, 8007424 <_strtod_l+0xec>
 8007414:	2135      	movs	r1, #53	; 0x35
 8007416:	a814      	add	r0, sp, #80	; 0x50
 8007418:	f002 fbde 	bl	8009bd8 <__copybits>
 800741c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800741e:	4620      	mov	r0, r4
 8007420:	f001 ffa0 	bl	8009364 <_Bfree>
 8007424:	3d01      	subs	r5, #1
 8007426:	2d04      	cmp	r5, #4
 8007428:	d806      	bhi.n	8007438 <_strtod_l+0x100>
 800742a:	e8df f005 	tbb	[pc, r5]
 800742e:	030a      	.short	0x030a
 8007430:	1714      	.short	0x1714
 8007432:	0a          	.byte	0x0a
 8007433:	00          	.byte	0x00
 8007434:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8007438:	073f      	lsls	r7, r7, #28
 800743a:	d5c1      	bpl.n	80073c0 <_strtod_l+0x88>
 800743c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007440:	e7be      	b.n	80073c0 <_strtod_l+0x88>
 8007442:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8007446:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007448:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800744c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007450:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007454:	e7f0      	b.n	8007438 <_strtod_l+0x100>
 8007456:	f8df 9180 	ldr.w	r9, [pc, #384]	; 80075d8 <_strtod_l+0x2a0>
 800745a:	e7ed      	b.n	8007438 <_strtod_l+0x100>
 800745c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007460:	f04f 38ff 	mov.w	r8, #4294967295
 8007464:	e7e8      	b.n	8007438 <_strtod_l+0x100>
 8007466:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007468:	1c5a      	adds	r2, r3, #1
 800746a:	9211      	str	r2, [sp, #68]	; 0x44
 800746c:	785b      	ldrb	r3, [r3, #1]
 800746e:	2b30      	cmp	r3, #48	; 0x30
 8007470:	d0f9      	beq.n	8007466 <_strtod_l+0x12e>
 8007472:	2b00      	cmp	r3, #0
 8007474:	d0a4      	beq.n	80073c0 <_strtod_l+0x88>
 8007476:	2301      	movs	r3, #1
 8007478:	f04f 0a00 	mov.w	sl, #0
 800747c:	9304      	str	r3, [sp, #16]
 800747e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007480:	930a      	str	r3, [sp, #40]	; 0x28
 8007482:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007486:	f8cd a018 	str.w	sl, [sp, #24]
 800748a:	220a      	movs	r2, #10
 800748c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800748e:	7807      	ldrb	r7, [r0, #0]
 8007490:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8007494:	b2d9      	uxtb	r1, r3
 8007496:	2909      	cmp	r1, #9
 8007498:	d92a      	bls.n	80074f0 <_strtod_l+0x1b8>
 800749a:	9907      	ldr	r1, [sp, #28]
 800749c:	462a      	mov	r2, r5
 800749e:	f002 fe4b 	bl	800a138 <strncmp>
 80074a2:	2800      	cmp	r0, #0
 80074a4:	d033      	beq.n	800750e <_strtod_l+0x1d6>
 80074a6:	2000      	movs	r0, #0
 80074a8:	9b06      	ldr	r3, [sp, #24]
 80074aa:	463a      	mov	r2, r7
 80074ac:	4601      	mov	r1, r0
 80074ae:	4607      	mov	r7, r0
 80074b0:	2a65      	cmp	r2, #101	; 0x65
 80074b2:	d001      	beq.n	80074b8 <_strtod_l+0x180>
 80074b4:	2a45      	cmp	r2, #69	; 0x45
 80074b6:	d117      	bne.n	80074e8 <_strtod_l+0x1b0>
 80074b8:	b91b      	cbnz	r3, 80074c2 <_strtod_l+0x18a>
 80074ba:	9b04      	ldr	r3, [sp, #16]
 80074bc:	4303      	orrs	r3, r0
 80074be:	d09c      	beq.n	80073fa <_strtod_l+0xc2>
 80074c0:	2300      	movs	r3, #0
 80074c2:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 80074c6:	f10b 0201 	add.w	r2, fp, #1
 80074ca:	9211      	str	r2, [sp, #68]	; 0x44
 80074cc:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80074d0:	2a2b      	cmp	r2, #43	; 0x2b
 80074d2:	d071      	beq.n	80075b8 <_strtod_l+0x280>
 80074d4:	2a2d      	cmp	r2, #45	; 0x2d
 80074d6:	d077      	beq.n	80075c8 <_strtod_l+0x290>
 80074d8:	f04f 0e00 	mov.w	lr, #0
 80074dc:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80074e0:	2d09      	cmp	r5, #9
 80074e2:	d97f      	bls.n	80075e4 <_strtod_l+0x2ac>
 80074e4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80074e8:	2500      	movs	r5, #0
 80074ea:	e09b      	b.n	8007624 <_strtod_l+0x2ec>
 80074ec:	2300      	movs	r3, #0
 80074ee:	e7c3      	b.n	8007478 <_strtod_l+0x140>
 80074f0:	9906      	ldr	r1, [sp, #24]
 80074f2:	2908      	cmp	r1, #8
 80074f4:	bfdd      	ittte	le
 80074f6:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80074f8:	fb02 3301 	mlale	r3, r2, r1, r3
 80074fc:	9309      	strle	r3, [sp, #36]	; 0x24
 80074fe:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007502:	9b06      	ldr	r3, [sp, #24]
 8007504:	3001      	adds	r0, #1
 8007506:	3301      	adds	r3, #1
 8007508:	9306      	str	r3, [sp, #24]
 800750a:	9011      	str	r0, [sp, #68]	; 0x44
 800750c:	e7be      	b.n	800748c <_strtod_l+0x154>
 800750e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007510:	195a      	adds	r2, r3, r5
 8007512:	9211      	str	r2, [sp, #68]	; 0x44
 8007514:	5d5a      	ldrb	r2, [r3, r5]
 8007516:	9b06      	ldr	r3, [sp, #24]
 8007518:	b3a3      	cbz	r3, 8007584 <_strtod_l+0x24c>
 800751a:	4607      	mov	r7, r0
 800751c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007520:	2909      	cmp	r1, #9
 8007522:	d912      	bls.n	800754a <_strtod_l+0x212>
 8007524:	2101      	movs	r1, #1
 8007526:	e7c3      	b.n	80074b0 <_strtod_l+0x178>
 8007528:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800752a:	1c5a      	adds	r2, r3, #1
 800752c:	9211      	str	r2, [sp, #68]	; 0x44
 800752e:	785a      	ldrb	r2, [r3, #1]
 8007530:	3001      	adds	r0, #1
 8007532:	2a30      	cmp	r2, #48	; 0x30
 8007534:	d0f8      	beq.n	8007528 <_strtod_l+0x1f0>
 8007536:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800753a:	2b08      	cmp	r3, #8
 800753c:	f200 8497 	bhi.w	8007e6e <_strtod_l+0xb36>
 8007540:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007542:	930a      	str	r3, [sp, #40]	; 0x28
 8007544:	4607      	mov	r7, r0
 8007546:	2000      	movs	r0, #0
 8007548:	4603      	mov	r3, r0
 800754a:	3a30      	subs	r2, #48	; 0x30
 800754c:	f100 0101 	add.w	r1, r0, #1
 8007550:	d012      	beq.n	8007578 <_strtod_l+0x240>
 8007552:	440f      	add	r7, r1
 8007554:	eb00 0c03 	add.w	ip, r0, r3
 8007558:	4619      	mov	r1, r3
 800755a:	250a      	movs	r5, #10
 800755c:	4561      	cmp	r1, ip
 800755e:	d113      	bne.n	8007588 <_strtod_l+0x250>
 8007560:	1819      	adds	r1, r3, r0
 8007562:	2908      	cmp	r1, #8
 8007564:	f103 0301 	add.w	r3, r3, #1
 8007568:	4403      	add	r3, r0
 800756a:	dc1c      	bgt.n	80075a6 <_strtod_l+0x26e>
 800756c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800756e:	210a      	movs	r1, #10
 8007570:	fb01 2200 	mla	r2, r1, r0, r2
 8007574:	9209      	str	r2, [sp, #36]	; 0x24
 8007576:	2100      	movs	r1, #0
 8007578:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800757a:	1c50      	adds	r0, r2, #1
 800757c:	9011      	str	r0, [sp, #68]	; 0x44
 800757e:	7852      	ldrb	r2, [r2, #1]
 8007580:	4608      	mov	r0, r1
 8007582:	e7cb      	b.n	800751c <_strtod_l+0x1e4>
 8007584:	9806      	ldr	r0, [sp, #24]
 8007586:	e7d4      	b.n	8007532 <_strtod_l+0x1fa>
 8007588:	2908      	cmp	r1, #8
 800758a:	dc04      	bgt.n	8007596 <_strtod_l+0x25e>
 800758c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800758e:	436e      	muls	r6, r5
 8007590:	9609      	str	r6, [sp, #36]	; 0x24
 8007592:	3101      	adds	r1, #1
 8007594:	e7e2      	b.n	800755c <_strtod_l+0x224>
 8007596:	f101 0e01 	add.w	lr, r1, #1
 800759a:	f1be 0f10 	cmp.w	lr, #16
 800759e:	bfd8      	it	le
 80075a0:	fb05 fa0a 	mulle.w	sl, r5, sl
 80075a4:	e7f5      	b.n	8007592 <_strtod_l+0x25a>
 80075a6:	2b10      	cmp	r3, #16
 80075a8:	bfdc      	itt	le
 80075aa:	210a      	movle	r1, #10
 80075ac:	fb01 2a0a 	mlale	sl, r1, sl, r2
 80075b0:	e7e1      	b.n	8007576 <_strtod_l+0x23e>
 80075b2:	2700      	movs	r7, #0
 80075b4:	2101      	movs	r1, #1
 80075b6:	e780      	b.n	80074ba <_strtod_l+0x182>
 80075b8:	f04f 0e00 	mov.w	lr, #0
 80075bc:	f10b 0202 	add.w	r2, fp, #2
 80075c0:	9211      	str	r2, [sp, #68]	; 0x44
 80075c2:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80075c6:	e789      	b.n	80074dc <_strtod_l+0x1a4>
 80075c8:	f04f 0e01 	mov.w	lr, #1
 80075cc:	e7f6      	b.n	80075bc <_strtod_l+0x284>
 80075ce:	bf00      	nop
 80075d0:	0800afb8 	.word	0x0800afb8
 80075d4:	0800ad70 	.word	0x0800ad70
 80075d8:	7ff00000 	.word	0x7ff00000
 80075dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80075de:	1c55      	adds	r5, r2, #1
 80075e0:	9511      	str	r5, [sp, #68]	; 0x44
 80075e2:	7852      	ldrb	r2, [r2, #1]
 80075e4:	2a30      	cmp	r2, #48	; 0x30
 80075e6:	d0f9      	beq.n	80075dc <_strtod_l+0x2a4>
 80075e8:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80075ec:	2d08      	cmp	r5, #8
 80075ee:	f63f af7b 	bhi.w	80074e8 <_strtod_l+0x1b0>
 80075f2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80075f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80075f8:	9207      	str	r2, [sp, #28]
 80075fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80075fc:	1c55      	adds	r5, r2, #1
 80075fe:	9511      	str	r5, [sp, #68]	; 0x44
 8007600:	7852      	ldrb	r2, [r2, #1]
 8007602:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007606:	2e09      	cmp	r6, #9
 8007608:	d937      	bls.n	800767a <_strtod_l+0x342>
 800760a:	9e07      	ldr	r6, [sp, #28]
 800760c:	1bad      	subs	r5, r5, r6
 800760e:	2d08      	cmp	r5, #8
 8007610:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007614:	dc02      	bgt.n	800761c <_strtod_l+0x2e4>
 8007616:	4565      	cmp	r5, ip
 8007618:	bfa8      	it	ge
 800761a:	4665      	movge	r5, ip
 800761c:	f1be 0f00 	cmp.w	lr, #0
 8007620:	d000      	beq.n	8007624 <_strtod_l+0x2ec>
 8007622:	426d      	negs	r5, r5
 8007624:	2b00      	cmp	r3, #0
 8007626:	d14d      	bne.n	80076c4 <_strtod_l+0x38c>
 8007628:	9b04      	ldr	r3, [sp, #16]
 800762a:	4303      	orrs	r3, r0
 800762c:	f47f aec8 	bne.w	80073c0 <_strtod_l+0x88>
 8007630:	2900      	cmp	r1, #0
 8007632:	f47f aee2 	bne.w	80073fa <_strtod_l+0xc2>
 8007636:	2a69      	cmp	r2, #105	; 0x69
 8007638:	d027      	beq.n	800768a <_strtod_l+0x352>
 800763a:	dc24      	bgt.n	8007686 <_strtod_l+0x34e>
 800763c:	2a49      	cmp	r2, #73	; 0x49
 800763e:	d024      	beq.n	800768a <_strtod_l+0x352>
 8007640:	2a4e      	cmp	r2, #78	; 0x4e
 8007642:	f47f aeda 	bne.w	80073fa <_strtod_l+0xc2>
 8007646:	4996      	ldr	r1, [pc, #600]	; (80078a0 <_strtod_l+0x568>)
 8007648:	a811      	add	r0, sp, #68	; 0x44
 800764a:	f001 fd6f 	bl	800912c <__match>
 800764e:	2800      	cmp	r0, #0
 8007650:	f43f aed3 	beq.w	80073fa <_strtod_l+0xc2>
 8007654:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	2b28      	cmp	r3, #40	; 0x28
 800765a:	d12d      	bne.n	80076b8 <_strtod_l+0x380>
 800765c:	4991      	ldr	r1, [pc, #580]	; (80078a4 <_strtod_l+0x56c>)
 800765e:	aa14      	add	r2, sp, #80	; 0x50
 8007660:	a811      	add	r0, sp, #68	; 0x44
 8007662:	f001 fd77 	bl	8009154 <__hexnan>
 8007666:	2805      	cmp	r0, #5
 8007668:	d126      	bne.n	80076b8 <_strtod_l+0x380>
 800766a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800766c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007670:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007674:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007678:	e6a2      	b.n	80073c0 <_strtod_l+0x88>
 800767a:	250a      	movs	r5, #10
 800767c:	fb05 250c 	mla	r5, r5, ip, r2
 8007680:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8007684:	e7b9      	b.n	80075fa <_strtod_l+0x2c2>
 8007686:	2a6e      	cmp	r2, #110	; 0x6e
 8007688:	e7db      	b.n	8007642 <_strtod_l+0x30a>
 800768a:	4987      	ldr	r1, [pc, #540]	; (80078a8 <_strtod_l+0x570>)
 800768c:	a811      	add	r0, sp, #68	; 0x44
 800768e:	f001 fd4d 	bl	800912c <__match>
 8007692:	2800      	cmp	r0, #0
 8007694:	f43f aeb1 	beq.w	80073fa <_strtod_l+0xc2>
 8007698:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800769a:	4984      	ldr	r1, [pc, #528]	; (80078ac <_strtod_l+0x574>)
 800769c:	3b01      	subs	r3, #1
 800769e:	a811      	add	r0, sp, #68	; 0x44
 80076a0:	9311      	str	r3, [sp, #68]	; 0x44
 80076a2:	f001 fd43 	bl	800912c <__match>
 80076a6:	b910      	cbnz	r0, 80076ae <_strtod_l+0x376>
 80076a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80076aa:	3301      	adds	r3, #1
 80076ac:	9311      	str	r3, [sp, #68]	; 0x44
 80076ae:	f8df 9210 	ldr.w	r9, [pc, #528]	; 80078c0 <_strtod_l+0x588>
 80076b2:	f04f 0800 	mov.w	r8, #0
 80076b6:	e683      	b.n	80073c0 <_strtod_l+0x88>
 80076b8:	487d      	ldr	r0, [pc, #500]	; (80078b0 <_strtod_l+0x578>)
 80076ba:	f002 fd25 	bl	800a108 <nan>
 80076be:	ec59 8b10 	vmov	r8, r9, d0
 80076c2:	e67d      	b.n	80073c0 <_strtod_l+0x88>
 80076c4:	1bea      	subs	r2, r5, r7
 80076c6:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 80076ca:	9207      	str	r2, [sp, #28]
 80076cc:	9a06      	ldr	r2, [sp, #24]
 80076ce:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80076d2:	2a00      	cmp	r2, #0
 80076d4:	bf08      	it	eq
 80076d6:	461a      	moveq	r2, r3
 80076d8:	2b10      	cmp	r3, #16
 80076da:	9206      	str	r2, [sp, #24]
 80076dc:	461a      	mov	r2, r3
 80076de:	bfa8      	it	ge
 80076e0:	2210      	movge	r2, #16
 80076e2:	2b09      	cmp	r3, #9
 80076e4:	ec59 8b17 	vmov	r8, r9, d7
 80076e8:	dd0c      	ble.n	8007704 <_strtod_l+0x3cc>
 80076ea:	4972      	ldr	r1, [pc, #456]	; (80078b4 <_strtod_l+0x57c>)
 80076ec:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80076f0:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 80076f4:	ee06 aa90 	vmov	s13, sl
 80076f8:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80076fc:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007700:	ec59 8b16 	vmov	r8, r9, d6
 8007704:	2b0f      	cmp	r3, #15
 8007706:	dc36      	bgt.n	8007776 <_strtod_l+0x43e>
 8007708:	9907      	ldr	r1, [sp, #28]
 800770a:	2900      	cmp	r1, #0
 800770c:	f43f ae58 	beq.w	80073c0 <_strtod_l+0x88>
 8007710:	dd23      	ble.n	800775a <_strtod_l+0x422>
 8007712:	2916      	cmp	r1, #22
 8007714:	dc0b      	bgt.n	800772e <_strtod_l+0x3f6>
 8007716:	4b67      	ldr	r3, [pc, #412]	; (80078b4 <_strtod_l+0x57c>)
 8007718:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800771c:	ed93 7b00 	vldr	d7, [r3]
 8007720:	ec49 8b16 	vmov	d6, r8, r9
 8007724:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007728:	ec59 8b17 	vmov	r8, r9, d7
 800772c:	e648      	b.n	80073c0 <_strtod_l+0x88>
 800772e:	9807      	ldr	r0, [sp, #28]
 8007730:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8007734:	4281      	cmp	r1, r0
 8007736:	db1e      	blt.n	8007776 <_strtod_l+0x43e>
 8007738:	4a5e      	ldr	r2, [pc, #376]	; (80078b4 <_strtod_l+0x57c>)
 800773a:	f1c3 030f 	rsb	r3, r3, #15
 800773e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8007742:	ed91 7b00 	vldr	d7, [r1]
 8007746:	ec49 8b16 	vmov	d6, r8, r9
 800774a:	1ac3      	subs	r3, r0, r3
 800774c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8007750:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007754:	ed92 6b00 	vldr	d6, [r2]
 8007758:	e7e4      	b.n	8007724 <_strtod_l+0x3ec>
 800775a:	9907      	ldr	r1, [sp, #28]
 800775c:	3116      	adds	r1, #22
 800775e:	db0a      	blt.n	8007776 <_strtod_l+0x43e>
 8007760:	4b54      	ldr	r3, [pc, #336]	; (80078b4 <_strtod_l+0x57c>)
 8007762:	1b7d      	subs	r5, r7, r5
 8007764:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007768:	ed95 7b00 	vldr	d7, [r5]
 800776c:	ec49 8b16 	vmov	d6, r8, r9
 8007770:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007774:	e7d8      	b.n	8007728 <_strtod_l+0x3f0>
 8007776:	9907      	ldr	r1, [sp, #28]
 8007778:	1a9a      	subs	r2, r3, r2
 800777a:	440a      	add	r2, r1
 800777c:	2a00      	cmp	r2, #0
 800777e:	dd6f      	ble.n	8007860 <_strtod_l+0x528>
 8007780:	f012 000f 	ands.w	r0, r2, #15
 8007784:	d00a      	beq.n	800779c <_strtod_l+0x464>
 8007786:	494b      	ldr	r1, [pc, #300]	; (80078b4 <_strtod_l+0x57c>)
 8007788:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800778c:	ed91 7b00 	vldr	d7, [r1]
 8007790:	ec49 8b16 	vmov	d6, r8, r9
 8007794:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007798:	ec59 8b17 	vmov	r8, r9, d7
 800779c:	f032 020f 	bics.w	r2, r2, #15
 80077a0:	d04f      	beq.n	8007842 <_strtod_l+0x50a>
 80077a2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80077a6:	dd22      	ble.n	80077ee <_strtod_l+0x4b6>
 80077a8:	2500      	movs	r5, #0
 80077aa:	462e      	mov	r6, r5
 80077ac:	9506      	str	r5, [sp, #24]
 80077ae:	462f      	mov	r7, r5
 80077b0:	2322      	movs	r3, #34	; 0x22
 80077b2:	f8df 910c 	ldr.w	r9, [pc, #268]	; 80078c0 <_strtod_l+0x588>
 80077b6:	6023      	str	r3, [r4, #0]
 80077b8:	f04f 0800 	mov.w	r8, #0
 80077bc:	9b06      	ldr	r3, [sp, #24]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	f43f adfe 	beq.w	80073c0 <_strtod_l+0x88>
 80077c4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80077c6:	4620      	mov	r0, r4
 80077c8:	f001 fdcc 	bl	8009364 <_Bfree>
 80077cc:	4639      	mov	r1, r7
 80077ce:	4620      	mov	r0, r4
 80077d0:	f001 fdc8 	bl	8009364 <_Bfree>
 80077d4:	4631      	mov	r1, r6
 80077d6:	4620      	mov	r0, r4
 80077d8:	f001 fdc4 	bl	8009364 <_Bfree>
 80077dc:	9906      	ldr	r1, [sp, #24]
 80077de:	4620      	mov	r0, r4
 80077e0:	f001 fdc0 	bl	8009364 <_Bfree>
 80077e4:	4629      	mov	r1, r5
 80077e6:	4620      	mov	r0, r4
 80077e8:	f001 fdbc 	bl	8009364 <_Bfree>
 80077ec:	e5e8      	b.n	80073c0 <_strtod_l+0x88>
 80077ee:	2000      	movs	r0, #0
 80077f0:	ec49 8b17 	vmov	d7, r8, r9
 80077f4:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 80078b8 <_strtod_l+0x580>
 80077f8:	1112      	asrs	r2, r2, #4
 80077fa:	4601      	mov	r1, r0
 80077fc:	2a01      	cmp	r2, #1
 80077fe:	dc23      	bgt.n	8007848 <_strtod_l+0x510>
 8007800:	b108      	cbz	r0, 8007806 <_strtod_l+0x4ce>
 8007802:	ec59 8b17 	vmov	r8, r9, d7
 8007806:	4a2c      	ldr	r2, [pc, #176]	; (80078b8 <_strtod_l+0x580>)
 8007808:	482c      	ldr	r0, [pc, #176]	; (80078bc <_strtod_l+0x584>)
 800780a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800780e:	ed92 7b00 	vldr	d7, [r2]
 8007812:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007816:	ec49 8b16 	vmov	d6, r8, r9
 800781a:	4a29      	ldr	r2, [pc, #164]	; (80078c0 <_strtod_l+0x588>)
 800781c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007820:	ee17 1a90 	vmov	r1, s15
 8007824:	400a      	ands	r2, r1
 8007826:	4282      	cmp	r2, r0
 8007828:	ec59 8b17 	vmov	r8, r9, d7
 800782c:	d8bc      	bhi.n	80077a8 <_strtod_l+0x470>
 800782e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8007832:	4282      	cmp	r2, r0
 8007834:	bf86      	itte	hi
 8007836:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80078c4 <_strtod_l+0x58c>
 800783a:	f04f 38ff 	movhi.w	r8, #4294967295
 800783e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8007842:	2200      	movs	r2, #0
 8007844:	9204      	str	r2, [sp, #16]
 8007846:	e078      	b.n	800793a <_strtod_l+0x602>
 8007848:	07d6      	lsls	r6, r2, #31
 800784a:	d504      	bpl.n	8007856 <_strtod_l+0x51e>
 800784c:	ed9c 6b00 	vldr	d6, [ip]
 8007850:	2001      	movs	r0, #1
 8007852:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007856:	3101      	adds	r1, #1
 8007858:	1052      	asrs	r2, r2, #1
 800785a:	f10c 0c08 	add.w	ip, ip, #8
 800785e:	e7cd      	b.n	80077fc <_strtod_l+0x4c4>
 8007860:	d0ef      	beq.n	8007842 <_strtod_l+0x50a>
 8007862:	4252      	negs	r2, r2
 8007864:	f012 000f 	ands.w	r0, r2, #15
 8007868:	d00a      	beq.n	8007880 <_strtod_l+0x548>
 800786a:	4912      	ldr	r1, [pc, #72]	; (80078b4 <_strtod_l+0x57c>)
 800786c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007870:	ed91 7b00 	vldr	d7, [r1]
 8007874:	ec49 8b16 	vmov	d6, r8, r9
 8007878:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800787c:	ec59 8b17 	vmov	r8, r9, d7
 8007880:	1112      	asrs	r2, r2, #4
 8007882:	d0de      	beq.n	8007842 <_strtod_l+0x50a>
 8007884:	2a1f      	cmp	r2, #31
 8007886:	dd1f      	ble.n	80078c8 <_strtod_l+0x590>
 8007888:	2500      	movs	r5, #0
 800788a:	462e      	mov	r6, r5
 800788c:	9506      	str	r5, [sp, #24]
 800788e:	462f      	mov	r7, r5
 8007890:	2322      	movs	r3, #34	; 0x22
 8007892:	f04f 0800 	mov.w	r8, #0
 8007896:	f04f 0900 	mov.w	r9, #0
 800789a:	6023      	str	r3, [r4, #0]
 800789c:	e78e      	b.n	80077bc <_strtod_l+0x484>
 800789e:	bf00      	nop
 80078a0:	0800ad41 	.word	0x0800ad41
 80078a4:	0800ad84 	.word	0x0800ad84
 80078a8:	0800ad39 	.word	0x0800ad39
 80078ac:	0800aec4 	.word	0x0800aec4
 80078b0:	0800b170 	.word	0x0800b170
 80078b4:	0800b050 	.word	0x0800b050
 80078b8:	0800b028 	.word	0x0800b028
 80078bc:	7ca00000 	.word	0x7ca00000
 80078c0:	7ff00000 	.word	0x7ff00000
 80078c4:	7fefffff 	.word	0x7fefffff
 80078c8:	f012 0110 	ands.w	r1, r2, #16
 80078cc:	bf18      	it	ne
 80078ce:	216a      	movne	r1, #106	; 0x6a
 80078d0:	9104      	str	r1, [sp, #16]
 80078d2:	ec49 8b17 	vmov	d7, r8, r9
 80078d6:	49be      	ldr	r1, [pc, #760]	; (8007bd0 <_strtod_l+0x898>)
 80078d8:	2000      	movs	r0, #0
 80078da:	07d6      	lsls	r6, r2, #31
 80078dc:	d504      	bpl.n	80078e8 <_strtod_l+0x5b0>
 80078de:	ed91 6b00 	vldr	d6, [r1]
 80078e2:	2001      	movs	r0, #1
 80078e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80078e8:	1052      	asrs	r2, r2, #1
 80078ea:	f101 0108 	add.w	r1, r1, #8
 80078ee:	d1f4      	bne.n	80078da <_strtod_l+0x5a2>
 80078f0:	b108      	cbz	r0, 80078f6 <_strtod_l+0x5be>
 80078f2:	ec59 8b17 	vmov	r8, r9, d7
 80078f6:	9a04      	ldr	r2, [sp, #16]
 80078f8:	b1c2      	cbz	r2, 800792c <_strtod_l+0x5f4>
 80078fa:	f3c9 510a 	ubfx	r1, r9, #20, #11
 80078fe:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8007902:	2a00      	cmp	r2, #0
 8007904:	4648      	mov	r0, r9
 8007906:	dd11      	ble.n	800792c <_strtod_l+0x5f4>
 8007908:	2a1f      	cmp	r2, #31
 800790a:	f340 812e 	ble.w	8007b6a <_strtod_l+0x832>
 800790e:	2a34      	cmp	r2, #52	; 0x34
 8007910:	bfde      	ittt	le
 8007912:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8007916:	f04f 32ff 	movle.w	r2, #4294967295
 800791a:	fa02 f101 	lslle.w	r1, r2, r1
 800791e:	f04f 0800 	mov.w	r8, #0
 8007922:	bfcc      	ite	gt
 8007924:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007928:	ea01 0900 	andle.w	r9, r1, r0
 800792c:	ec49 8b17 	vmov	d7, r8, r9
 8007930:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007938:	d0a6      	beq.n	8007888 <_strtod_l+0x550>
 800793a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800793c:	9200      	str	r2, [sp, #0]
 800793e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007940:	9a06      	ldr	r2, [sp, #24]
 8007942:	4620      	mov	r0, r4
 8007944:	f001 fd76 	bl	8009434 <__s2b>
 8007948:	9006      	str	r0, [sp, #24]
 800794a:	2800      	cmp	r0, #0
 800794c:	f43f af2c 	beq.w	80077a8 <_strtod_l+0x470>
 8007950:	9b07      	ldr	r3, [sp, #28]
 8007952:	1b7d      	subs	r5, r7, r5
 8007954:	2b00      	cmp	r3, #0
 8007956:	bfb4      	ite	lt
 8007958:	462b      	movlt	r3, r5
 800795a:	2300      	movge	r3, #0
 800795c:	9309      	str	r3, [sp, #36]	; 0x24
 800795e:	9b07      	ldr	r3, [sp, #28]
 8007960:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8007bb0 <_strtod_l+0x878>
 8007964:	ed9f ab94 	vldr	d10, [pc, #592]	; 8007bb8 <_strtod_l+0x880>
 8007968:	ed9f bb95 	vldr	d11, [pc, #596]	; 8007bc0 <_strtod_l+0x888>
 800796c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007970:	2500      	movs	r5, #0
 8007972:	930c      	str	r3, [sp, #48]	; 0x30
 8007974:	462e      	mov	r6, r5
 8007976:	9b06      	ldr	r3, [sp, #24]
 8007978:	4620      	mov	r0, r4
 800797a:	6859      	ldr	r1, [r3, #4]
 800797c:	f001 fcb2 	bl	80092e4 <_Balloc>
 8007980:	4607      	mov	r7, r0
 8007982:	2800      	cmp	r0, #0
 8007984:	f43f af14 	beq.w	80077b0 <_strtod_l+0x478>
 8007988:	9b06      	ldr	r3, [sp, #24]
 800798a:	691a      	ldr	r2, [r3, #16]
 800798c:	3202      	adds	r2, #2
 800798e:	f103 010c 	add.w	r1, r3, #12
 8007992:	0092      	lsls	r2, r2, #2
 8007994:	300c      	adds	r0, #12
 8007996:	f001 fc97 	bl	80092c8 <memcpy>
 800799a:	ec49 8b10 	vmov	d0, r8, r9
 800799e:	aa14      	add	r2, sp, #80	; 0x50
 80079a0:	a913      	add	r1, sp, #76	; 0x4c
 80079a2:	4620      	mov	r0, r4
 80079a4:	f002 f88c 	bl	8009ac0 <__d2b>
 80079a8:	ec49 8b18 	vmov	d8, r8, r9
 80079ac:	9012      	str	r0, [sp, #72]	; 0x48
 80079ae:	2800      	cmp	r0, #0
 80079b0:	f43f aefe 	beq.w	80077b0 <_strtod_l+0x478>
 80079b4:	2101      	movs	r1, #1
 80079b6:	4620      	mov	r0, r4
 80079b8:	f001 fdd6 	bl	8009568 <__i2b>
 80079bc:	4606      	mov	r6, r0
 80079be:	2800      	cmp	r0, #0
 80079c0:	f43f aef6 	beq.w	80077b0 <_strtod_l+0x478>
 80079c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80079c6:	9914      	ldr	r1, [sp, #80]	; 0x50
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	bfab      	itete	ge
 80079cc:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 80079ce:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 80079d0:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 80079d4:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 80079d8:	bfac      	ite	ge
 80079da:	eb03 0b02 	addge.w	fp, r3, r2
 80079de:	eba2 0a03 	sublt.w	sl, r2, r3
 80079e2:	9a04      	ldr	r2, [sp, #16]
 80079e4:	1a9b      	subs	r3, r3, r2
 80079e6:	440b      	add	r3, r1
 80079e8:	4a7a      	ldr	r2, [pc, #488]	; (8007bd4 <_strtod_l+0x89c>)
 80079ea:	3b01      	subs	r3, #1
 80079ec:	4293      	cmp	r3, r2
 80079ee:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80079f2:	f280 80cd 	bge.w	8007b90 <_strtod_l+0x858>
 80079f6:	1ad2      	subs	r2, r2, r3
 80079f8:	2a1f      	cmp	r2, #31
 80079fa:	eba1 0102 	sub.w	r1, r1, r2
 80079fe:	f04f 0001 	mov.w	r0, #1
 8007a02:	f300 80b9 	bgt.w	8007b78 <_strtod_l+0x840>
 8007a06:	fa00 f302 	lsl.w	r3, r0, r2
 8007a0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	930a      	str	r3, [sp, #40]	; 0x28
 8007a10:	eb0b 0301 	add.w	r3, fp, r1
 8007a14:	9a04      	ldr	r2, [sp, #16]
 8007a16:	459b      	cmp	fp, r3
 8007a18:	448a      	add	sl, r1
 8007a1a:	4492      	add	sl, r2
 8007a1c:	465a      	mov	r2, fp
 8007a1e:	bfa8      	it	ge
 8007a20:	461a      	movge	r2, r3
 8007a22:	4552      	cmp	r2, sl
 8007a24:	bfa8      	it	ge
 8007a26:	4652      	movge	r2, sl
 8007a28:	2a00      	cmp	r2, #0
 8007a2a:	bfc2      	ittt	gt
 8007a2c:	1a9b      	subgt	r3, r3, r2
 8007a2e:	ebaa 0a02 	subgt.w	sl, sl, r2
 8007a32:	ebab 0b02 	subgt.w	fp, fp, r2
 8007a36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a38:	2a00      	cmp	r2, #0
 8007a3a:	dd18      	ble.n	8007a6e <_strtod_l+0x736>
 8007a3c:	4631      	mov	r1, r6
 8007a3e:	4620      	mov	r0, r4
 8007a40:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a42:	f001 fe51 	bl	80096e8 <__pow5mult>
 8007a46:	4606      	mov	r6, r0
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	f43f aeb1 	beq.w	80077b0 <_strtod_l+0x478>
 8007a4e:	4601      	mov	r1, r0
 8007a50:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007a52:	4620      	mov	r0, r4
 8007a54:	f001 fd9e 	bl	8009594 <__multiply>
 8007a58:	900e      	str	r0, [sp, #56]	; 0x38
 8007a5a:	2800      	cmp	r0, #0
 8007a5c:	f43f aea8 	beq.w	80077b0 <_strtod_l+0x478>
 8007a60:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007a62:	4620      	mov	r0, r4
 8007a64:	f001 fc7e 	bl	8009364 <_Bfree>
 8007a68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a6c:	9212      	str	r2, [sp, #72]	; 0x48
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	f300 8093 	bgt.w	8007b9a <_strtod_l+0x862>
 8007a74:	9b07      	ldr	r3, [sp, #28]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	dd08      	ble.n	8007a8c <_strtod_l+0x754>
 8007a7a:	4639      	mov	r1, r7
 8007a7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a7e:	4620      	mov	r0, r4
 8007a80:	f001 fe32 	bl	80096e8 <__pow5mult>
 8007a84:	4607      	mov	r7, r0
 8007a86:	2800      	cmp	r0, #0
 8007a88:	f43f ae92 	beq.w	80077b0 <_strtod_l+0x478>
 8007a8c:	f1ba 0f00 	cmp.w	sl, #0
 8007a90:	dd08      	ble.n	8007aa4 <_strtod_l+0x76c>
 8007a92:	4639      	mov	r1, r7
 8007a94:	4652      	mov	r2, sl
 8007a96:	4620      	mov	r0, r4
 8007a98:	f001 fe80 	bl	800979c <__lshift>
 8007a9c:	4607      	mov	r7, r0
 8007a9e:	2800      	cmp	r0, #0
 8007aa0:	f43f ae86 	beq.w	80077b0 <_strtod_l+0x478>
 8007aa4:	f1bb 0f00 	cmp.w	fp, #0
 8007aa8:	dd08      	ble.n	8007abc <_strtod_l+0x784>
 8007aaa:	4631      	mov	r1, r6
 8007aac:	465a      	mov	r2, fp
 8007aae:	4620      	mov	r0, r4
 8007ab0:	f001 fe74 	bl	800979c <__lshift>
 8007ab4:	4606      	mov	r6, r0
 8007ab6:	2800      	cmp	r0, #0
 8007ab8:	f43f ae7a 	beq.w	80077b0 <_strtod_l+0x478>
 8007abc:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007abe:	463a      	mov	r2, r7
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	f001 fef7 	bl	80098b4 <__mdiff>
 8007ac6:	4605      	mov	r5, r0
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	f43f ae71 	beq.w	80077b0 <_strtod_l+0x478>
 8007ace:	2300      	movs	r3, #0
 8007ad0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8007ad4:	60c3      	str	r3, [r0, #12]
 8007ad6:	4631      	mov	r1, r6
 8007ad8:	f001 fed0 	bl	800987c <__mcmp>
 8007adc:	2800      	cmp	r0, #0
 8007ade:	da7d      	bge.n	8007bdc <_strtod_l+0x8a4>
 8007ae0:	ea5a 0308 	orrs.w	r3, sl, r8
 8007ae4:	f040 80a3 	bne.w	8007c2e <_strtod_l+0x8f6>
 8007ae8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f040 809e 	bne.w	8007c2e <_strtod_l+0x8f6>
 8007af2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007af6:	0d1b      	lsrs	r3, r3, #20
 8007af8:	051b      	lsls	r3, r3, #20
 8007afa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007afe:	f240 8096 	bls.w	8007c2e <_strtod_l+0x8f6>
 8007b02:	696b      	ldr	r3, [r5, #20]
 8007b04:	b91b      	cbnz	r3, 8007b0e <_strtod_l+0x7d6>
 8007b06:	692b      	ldr	r3, [r5, #16]
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	f340 8090 	ble.w	8007c2e <_strtod_l+0x8f6>
 8007b0e:	4629      	mov	r1, r5
 8007b10:	2201      	movs	r2, #1
 8007b12:	4620      	mov	r0, r4
 8007b14:	f001 fe42 	bl	800979c <__lshift>
 8007b18:	4631      	mov	r1, r6
 8007b1a:	4605      	mov	r5, r0
 8007b1c:	f001 feae 	bl	800987c <__mcmp>
 8007b20:	2800      	cmp	r0, #0
 8007b22:	f340 8084 	ble.w	8007c2e <_strtod_l+0x8f6>
 8007b26:	9904      	ldr	r1, [sp, #16]
 8007b28:	4a2b      	ldr	r2, [pc, #172]	; (8007bd8 <_strtod_l+0x8a0>)
 8007b2a:	464b      	mov	r3, r9
 8007b2c:	2900      	cmp	r1, #0
 8007b2e:	f000 809d 	beq.w	8007c6c <_strtod_l+0x934>
 8007b32:	ea02 0109 	and.w	r1, r2, r9
 8007b36:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007b3a:	f300 8097 	bgt.w	8007c6c <_strtod_l+0x934>
 8007b3e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007b42:	f77f aea5 	ble.w	8007890 <_strtod_l+0x558>
 8007b46:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8007bc8 <_strtod_l+0x890>
 8007b4a:	ec49 8b16 	vmov	d6, r8, r9
 8007b4e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007b52:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007b56:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	bf08      	it	eq
 8007b5e:	2322      	moveq	r3, #34	; 0x22
 8007b60:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007b64:	bf08      	it	eq
 8007b66:	6023      	streq	r3, [r4, #0]
 8007b68:	e62c      	b.n	80077c4 <_strtod_l+0x48c>
 8007b6a:	f04f 31ff 	mov.w	r1, #4294967295
 8007b6e:	fa01 f202 	lsl.w	r2, r1, r2
 8007b72:	ea02 0808 	and.w	r8, r2, r8
 8007b76:	e6d9      	b.n	800792c <_strtod_l+0x5f4>
 8007b78:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8007b7c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8007b80:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8007b84:	33e2      	adds	r3, #226	; 0xe2
 8007b86:	fa00 f303 	lsl.w	r3, r0, r3
 8007b8a:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8007b8e:	e73f      	b.n	8007a10 <_strtod_l+0x6d8>
 8007b90:	2200      	movs	r2, #0
 8007b92:	2301      	movs	r3, #1
 8007b94:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007b98:	e73a      	b.n	8007a10 <_strtod_l+0x6d8>
 8007b9a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	f001 fdfc 	bl	800979c <__lshift>
 8007ba4:	9012      	str	r0, [sp, #72]	; 0x48
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	f47f af64 	bne.w	8007a74 <_strtod_l+0x73c>
 8007bac:	e600      	b.n	80077b0 <_strtod_l+0x478>
 8007bae:	bf00      	nop
 8007bb0:	94a03595 	.word	0x94a03595
 8007bb4:	3fcfffff 	.word	0x3fcfffff
 8007bb8:	94a03595 	.word	0x94a03595
 8007bbc:	3fdfffff 	.word	0x3fdfffff
 8007bc0:	35afe535 	.word	0x35afe535
 8007bc4:	3fe00000 	.word	0x3fe00000
 8007bc8:	00000000 	.word	0x00000000
 8007bcc:	39500000 	.word	0x39500000
 8007bd0:	0800ad98 	.word	0x0800ad98
 8007bd4:	fffffc02 	.word	0xfffffc02
 8007bd8:	7ff00000 	.word	0x7ff00000
 8007bdc:	46cb      	mov	fp, r9
 8007bde:	d15f      	bne.n	8007ca0 <_strtod_l+0x968>
 8007be0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007be4:	f1ba 0f00 	cmp.w	sl, #0
 8007be8:	d02a      	beq.n	8007c40 <_strtod_l+0x908>
 8007bea:	4aa7      	ldr	r2, [pc, #668]	; (8007e88 <_strtod_l+0xb50>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d12b      	bne.n	8007c48 <_strtod_l+0x910>
 8007bf0:	9b04      	ldr	r3, [sp, #16]
 8007bf2:	4642      	mov	r2, r8
 8007bf4:	b1fb      	cbz	r3, 8007c36 <_strtod_l+0x8fe>
 8007bf6:	4ba5      	ldr	r3, [pc, #660]	; (8007e8c <_strtod_l+0xb54>)
 8007bf8:	ea09 0303 	and.w	r3, r9, r3
 8007bfc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007c00:	f04f 31ff 	mov.w	r1, #4294967295
 8007c04:	d81a      	bhi.n	8007c3c <_strtod_l+0x904>
 8007c06:	0d1b      	lsrs	r3, r3, #20
 8007c08:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d119      	bne.n	8007c48 <_strtod_l+0x910>
 8007c14:	4b9e      	ldr	r3, [pc, #632]	; (8007e90 <_strtod_l+0xb58>)
 8007c16:	459b      	cmp	fp, r3
 8007c18:	d102      	bne.n	8007c20 <_strtod_l+0x8e8>
 8007c1a:	3201      	adds	r2, #1
 8007c1c:	f43f adc8 	beq.w	80077b0 <_strtod_l+0x478>
 8007c20:	4b9a      	ldr	r3, [pc, #616]	; (8007e8c <_strtod_l+0xb54>)
 8007c22:	ea0b 0303 	and.w	r3, fp, r3
 8007c26:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007c2a:	f04f 0800 	mov.w	r8, #0
 8007c2e:	9b04      	ldr	r3, [sp, #16]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d188      	bne.n	8007b46 <_strtod_l+0x80e>
 8007c34:	e5c6      	b.n	80077c4 <_strtod_l+0x48c>
 8007c36:	f04f 33ff 	mov.w	r3, #4294967295
 8007c3a:	e7e9      	b.n	8007c10 <_strtod_l+0x8d8>
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	e7e7      	b.n	8007c10 <_strtod_l+0x8d8>
 8007c40:	ea53 0308 	orrs.w	r3, r3, r8
 8007c44:	f43f af6f 	beq.w	8007b26 <_strtod_l+0x7ee>
 8007c48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c4a:	b1cb      	cbz	r3, 8007c80 <_strtod_l+0x948>
 8007c4c:	ea13 0f0b 	tst.w	r3, fp
 8007c50:	d0ed      	beq.n	8007c2e <_strtod_l+0x8f6>
 8007c52:	9a04      	ldr	r2, [sp, #16]
 8007c54:	4640      	mov	r0, r8
 8007c56:	4649      	mov	r1, r9
 8007c58:	f1ba 0f00 	cmp.w	sl, #0
 8007c5c:	d014      	beq.n	8007c88 <_strtod_l+0x950>
 8007c5e:	f7ff fb51 	bl	8007304 <sulp>
 8007c62:	ee38 7b00 	vadd.f64	d7, d8, d0
 8007c66:	ec59 8b17 	vmov	r8, r9, d7
 8007c6a:	e7e0      	b.n	8007c2e <_strtod_l+0x8f6>
 8007c6c:	4013      	ands	r3, r2
 8007c6e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007c72:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007c76:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007c7a:	f04f 38ff 	mov.w	r8, #4294967295
 8007c7e:	e7d6      	b.n	8007c2e <_strtod_l+0x8f6>
 8007c80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c82:	ea13 0f08 	tst.w	r3, r8
 8007c86:	e7e3      	b.n	8007c50 <_strtod_l+0x918>
 8007c88:	f7ff fb3c 	bl	8007304 <sulp>
 8007c8c:	ee38 0b40 	vsub.f64	d0, d8, d0
 8007c90:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8007c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c98:	ec59 8b10 	vmov	r8, r9, d0
 8007c9c:	d1c7      	bne.n	8007c2e <_strtod_l+0x8f6>
 8007c9e:	e5f7      	b.n	8007890 <_strtod_l+0x558>
 8007ca0:	4631      	mov	r1, r6
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	f001 ff68 	bl	8009b78 <__ratio>
 8007ca8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8007cac:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cb4:	d865      	bhi.n	8007d82 <_strtod_l+0xa4a>
 8007cb6:	f1ba 0f00 	cmp.w	sl, #0
 8007cba:	d042      	beq.n	8007d42 <_strtod_l+0xa0a>
 8007cbc:	4b75      	ldr	r3, [pc, #468]	; (8007e94 <_strtod_l+0xb5c>)
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8007cc4:	4871      	ldr	r0, [pc, #452]	; (8007e8c <_strtod_l+0xb54>)
 8007cc6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8007ea0 <_strtod_l+0xb68>
 8007cca:	ea0b 0100 	and.w	r1, fp, r0
 8007cce:	4561      	cmp	r1, ip
 8007cd0:	f040 808e 	bne.w	8007df0 <_strtod_l+0xab8>
 8007cd4:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8007cd8:	ec49 8b10 	vmov	d0, r8, r9
 8007cdc:	ec43 2b1c 	vmov	d12, r2, r3
 8007ce0:	910a      	str	r1, [sp, #40]	; 0x28
 8007ce2:	f001 fe71 	bl	80099c8 <__ulp>
 8007ce6:	ec49 8b1e 	vmov	d14, r8, r9
 8007cea:	4868      	ldr	r0, [pc, #416]	; (8007e8c <_strtod_l+0xb54>)
 8007cec:	eeac eb00 	vfma.f64	d14, d12, d0
 8007cf0:	ee1e 3a90 	vmov	r3, s29
 8007cf4:	4a68      	ldr	r2, [pc, #416]	; (8007e98 <_strtod_l+0xb60>)
 8007cf6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007cf8:	4018      	ands	r0, r3
 8007cfa:	4290      	cmp	r0, r2
 8007cfc:	ec59 8b1e 	vmov	r8, r9, d14
 8007d00:	d94e      	bls.n	8007da0 <_strtod_l+0xa68>
 8007d02:	ee18 3a90 	vmov	r3, s17
 8007d06:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d104      	bne.n	8007d18 <_strtod_l+0x9e0>
 8007d0e:	ee18 3a10 	vmov	r3, s16
 8007d12:	3301      	adds	r3, #1
 8007d14:	f43f ad4c 	beq.w	80077b0 <_strtod_l+0x478>
 8007d18:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8007e90 <_strtod_l+0xb58>
 8007d1c:	f04f 38ff 	mov.w	r8, #4294967295
 8007d20:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007d22:	4620      	mov	r0, r4
 8007d24:	f001 fb1e 	bl	8009364 <_Bfree>
 8007d28:	4639      	mov	r1, r7
 8007d2a:	4620      	mov	r0, r4
 8007d2c:	f001 fb1a 	bl	8009364 <_Bfree>
 8007d30:	4631      	mov	r1, r6
 8007d32:	4620      	mov	r0, r4
 8007d34:	f001 fb16 	bl	8009364 <_Bfree>
 8007d38:	4629      	mov	r1, r5
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	f001 fb12 	bl	8009364 <_Bfree>
 8007d40:	e619      	b.n	8007976 <_strtod_l+0x63e>
 8007d42:	f1b8 0f00 	cmp.w	r8, #0
 8007d46:	d112      	bne.n	8007d6e <_strtod_l+0xa36>
 8007d48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d4c:	b9b3      	cbnz	r3, 8007d7c <_strtod_l+0xa44>
 8007d4e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8007d52:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d5a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8007d5e:	bf58      	it	pl
 8007d60:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 8007d64:	eeb1 7b4d 	vneg.f64	d7, d13
 8007d68:	ec53 2b17 	vmov	r2, r3, d7
 8007d6c:	e7aa      	b.n	8007cc4 <_strtod_l+0x98c>
 8007d6e:	f1b8 0f01 	cmp.w	r8, #1
 8007d72:	d103      	bne.n	8007d7c <_strtod_l+0xa44>
 8007d74:	f1b9 0f00 	cmp.w	r9, #0
 8007d78:	f43f ad8a 	beq.w	8007890 <_strtod_l+0x558>
 8007d7c:	4b47      	ldr	r3, [pc, #284]	; (8007e9c <_strtod_l+0xb64>)
 8007d7e:	2200      	movs	r2, #0
 8007d80:	e79e      	b.n	8007cc0 <_strtod_l+0x988>
 8007d82:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8007d86:	ee20 db0d 	vmul.f64	d13, d0, d13
 8007d8a:	f1ba 0f00 	cmp.w	sl, #0
 8007d8e:	d104      	bne.n	8007d9a <_strtod_l+0xa62>
 8007d90:	eeb1 7b4d 	vneg.f64	d7, d13
 8007d94:	ec53 2b17 	vmov	r2, r3, d7
 8007d98:	e794      	b.n	8007cc4 <_strtod_l+0x98c>
 8007d9a:	eeb0 7b4d 	vmov.f64	d7, d13
 8007d9e:	e7f9      	b.n	8007d94 <_strtod_l+0xa5c>
 8007da0:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007da4:	9b04      	ldr	r3, [sp, #16]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d1ba      	bne.n	8007d20 <_strtod_l+0x9e8>
 8007daa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007dae:	0d1b      	lsrs	r3, r3, #20
 8007db0:	051b      	lsls	r3, r3, #20
 8007db2:	4299      	cmp	r1, r3
 8007db4:	d1b4      	bne.n	8007d20 <_strtod_l+0x9e8>
 8007db6:	ec51 0b1d 	vmov	r0, r1, d13
 8007dba:	f7f8 fc6d 	bl	8000698 <__aeabi_d2lz>
 8007dbe:	f7f8 fc25 	bl	800060c <__aeabi_l2d>
 8007dc2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007dc6:	ec41 0b17 	vmov	d7, r0, r1
 8007dca:	ea43 0308 	orr.w	r3, r3, r8
 8007dce:	ea53 030a 	orrs.w	r3, r3, sl
 8007dd2:	ee3d db47 	vsub.f64	d13, d13, d7
 8007dd6:	d03c      	beq.n	8007e52 <_strtod_l+0xb1a>
 8007dd8:	eeb4 dbca 	vcmpe.f64	d13, d10
 8007ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007de0:	f53f acf0 	bmi.w	80077c4 <_strtod_l+0x48c>
 8007de4:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8007de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dec:	dd98      	ble.n	8007d20 <_strtod_l+0x9e8>
 8007dee:	e4e9      	b.n	80077c4 <_strtod_l+0x48c>
 8007df0:	9804      	ldr	r0, [sp, #16]
 8007df2:	b1f0      	cbz	r0, 8007e32 <_strtod_l+0xafa>
 8007df4:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8007df8:	d81b      	bhi.n	8007e32 <_strtod_l+0xafa>
 8007dfa:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8007e80 <_strtod_l+0xb48>
 8007dfe:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8007e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e06:	d811      	bhi.n	8007e2c <_strtod_l+0xaf4>
 8007e08:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8007e0c:	ee1d 3a10 	vmov	r3, s26
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	bf38      	it	cc
 8007e14:	2301      	movcc	r3, #1
 8007e16:	ee0d 3a10 	vmov	s26, r3
 8007e1a:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8007e1e:	f1ba 0f00 	cmp.w	sl, #0
 8007e22:	d113      	bne.n	8007e4c <_strtod_l+0xb14>
 8007e24:	eeb1 7b4d 	vneg.f64	d7, d13
 8007e28:	ec53 2b17 	vmov	r2, r3, d7
 8007e2c:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8007e30:	1a43      	subs	r3, r0, r1
 8007e32:	eeb0 0b48 	vmov.f64	d0, d8
 8007e36:	ec43 2b1c 	vmov	d12, r2, r3
 8007e3a:	910a      	str	r1, [sp, #40]	; 0x28
 8007e3c:	f001 fdc4 	bl	80099c8 <__ulp>
 8007e40:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007e42:	eeac 8b00 	vfma.f64	d8, d12, d0
 8007e46:	ec59 8b18 	vmov	r8, r9, d8
 8007e4a:	e7ab      	b.n	8007da4 <_strtod_l+0xa6c>
 8007e4c:	eeb0 7b4d 	vmov.f64	d7, d13
 8007e50:	e7ea      	b.n	8007e28 <_strtod_l+0xaf0>
 8007e52:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8007e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e5a:	f57f af61 	bpl.w	8007d20 <_strtod_l+0x9e8>
 8007e5e:	e4b1      	b.n	80077c4 <_strtod_l+0x48c>
 8007e60:	2300      	movs	r3, #0
 8007e62:	9308      	str	r3, [sp, #32]
 8007e64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e68:	6013      	str	r3, [r2, #0]
 8007e6a:	f7ff baad 	b.w	80073c8 <_strtod_l+0x90>
 8007e6e:	2a65      	cmp	r2, #101	; 0x65
 8007e70:	f43f ab9f 	beq.w	80075b2 <_strtod_l+0x27a>
 8007e74:	2a45      	cmp	r2, #69	; 0x45
 8007e76:	f43f ab9c 	beq.w	80075b2 <_strtod_l+0x27a>
 8007e7a:	2101      	movs	r1, #1
 8007e7c:	f7ff bbd4 	b.w	8007628 <_strtod_l+0x2f0>
 8007e80:	ffc00000 	.word	0xffc00000
 8007e84:	41dfffff 	.word	0x41dfffff
 8007e88:	000fffff 	.word	0x000fffff
 8007e8c:	7ff00000 	.word	0x7ff00000
 8007e90:	7fefffff 	.word	0x7fefffff
 8007e94:	3ff00000 	.word	0x3ff00000
 8007e98:	7c9fffff 	.word	0x7c9fffff
 8007e9c:	bff00000 	.word	0xbff00000
 8007ea0:	7fe00000 	.word	0x7fe00000

08007ea4 <_strtod_r>:
 8007ea4:	4b01      	ldr	r3, [pc, #4]	; (8007eac <_strtod_r+0x8>)
 8007ea6:	f7ff ba47 	b.w	8007338 <_strtod_l>
 8007eaa:	bf00      	nop
 8007eac:	2000009c 	.word	0x2000009c

08007eb0 <_strtol_l.constprop.0>:
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007eb6:	d001      	beq.n	8007ebc <_strtol_l.constprop.0+0xc>
 8007eb8:	2b24      	cmp	r3, #36	; 0x24
 8007eba:	d906      	bls.n	8007eca <_strtol_l.constprop.0+0x1a>
 8007ebc:	f7fe fb80 	bl	80065c0 <__errno>
 8007ec0:	2316      	movs	r3, #22
 8007ec2:	6003      	str	r3, [r0, #0]
 8007ec4:	2000      	movs	r0, #0
 8007ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007fb0 <_strtol_l.constprop.0+0x100>
 8007ece:	460d      	mov	r5, r1
 8007ed0:	462e      	mov	r6, r5
 8007ed2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ed6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007eda:	f017 0708 	ands.w	r7, r7, #8
 8007ede:	d1f7      	bne.n	8007ed0 <_strtol_l.constprop.0+0x20>
 8007ee0:	2c2d      	cmp	r4, #45	; 0x2d
 8007ee2:	d132      	bne.n	8007f4a <_strtol_l.constprop.0+0x9a>
 8007ee4:	782c      	ldrb	r4, [r5, #0]
 8007ee6:	2701      	movs	r7, #1
 8007ee8:	1cb5      	adds	r5, r6, #2
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d05b      	beq.n	8007fa6 <_strtol_l.constprop.0+0xf6>
 8007eee:	2b10      	cmp	r3, #16
 8007ef0:	d109      	bne.n	8007f06 <_strtol_l.constprop.0+0x56>
 8007ef2:	2c30      	cmp	r4, #48	; 0x30
 8007ef4:	d107      	bne.n	8007f06 <_strtol_l.constprop.0+0x56>
 8007ef6:	782c      	ldrb	r4, [r5, #0]
 8007ef8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007efc:	2c58      	cmp	r4, #88	; 0x58
 8007efe:	d14d      	bne.n	8007f9c <_strtol_l.constprop.0+0xec>
 8007f00:	786c      	ldrb	r4, [r5, #1]
 8007f02:	2310      	movs	r3, #16
 8007f04:	3502      	adds	r5, #2
 8007f06:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007f0a:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f0e:	f04f 0c00 	mov.w	ip, #0
 8007f12:	fbb8 f9f3 	udiv	r9, r8, r3
 8007f16:	4666      	mov	r6, ip
 8007f18:	fb03 8a19 	mls	sl, r3, r9, r8
 8007f1c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007f20:	f1be 0f09 	cmp.w	lr, #9
 8007f24:	d816      	bhi.n	8007f54 <_strtol_l.constprop.0+0xa4>
 8007f26:	4674      	mov	r4, lr
 8007f28:	42a3      	cmp	r3, r4
 8007f2a:	dd24      	ble.n	8007f76 <_strtol_l.constprop.0+0xc6>
 8007f2c:	f1bc 0f00 	cmp.w	ip, #0
 8007f30:	db1e      	blt.n	8007f70 <_strtol_l.constprop.0+0xc0>
 8007f32:	45b1      	cmp	r9, r6
 8007f34:	d31c      	bcc.n	8007f70 <_strtol_l.constprop.0+0xc0>
 8007f36:	d101      	bne.n	8007f3c <_strtol_l.constprop.0+0x8c>
 8007f38:	45a2      	cmp	sl, r4
 8007f3a:	db19      	blt.n	8007f70 <_strtol_l.constprop.0+0xc0>
 8007f3c:	fb06 4603 	mla	r6, r6, r3, r4
 8007f40:	f04f 0c01 	mov.w	ip, #1
 8007f44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f48:	e7e8      	b.n	8007f1c <_strtol_l.constprop.0+0x6c>
 8007f4a:	2c2b      	cmp	r4, #43	; 0x2b
 8007f4c:	bf04      	itt	eq
 8007f4e:	782c      	ldrbeq	r4, [r5, #0]
 8007f50:	1cb5      	addeq	r5, r6, #2
 8007f52:	e7ca      	b.n	8007eea <_strtol_l.constprop.0+0x3a>
 8007f54:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007f58:	f1be 0f19 	cmp.w	lr, #25
 8007f5c:	d801      	bhi.n	8007f62 <_strtol_l.constprop.0+0xb2>
 8007f5e:	3c37      	subs	r4, #55	; 0x37
 8007f60:	e7e2      	b.n	8007f28 <_strtol_l.constprop.0+0x78>
 8007f62:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007f66:	f1be 0f19 	cmp.w	lr, #25
 8007f6a:	d804      	bhi.n	8007f76 <_strtol_l.constprop.0+0xc6>
 8007f6c:	3c57      	subs	r4, #87	; 0x57
 8007f6e:	e7db      	b.n	8007f28 <_strtol_l.constprop.0+0x78>
 8007f70:	f04f 3cff 	mov.w	ip, #4294967295
 8007f74:	e7e6      	b.n	8007f44 <_strtol_l.constprop.0+0x94>
 8007f76:	f1bc 0f00 	cmp.w	ip, #0
 8007f7a:	da05      	bge.n	8007f88 <_strtol_l.constprop.0+0xd8>
 8007f7c:	2322      	movs	r3, #34	; 0x22
 8007f7e:	6003      	str	r3, [r0, #0]
 8007f80:	4646      	mov	r6, r8
 8007f82:	b942      	cbnz	r2, 8007f96 <_strtol_l.constprop.0+0xe6>
 8007f84:	4630      	mov	r0, r6
 8007f86:	e79e      	b.n	8007ec6 <_strtol_l.constprop.0+0x16>
 8007f88:	b107      	cbz	r7, 8007f8c <_strtol_l.constprop.0+0xdc>
 8007f8a:	4276      	negs	r6, r6
 8007f8c:	2a00      	cmp	r2, #0
 8007f8e:	d0f9      	beq.n	8007f84 <_strtol_l.constprop.0+0xd4>
 8007f90:	f1bc 0f00 	cmp.w	ip, #0
 8007f94:	d000      	beq.n	8007f98 <_strtol_l.constprop.0+0xe8>
 8007f96:	1e69      	subs	r1, r5, #1
 8007f98:	6011      	str	r1, [r2, #0]
 8007f9a:	e7f3      	b.n	8007f84 <_strtol_l.constprop.0+0xd4>
 8007f9c:	2430      	movs	r4, #48	; 0x30
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1b1      	bne.n	8007f06 <_strtol_l.constprop.0+0x56>
 8007fa2:	2308      	movs	r3, #8
 8007fa4:	e7af      	b.n	8007f06 <_strtol_l.constprop.0+0x56>
 8007fa6:	2c30      	cmp	r4, #48	; 0x30
 8007fa8:	d0a5      	beq.n	8007ef6 <_strtol_l.constprop.0+0x46>
 8007faa:	230a      	movs	r3, #10
 8007fac:	e7ab      	b.n	8007f06 <_strtol_l.constprop.0+0x56>
 8007fae:	bf00      	nop
 8007fb0:	0800adc1 	.word	0x0800adc1

08007fb4 <_strtol_r>:
 8007fb4:	f7ff bf7c 	b.w	8007eb0 <_strtol_l.constprop.0>

08007fb8 <quorem>:
 8007fb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fbc:	6903      	ldr	r3, [r0, #16]
 8007fbe:	690c      	ldr	r4, [r1, #16]
 8007fc0:	42a3      	cmp	r3, r4
 8007fc2:	4607      	mov	r7, r0
 8007fc4:	f2c0 8081 	blt.w	80080ca <quorem+0x112>
 8007fc8:	3c01      	subs	r4, #1
 8007fca:	f101 0814 	add.w	r8, r1, #20
 8007fce:	f100 0514 	add.w	r5, r0, #20
 8007fd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007fd6:	9301      	str	r3, [sp, #4]
 8007fd8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007fdc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007fe8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007fec:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ff0:	d331      	bcc.n	8008056 <quorem+0x9e>
 8007ff2:	f04f 0e00 	mov.w	lr, #0
 8007ff6:	4640      	mov	r0, r8
 8007ff8:	46ac      	mov	ip, r5
 8007ffa:	46f2      	mov	sl, lr
 8007ffc:	f850 2b04 	ldr.w	r2, [r0], #4
 8008000:	b293      	uxth	r3, r2
 8008002:	fb06 e303 	mla	r3, r6, r3, lr
 8008006:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800800a:	b29b      	uxth	r3, r3
 800800c:	ebaa 0303 	sub.w	r3, sl, r3
 8008010:	f8dc a000 	ldr.w	sl, [ip]
 8008014:	0c12      	lsrs	r2, r2, #16
 8008016:	fa13 f38a 	uxtah	r3, r3, sl
 800801a:	fb06 e202 	mla	r2, r6, r2, lr
 800801e:	9300      	str	r3, [sp, #0]
 8008020:	9b00      	ldr	r3, [sp, #0]
 8008022:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008026:	b292      	uxth	r2, r2
 8008028:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800802c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008030:	f8bd 3000 	ldrh.w	r3, [sp]
 8008034:	4581      	cmp	r9, r0
 8008036:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800803a:	f84c 3b04 	str.w	r3, [ip], #4
 800803e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008042:	d2db      	bcs.n	8007ffc <quorem+0x44>
 8008044:	f855 300b 	ldr.w	r3, [r5, fp]
 8008048:	b92b      	cbnz	r3, 8008056 <quorem+0x9e>
 800804a:	9b01      	ldr	r3, [sp, #4]
 800804c:	3b04      	subs	r3, #4
 800804e:	429d      	cmp	r5, r3
 8008050:	461a      	mov	r2, r3
 8008052:	d32e      	bcc.n	80080b2 <quorem+0xfa>
 8008054:	613c      	str	r4, [r7, #16]
 8008056:	4638      	mov	r0, r7
 8008058:	f001 fc10 	bl	800987c <__mcmp>
 800805c:	2800      	cmp	r0, #0
 800805e:	db24      	blt.n	80080aa <quorem+0xf2>
 8008060:	3601      	adds	r6, #1
 8008062:	4628      	mov	r0, r5
 8008064:	f04f 0c00 	mov.w	ip, #0
 8008068:	f858 2b04 	ldr.w	r2, [r8], #4
 800806c:	f8d0 e000 	ldr.w	lr, [r0]
 8008070:	b293      	uxth	r3, r2
 8008072:	ebac 0303 	sub.w	r3, ip, r3
 8008076:	0c12      	lsrs	r2, r2, #16
 8008078:	fa13 f38e 	uxtah	r3, r3, lr
 800807c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008080:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008084:	b29b      	uxth	r3, r3
 8008086:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800808a:	45c1      	cmp	r9, r8
 800808c:	f840 3b04 	str.w	r3, [r0], #4
 8008090:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008094:	d2e8      	bcs.n	8008068 <quorem+0xb0>
 8008096:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800809a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800809e:	b922      	cbnz	r2, 80080aa <quorem+0xf2>
 80080a0:	3b04      	subs	r3, #4
 80080a2:	429d      	cmp	r5, r3
 80080a4:	461a      	mov	r2, r3
 80080a6:	d30a      	bcc.n	80080be <quorem+0x106>
 80080a8:	613c      	str	r4, [r7, #16]
 80080aa:	4630      	mov	r0, r6
 80080ac:	b003      	add	sp, #12
 80080ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080b2:	6812      	ldr	r2, [r2, #0]
 80080b4:	3b04      	subs	r3, #4
 80080b6:	2a00      	cmp	r2, #0
 80080b8:	d1cc      	bne.n	8008054 <quorem+0x9c>
 80080ba:	3c01      	subs	r4, #1
 80080bc:	e7c7      	b.n	800804e <quorem+0x96>
 80080be:	6812      	ldr	r2, [r2, #0]
 80080c0:	3b04      	subs	r3, #4
 80080c2:	2a00      	cmp	r2, #0
 80080c4:	d1f0      	bne.n	80080a8 <quorem+0xf0>
 80080c6:	3c01      	subs	r4, #1
 80080c8:	e7eb      	b.n	80080a2 <quorem+0xea>
 80080ca:	2000      	movs	r0, #0
 80080cc:	e7ee      	b.n	80080ac <quorem+0xf4>
	...

080080d0 <_dtoa_r>:
 80080d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d4:	ed2d 8b02 	vpush	{d8}
 80080d8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80080da:	b091      	sub	sp, #68	; 0x44
 80080dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80080e0:	ec59 8b10 	vmov	r8, r9, d0
 80080e4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80080e6:	9106      	str	r1, [sp, #24]
 80080e8:	4606      	mov	r6, r0
 80080ea:	9208      	str	r2, [sp, #32]
 80080ec:	930c      	str	r3, [sp, #48]	; 0x30
 80080ee:	b975      	cbnz	r5, 800810e <_dtoa_r+0x3e>
 80080f0:	2010      	movs	r0, #16
 80080f2:	f001 f8cf 	bl	8009294 <malloc>
 80080f6:	4602      	mov	r2, r0
 80080f8:	6270      	str	r0, [r6, #36]	; 0x24
 80080fa:	b920      	cbnz	r0, 8008106 <_dtoa_r+0x36>
 80080fc:	4baa      	ldr	r3, [pc, #680]	; (80083a8 <_dtoa_r+0x2d8>)
 80080fe:	21ea      	movs	r1, #234	; 0xea
 8008100:	48aa      	ldr	r0, [pc, #680]	; (80083ac <_dtoa_r+0x2dc>)
 8008102:	f002 f83b 	bl	800a17c <__assert_func>
 8008106:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800810a:	6005      	str	r5, [r0, #0]
 800810c:	60c5      	str	r5, [r0, #12]
 800810e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008110:	6819      	ldr	r1, [r3, #0]
 8008112:	b151      	cbz	r1, 800812a <_dtoa_r+0x5a>
 8008114:	685a      	ldr	r2, [r3, #4]
 8008116:	604a      	str	r2, [r1, #4]
 8008118:	2301      	movs	r3, #1
 800811a:	4093      	lsls	r3, r2
 800811c:	608b      	str	r3, [r1, #8]
 800811e:	4630      	mov	r0, r6
 8008120:	f001 f920 	bl	8009364 <_Bfree>
 8008124:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008126:	2200      	movs	r2, #0
 8008128:	601a      	str	r2, [r3, #0]
 800812a:	f1b9 0300 	subs.w	r3, r9, #0
 800812e:	bfbb      	ittet	lt
 8008130:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008134:	9303      	strlt	r3, [sp, #12]
 8008136:	2300      	movge	r3, #0
 8008138:	2201      	movlt	r2, #1
 800813a:	bfac      	ite	ge
 800813c:	6023      	strge	r3, [r4, #0]
 800813e:	6022      	strlt	r2, [r4, #0]
 8008140:	4b9b      	ldr	r3, [pc, #620]	; (80083b0 <_dtoa_r+0x2e0>)
 8008142:	9c03      	ldr	r4, [sp, #12]
 8008144:	43a3      	bics	r3, r4
 8008146:	d11c      	bne.n	8008182 <_dtoa_r+0xb2>
 8008148:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800814a:	f242 730f 	movw	r3, #9999	; 0x270f
 800814e:	6013      	str	r3, [r2, #0]
 8008150:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008154:	ea53 0308 	orrs.w	r3, r3, r8
 8008158:	f000 84fd 	beq.w	8008b56 <_dtoa_r+0xa86>
 800815c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800815e:	b963      	cbnz	r3, 800817a <_dtoa_r+0xaa>
 8008160:	4b94      	ldr	r3, [pc, #592]	; (80083b4 <_dtoa_r+0x2e4>)
 8008162:	e01f      	b.n	80081a4 <_dtoa_r+0xd4>
 8008164:	4b94      	ldr	r3, [pc, #592]	; (80083b8 <_dtoa_r+0x2e8>)
 8008166:	9301      	str	r3, [sp, #4]
 8008168:	3308      	adds	r3, #8
 800816a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800816c:	6013      	str	r3, [r2, #0]
 800816e:	9801      	ldr	r0, [sp, #4]
 8008170:	b011      	add	sp, #68	; 0x44
 8008172:	ecbd 8b02 	vpop	{d8}
 8008176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800817a:	4b8e      	ldr	r3, [pc, #568]	; (80083b4 <_dtoa_r+0x2e4>)
 800817c:	9301      	str	r3, [sp, #4]
 800817e:	3303      	adds	r3, #3
 8008180:	e7f3      	b.n	800816a <_dtoa_r+0x9a>
 8008182:	ed9d 8b02 	vldr	d8, [sp, #8]
 8008186:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800818a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800818e:	d10b      	bne.n	80081a8 <_dtoa_r+0xd8>
 8008190:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008192:	2301      	movs	r3, #1
 8008194:	6013      	str	r3, [r2, #0]
 8008196:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008198:	2b00      	cmp	r3, #0
 800819a:	f000 84d9 	beq.w	8008b50 <_dtoa_r+0xa80>
 800819e:	4887      	ldr	r0, [pc, #540]	; (80083bc <_dtoa_r+0x2ec>)
 80081a0:	6018      	str	r0, [r3, #0]
 80081a2:	1e43      	subs	r3, r0, #1
 80081a4:	9301      	str	r3, [sp, #4]
 80081a6:	e7e2      	b.n	800816e <_dtoa_r+0x9e>
 80081a8:	a90f      	add	r1, sp, #60	; 0x3c
 80081aa:	aa0e      	add	r2, sp, #56	; 0x38
 80081ac:	4630      	mov	r0, r6
 80081ae:	eeb0 0b48 	vmov.f64	d0, d8
 80081b2:	f001 fc85 	bl	8009ac0 <__d2b>
 80081b6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80081ba:	4605      	mov	r5, r0
 80081bc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80081be:	2900      	cmp	r1, #0
 80081c0:	d046      	beq.n	8008250 <_dtoa_r+0x180>
 80081c2:	ee18 4a90 	vmov	r4, s17
 80081c6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80081ca:	ec53 2b18 	vmov	r2, r3, d8
 80081ce:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80081d2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80081d6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80081da:	2400      	movs	r4, #0
 80081dc:	ec43 2b16 	vmov	d6, r2, r3
 80081e0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80081e4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8008390 <_dtoa_r+0x2c0>
 80081e8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80081ec:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8008398 <_dtoa_r+0x2c8>
 80081f0:	eea7 6b05 	vfma.f64	d6, d7, d5
 80081f4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80083a0 <_dtoa_r+0x2d0>
 80081f8:	ee07 1a90 	vmov	s15, r1
 80081fc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8008200:	eeb0 7b46 	vmov.f64	d7, d6
 8008204:	eea4 7b05 	vfma.f64	d7, d4, d5
 8008208:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800820c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008214:	ee16 ba90 	vmov	fp, s13
 8008218:	940a      	str	r4, [sp, #40]	; 0x28
 800821a:	d508      	bpl.n	800822e <_dtoa_r+0x15e>
 800821c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008220:	eeb4 6b47 	vcmp.f64	d6, d7
 8008224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008228:	bf18      	it	ne
 800822a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800822e:	f1bb 0f16 	cmp.w	fp, #22
 8008232:	d82f      	bhi.n	8008294 <_dtoa_r+0x1c4>
 8008234:	4b62      	ldr	r3, [pc, #392]	; (80083c0 <_dtoa_r+0x2f0>)
 8008236:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800823a:	ed93 7b00 	vldr	d7, [r3]
 800823e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008246:	d501      	bpl.n	800824c <_dtoa_r+0x17c>
 8008248:	f10b 3bff 	add.w	fp, fp, #4294967295
 800824c:	2300      	movs	r3, #0
 800824e:	e022      	b.n	8008296 <_dtoa_r+0x1c6>
 8008250:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008252:	4401      	add	r1, r0
 8008254:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8008258:	2b20      	cmp	r3, #32
 800825a:	bfc1      	itttt	gt
 800825c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008260:	fa04 f303 	lslgt.w	r3, r4, r3
 8008264:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8008268:	fa28 f804 	lsrgt.w	r8, r8, r4
 800826c:	bfd6      	itet	le
 800826e:	f1c3 0320 	rsble	r3, r3, #32
 8008272:	ea43 0808 	orrgt.w	r8, r3, r8
 8008276:	fa08 f803 	lslle.w	r8, r8, r3
 800827a:	ee07 8a90 	vmov	s15, r8
 800827e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008282:	3901      	subs	r1, #1
 8008284:	ee17 4a90 	vmov	r4, s15
 8008288:	ec53 2b17 	vmov	r2, r3, d7
 800828c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8008290:	2401      	movs	r4, #1
 8008292:	e7a3      	b.n	80081dc <_dtoa_r+0x10c>
 8008294:	2301      	movs	r3, #1
 8008296:	930b      	str	r3, [sp, #44]	; 0x2c
 8008298:	1a43      	subs	r3, r0, r1
 800829a:	1e5a      	subs	r2, r3, #1
 800829c:	bf45      	ittet	mi
 800829e:	f1c3 0301 	rsbmi	r3, r3, #1
 80082a2:	9304      	strmi	r3, [sp, #16]
 80082a4:	2300      	movpl	r3, #0
 80082a6:	2300      	movmi	r3, #0
 80082a8:	9205      	str	r2, [sp, #20]
 80082aa:	bf54      	ite	pl
 80082ac:	9304      	strpl	r3, [sp, #16]
 80082ae:	9305      	strmi	r3, [sp, #20]
 80082b0:	f1bb 0f00 	cmp.w	fp, #0
 80082b4:	db18      	blt.n	80082e8 <_dtoa_r+0x218>
 80082b6:	9b05      	ldr	r3, [sp, #20]
 80082b8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80082bc:	445b      	add	r3, fp
 80082be:	9305      	str	r3, [sp, #20]
 80082c0:	2300      	movs	r3, #0
 80082c2:	9a06      	ldr	r2, [sp, #24]
 80082c4:	2a09      	cmp	r2, #9
 80082c6:	d849      	bhi.n	800835c <_dtoa_r+0x28c>
 80082c8:	2a05      	cmp	r2, #5
 80082ca:	bfc4      	itt	gt
 80082cc:	3a04      	subgt	r2, #4
 80082ce:	9206      	strgt	r2, [sp, #24]
 80082d0:	9a06      	ldr	r2, [sp, #24]
 80082d2:	f1a2 0202 	sub.w	r2, r2, #2
 80082d6:	bfcc      	ite	gt
 80082d8:	2400      	movgt	r4, #0
 80082da:	2401      	movle	r4, #1
 80082dc:	2a03      	cmp	r2, #3
 80082de:	d848      	bhi.n	8008372 <_dtoa_r+0x2a2>
 80082e0:	e8df f002 	tbb	[pc, r2]
 80082e4:	3a2c2e0b 	.word	0x3a2c2e0b
 80082e8:	9b04      	ldr	r3, [sp, #16]
 80082ea:	2200      	movs	r2, #0
 80082ec:	eba3 030b 	sub.w	r3, r3, fp
 80082f0:	9304      	str	r3, [sp, #16]
 80082f2:	9209      	str	r2, [sp, #36]	; 0x24
 80082f4:	f1cb 0300 	rsb	r3, fp, #0
 80082f8:	e7e3      	b.n	80082c2 <_dtoa_r+0x1f2>
 80082fa:	2200      	movs	r2, #0
 80082fc:	9207      	str	r2, [sp, #28]
 80082fe:	9a08      	ldr	r2, [sp, #32]
 8008300:	2a00      	cmp	r2, #0
 8008302:	dc39      	bgt.n	8008378 <_dtoa_r+0x2a8>
 8008304:	f04f 0a01 	mov.w	sl, #1
 8008308:	46d1      	mov	r9, sl
 800830a:	4652      	mov	r2, sl
 800830c:	f8cd a020 	str.w	sl, [sp, #32]
 8008310:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8008312:	2100      	movs	r1, #0
 8008314:	6079      	str	r1, [r7, #4]
 8008316:	2004      	movs	r0, #4
 8008318:	f100 0c14 	add.w	ip, r0, #20
 800831c:	4594      	cmp	ip, r2
 800831e:	6879      	ldr	r1, [r7, #4]
 8008320:	d92f      	bls.n	8008382 <_dtoa_r+0x2b2>
 8008322:	4630      	mov	r0, r6
 8008324:	930d      	str	r3, [sp, #52]	; 0x34
 8008326:	f000 ffdd 	bl	80092e4 <_Balloc>
 800832a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800832c:	9001      	str	r0, [sp, #4]
 800832e:	4602      	mov	r2, r0
 8008330:	2800      	cmp	r0, #0
 8008332:	d149      	bne.n	80083c8 <_dtoa_r+0x2f8>
 8008334:	4b23      	ldr	r3, [pc, #140]	; (80083c4 <_dtoa_r+0x2f4>)
 8008336:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800833a:	e6e1      	b.n	8008100 <_dtoa_r+0x30>
 800833c:	2201      	movs	r2, #1
 800833e:	e7dd      	b.n	80082fc <_dtoa_r+0x22c>
 8008340:	2200      	movs	r2, #0
 8008342:	9207      	str	r2, [sp, #28]
 8008344:	9a08      	ldr	r2, [sp, #32]
 8008346:	eb0b 0a02 	add.w	sl, fp, r2
 800834a:	f10a 0901 	add.w	r9, sl, #1
 800834e:	464a      	mov	r2, r9
 8008350:	2a01      	cmp	r2, #1
 8008352:	bfb8      	it	lt
 8008354:	2201      	movlt	r2, #1
 8008356:	e7db      	b.n	8008310 <_dtoa_r+0x240>
 8008358:	2201      	movs	r2, #1
 800835a:	e7f2      	b.n	8008342 <_dtoa_r+0x272>
 800835c:	2401      	movs	r4, #1
 800835e:	2200      	movs	r2, #0
 8008360:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8008364:	f04f 3aff 	mov.w	sl, #4294967295
 8008368:	2100      	movs	r1, #0
 800836a:	46d1      	mov	r9, sl
 800836c:	2212      	movs	r2, #18
 800836e:	9108      	str	r1, [sp, #32]
 8008370:	e7ce      	b.n	8008310 <_dtoa_r+0x240>
 8008372:	2201      	movs	r2, #1
 8008374:	9207      	str	r2, [sp, #28]
 8008376:	e7f5      	b.n	8008364 <_dtoa_r+0x294>
 8008378:	f8dd a020 	ldr.w	sl, [sp, #32]
 800837c:	46d1      	mov	r9, sl
 800837e:	4652      	mov	r2, sl
 8008380:	e7c6      	b.n	8008310 <_dtoa_r+0x240>
 8008382:	3101      	adds	r1, #1
 8008384:	6079      	str	r1, [r7, #4]
 8008386:	0040      	lsls	r0, r0, #1
 8008388:	e7c6      	b.n	8008318 <_dtoa_r+0x248>
 800838a:	bf00      	nop
 800838c:	f3af 8000 	nop.w
 8008390:	636f4361 	.word	0x636f4361
 8008394:	3fd287a7 	.word	0x3fd287a7
 8008398:	8b60c8b3 	.word	0x8b60c8b3
 800839c:	3fc68a28 	.word	0x3fc68a28
 80083a0:	509f79fb 	.word	0x509f79fb
 80083a4:	3fd34413 	.word	0x3fd34413
 80083a8:	0800aece 	.word	0x0800aece
 80083ac:	0800aee5 	.word	0x0800aee5
 80083b0:	7ff00000 	.word	0x7ff00000
 80083b4:	0800aeca 	.word	0x0800aeca
 80083b8:	0800aec1 	.word	0x0800aec1
 80083bc:	0800ad45 	.word	0x0800ad45
 80083c0:	0800b050 	.word	0x0800b050
 80083c4:	0800af40 	.word	0x0800af40
 80083c8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80083ca:	9901      	ldr	r1, [sp, #4]
 80083cc:	6011      	str	r1, [r2, #0]
 80083ce:	f1b9 0f0e 	cmp.w	r9, #14
 80083d2:	d86c      	bhi.n	80084ae <_dtoa_r+0x3de>
 80083d4:	2c00      	cmp	r4, #0
 80083d6:	d06a      	beq.n	80084ae <_dtoa_r+0x3de>
 80083d8:	f1bb 0f00 	cmp.w	fp, #0
 80083dc:	f340 80a0 	ble.w	8008520 <_dtoa_r+0x450>
 80083e0:	49c1      	ldr	r1, [pc, #772]	; (80086e8 <_dtoa_r+0x618>)
 80083e2:	f00b 020f 	and.w	r2, fp, #15
 80083e6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80083ea:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80083ee:	ed92 7b00 	vldr	d7, [r2]
 80083f2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80083f6:	f000 8087 	beq.w	8008508 <_dtoa_r+0x438>
 80083fa:	4abc      	ldr	r2, [pc, #752]	; (80086ec <_dtoa_r+0x61c>)
 80083fc:	ed92 6b08 	vldr	d6, [r2, #32]
 8008400:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8008404:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008408:	f001 010f 	and.w	r1, r1, #15
 800840c:	2203      	movs	r2, #3
 800840e:	48b7      	ldr	r0, [pc, #732]	; (80086ec <_dtoa_r+0x61c>)
 8008410:	2900      	cmp	r1, #0
 8008412:	d17b      	bne.n	800850c <_dtoa_r+0x43c>
 8008414:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008418:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800841c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008420:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008422:	2900      	cmp	r1, #0
 8008424:	f000 80a2 	beq.w	800856c <_dtoa_r+0x49c>
 8008428:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800842c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008430:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008438:	f140 8098 	bpl.w	800856c <_dtoa_r+0x49c>
 800843c:	f1b9 0f00 	cmp.w	r9, #0
 8008440:	f000 8094 	beq.w	800856c <_dtoa_r+0x49c>
 8008444:	f1ba 0f00 	cmp.w	sl, #0
 8008448:	dd2f      	ble.n	80084aa <_dtoa_r+0x3da>
 800844a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800844e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008452:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008456:	f10b 37ff 	add.w	r7, fp, #4294967295
 800845a:	3201      	adds	r2, #1
 800845c:	4650      	mov	r0, sl
 800845e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008462:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008466:	ee07 2a90 	vmov	s15, r2
 800846a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800846e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008472:	ee15 4a90 	vmov	r4, s11
 8008476:	ec52 1b15 	vmov	r1, r2, d5
 800847a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800847e:	2800      	cmp	r0, #0
 8008480:	d177      	bne.n	8008572 <_dtoa_r+0x4a2>
 8008482:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008486:	ee36 6b47 	vsub.f64	d6, d6, d7
 800848a:	ec42 1b17 	vmov	d7, r1, r2
 800848e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008496:	f300 8263 	bgt.w	8008960 <_dtoa_r+0x890>
 800849a:	eeb1 7b47 	vneg.f64	d7, d7
 800849e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80084a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084a6:	f100 8258 	bmi.w	800895a <_dtoa_r+0x88a>
 80084aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80084ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80084b0:	2a00      	cmp	r2, #0
 80084b2:	f2c0 811d 	blt.w	80086f0 <_dtoa_r+0x620>
 80084b6:	f1bb 0f0e 	cmp.w	fp, #14
 80084ba:	f300 8119 	bgt.w	80086f0 <_dtoa_r+0x620>
 80084be:	4b8a      	ldr	r3, [pc, #552]	; (80086e8 <_dtoa_r+0x618>)
 80084c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80084c4:	ed93 6b00 	vldr	d6, [r3]
 80084c8:	9b08      	ldr	r3, [sp, #32]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	f280 80b7 	bge.w	800863e <_dtoa_r+0x56e>
 80084d0:	f1b9 0f00 	cmp.w	r9, #0
 80084d4:	f300 80b3 	bgt.w	800863e <_dtoa_r+0x56e>
 80084d8:	f040 823f 	bne.w	800895a <_dtoa_r+0x88a>
 80084dc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80084e0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80084e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80084e8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80084ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084f0:	464c      	mov	r4, r9
 80084f2:	464f      	mov	r7, r9
 80084f4:	f280 8215 	bge.w	8008922 <_dtoa_r+0x852>
 80084f8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80084fc:	2331      	movs	r3, #49	; 0x31
 80084fe:	f808 3b01 	strb.w	r3, [r8], #1
 8008502:	f10b 0b01 	add.w	fp, fp, #1
 8008506:	e211      	b.n	800892c <_dtoa_r+0x85c>
 8008508:	2202      	movs	r2, #2
 800850a:	e780      	b.n	800840e <_dtoa_r+0x33e>
 800850c:	07cc      	lsls	r4, r1, #31
 800850e:	d504      	bpl.n	800851a <_dtoa_r+0x44a>
 8008510:	ed90 6b00 	vldr	d6, [r0]
 8008514:	3201      	adds	r2, #1
 8008516:	ee27 7b06 	vmul.f64	d7, d7, d6
 800851a:	1049      	asrs	r1, r1, #1
 800851c:	3008      	adds	r0, #8
 800851e:	e777      	b.n	8008410 <_dtoa_r+0x340>
 8008520:	d022      	beq.n	8008568 <_dtoa_r+0x498>
 8008522:	f1cb 0100 	rsb	r1, fp, #0
 8008526:	4a70      	ldr	r2, [pc, #448]	; (80086e8 <_dtoa_r+0x618>)
 8008528:	f001 000f 	and.w	r0, r1, #15
 800852c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008530:	ed92 7b00 	vldr	d7, [r2]
 8008534:	ee28 7b07 	vmul.f64	d7, d8, d7
 8008538:	ed8d 7b02 	vstr	d7, [sp, #8]
 800853c:	486b      	ldr	r0, [pc, #428]	; (80086ec <_dtoa_r+0x61c>)
 800853e:	1109      	asrs	r1, r1, #4
 8008540:	2400      	movs	r4, #0
 8008542:	2202      	movs	r2, #2
 8008544:	b929      	cbnz	r1, 8008552 <_dtoa_r+0x482>
 8008546:	2c00      	cmp	r4, #0
 8008548:	f43f af6a 	beq.w	8008420 <_dtoa_r+0x350>
 800854c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008550:	e766      	b.n	8008420 <_dtoa_r+0x350>
 8008552:	07cf      	lsls	r7, r1, #31
 8008554:	d505      	bpl.n	8008562 <_dtoa_r+0x492>
 8008556:	ed90 6b00 	vldr	d6, [r0]
 800855a:	3201      	adds	r2, #1
 800855c:	2401      	movs	r4, #1
 800855e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008562:	1049      	asrs	r1, r1, #1
 8008564:	3008      	adds	r0, #8
 8008566:	e7ed      	b.n	8008544 <_dtoa_r+0x474>
 8008568:	2202      	movs	r2, #2
 800856a:	e759      	b.n	8008420 <_dtoa_r+0x350>
 800856c:	465f      	mov	r7, fp
 800856e:	4648      	mov	r0, r9
 8008570:	e775      	b.n	800845e <_dtoa_r+0x38e>
 8008572:	ec42 1b17 	vmov	d7, r1, r2
 8008576:	4a5c      	ldr	r2, [pc, #368]	; (80086e8 <_dtoa_r+0x618>)
 8008578:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800857c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008580:	9a01      	ldr	r2, [sp, #4]
 8008582:	1814      	adds	r4, r2, r0
 8008584:	9a07      	ldr	r2, [sp, #28]
 8008586:	b352      	cbz	r2, 80085de <_dtoa_r+0x50e>
 8008588:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800858c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008590:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008594:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008598:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800859c:	ee35 7b47 	vsub.f64	d7, d5, d7
 80085a0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80085a4:	ee14 2a90 	vmov	r2, s9
 80085a8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80085ac:	3230      	adds	r2, #48	; 0x30
 80085ae:	ee36 6b45 	vsub.f64	d6, d6, d5
 80085b2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80085b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085ba:	f808 2b01 	strb.w	r2, [r8], #1
 80085be:	d439      	bmi.n	8008634 <_dtoa_r+0x564>
 80085c0:	ee32 5b46 	vsub.f64	d5, d2, d6
 80085c4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80085c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085cc:	d472      	bmi.n	80086b4 <_dtoa_r+0x5e4>
 80085ce:	45a0      	cmp	r8, r4
 80085d0:	f43f af6b 	beq.w	80084aa <_dtoa_r+0x3da>
 80085d4:	ee27 7b03 	vmul.f64	d7, d7, d3
 80085d8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80085dc:	e7e0      	b.n	80085a0 <_dtoa_r+0x4d0>
 80085de:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80085e2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80085e6:	4621      	mov	r1, r4
 80085e8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80085ec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80085f0:	ee14 2a90 	vmov	r2, s9
 80085f4:	3230      	adds	r2, #48	; 0x30
 80085f6:	f808 2b01 	strb.w	r2, [r8], #1
 80085fa:	45a0      	cmp	r8, r4
 80085fc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008600:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008604:	d118      	bne.n	8008638 <_dtoa_r+0x568>
 8008606:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800860a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800860e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008616:	dc4d      	bgt.n	80086b4 <_dtoa_r+0x5e4>
 8008618:	ee35 7b47 	vsub.f64	d7, d5, d7
 800861c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008624:	f57f af41 	bpl.w	80084aa <_dtoa_r+0x3da>
 8008628:	4688      	mov	r8, r1
 800862a:	3901      	subs	r1, #1
 800862c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8008630:	2b30      	cmp	r3, #48	; 0x30
 8008632:	d0f9      	beq.n	8008628 <_dtoa_r+0x558>
 8008634:	46bb      	mov	fp, r7
 8008636:	e02a      	b.n	800868e <_dtoa_r+0x5be>
 8008638:	ee26 6b03 	vmul.f64	d6, d6, d3
 800863c:	e7d6      	b.n	80085ec <_dtoa_r+0x51c>
 800863e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008642:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8008646:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800864a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800864e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008652:	ee15 3a10 	vmov	r3, s10
 8008656:	3330      	adds	r3, #48	; 0x30
 8008658:	f808 3b01 	strb.w	r3, [r8], #1
 800865c:	9b01      	ldr	r3, [sp, #4]
 800865e:	eba8 0303 	sub.w	r3, r8, r3
 8008662:	4599      	cmp	r9, r3
 8008664:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008668:	eea3 7b46 	vfms.f64	d7, d3, d6
 800866c:	d133      	bne.n	80086d6 <_dtoa_r+0x606>
 800866e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008672:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800867a:	dc1a      	bgt.n	80086b2 <_dtoa_r+0x5e2>
 800867c:	eeb4 7b46 	vcmp.f64	d7, d6
 8008680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008684:	d103      	bne.n	800868e <_dtoa_r+0x5be>
 8008686:	ee15 3a10 	vmov	r3, s10
 800868a:	07d9      	lsls	r1, r3, #31
 800868c:	d411      	bmi.n	80086b2 <_dtoa_r+0x5e2>
 800868e:	4629      	mov	r1, r5
 8008690:	4630      	mov	r0, r6
 8008692:	f000 fe67 	bl	8009364 <_Bfree>
 8008696:	2300      	movs	r3, #0
 8008698:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800869a:	f888 3000 	strb.w	r3, [r8]
 800869e:	f10b 0301 	add.w	r3, fp, #1
 80086a2:	6013      	str	r3, [r2, #0]
 80086a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	f43f ad61 	beq.w	800816e <_dtoa_r+0x9e>
 80086ac:	f8c3 8000 	str.w	r8, [r3]
 80086b0:	e55d      	b.n	800816e <_dtoa_r+0x9e>
 80086b2:	465f      	mov	r7, fp
 80086b4:	4643      	mov	r3, r8
 80086b6:	4698      	mov	r8, r3
 80086b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086bc:	2a39      	cmp	r2, #57	; 0x39
 80086be:	d106      	bne.n	80086ce <_dtoa_r+0x5fe>
 80086c0:	9a01      	ldr	r2, [sp, #4]
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d1f7      	bne.n	80086b6 <_dtoa_r+0x5e6>
 80086c6:	9901      	ldr	r1, [sp, #4]
 80086c8:	2230      	movs	r2, #48	; 0x30
 80086ca:	3701      	adds	r7, #1
 80086cc:	700a      	strb	r2, [r1, #0]
 80086ce:	781a      	ldrb	r2, [r3, #0]
 80086d0:	3201      	adds	r2, #1
 80086d2:	701a      	strb	r2, [r3, #0]
 80086d4:	e7ae      	b.n	8008634 <_dtoa_r+0x564>
 80086d6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80086da:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80086de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086e2:	d1b2      	bne.n	800864a <_dtoa_r+0x57a>
 80086e4:	e7d3      	b.n	800868e <_dtoa_r+0x5be>
 80086e6:	bf00      	nop
 80086e8:	0800b050 	.word	0x0800b050
 80086ec:	0800b028 	.word	0x0800b028
 80086f0:	9907      	ldr	r1, [sp, #28]
 80086f2:	2900      	cmp	r1, #0
 80086f4:	f000 80d0 	beq.w	8008898 <_dtoa_r+0x7c8>
 80086f8:	9906      	ldr	r1, [sp, #24]
 80086fa:	2901      	cmp	r1, #1
 80086fc:	f300 80b4 	bgt.w	8008868 <_dtoa_r+0x798>
 8008700:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008702:	2900      	cmp	r1, #0
 8008704:	f000 80ac 	beq.w	8008860 <_dtoa_r+0x790>
 8008708:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800870c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008710:	461c      	mov	r4, r3
 8008712:	930a      	str	r3, [sp, #40]	; 0x28
 8008714:	9b04      	ldr	r3, [sp, #16]
 8008716:	4413      	add	r3, r2
 8008718:	9304      	str	r3, [sp, #16]
 800871a:	9b05      	ldr	r3, [sp, #20]
 800871c:	2101      	movs	r1, #1
 800871e:	4413      	add	r3, r2
 8008720:	4630      	mov	r0, r6
 8008722:	9305      	str	r3, [sp, #20]
 8008724:	f000 ff20 	bl	8009568 <__i2b>
 8008728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800872a:	4607      	mov	r7, r0
 800872c:	f1b8 0f00 	cmp.w	r8, #0
 8008730:	dd0d      	ble.n	800874e <_dtoa_r+0x67e>
 8008732:	9a05      	ldr	r2, [sp, #20]
 8008734:	2a00      	cmp	r2, #0
 8008736:	dd0a      	ble.n	800874e <_dtoa_r+0x67e>
 8008738:	4542      	cmp	r2, r8
 800873a:	9904      	ldr	r1, [sp, #16]
 800873c:	bfa8      	it	ge
 800873e:	4642      	movge	r2, r8
 8008740:	1a89      	subs	r1, r1, r2
 8008742:	9104      	str	r1, [sp, #16]
 8008744:	9905      	ldr	r1, [sp, #20]
 8008746:	eba8 0802 	sub.w	r8, r8, r2
 800874a:	1a8a      	subs	r2, r1, r2
 800874c:	9205      	str	r2, [sp, #20]
 800874e:	b303      	cbz	r3, 8008792 <_dtoa_r+0x6c2>
 8008750:	9a07      	ldr	r2, [sp, #28]
 8008752:	2a00      	cmp	r2, #0
 8008754:	f000 80a5 	beq.w	80088a2 <_dtoa_r+0x7d2>
 8008758:	2c00      	cmp	r4, #0
 800875a:	dd13      	ble.n	8008784 <_dtoa_r+0x6b4>
 800875c:	4639      	mov	r1, r7
 800875e:	4622      	mov	r2, r4
 8008760:	4630      	mov	r0, r6
 8008762:	930d      	str	r3, [sp, #52]	; 0x34
 8008764:	f000 ffc0 	bl	80096e8 <__pow5mult>
 8008768:	462a      	mov	r2, r5
 800876a:	4601      	mov	r1, r0
 800876c:	4607      	mov	r7, r0
 800876e:	4630      	mov	r0, r6
 8008770:	f000 ff10 	bl	8009594 <__multiply>
 8008774:	4629      	mov	r1, r5
 8008776:	900a      	str	r0, [sp, #40]	; 0x28
 8008778:	4630      	mov	r0, r6
 800877a:	f000 fdf3 	bl	8009364 <_Bfree>
 800877e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008780:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008782:	4615      	mov	r5, r2
 8008784:	1b1a      	subs	r2, r3, r4
 8008786:	d004      	beq.n	8008792 <_dtoa_r+0x6c2>
 8008788:	4629      	mov	r1, r5
 800878a:	4630      	mov	r0, r6
 800878c:	f000 ffac 	bl	80096e8 <__pow5mult>
 8008790:	4605      	mov	r5, r0
 8008792:	2101      	movs	r1, #1
 8008794:	4630      	mov	r0, r6
 8008796:	f000 fee7 	bl	8009568 <__i2b>
 800879a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800879c:	2b00      	cmp	r3, #0
 800879e:	4604      	mov	r4, r0
 80087a0:	f340 8081 	ble.w	80088a6 <_dtoa_r+0x7d6>
 80087a4:	461a      	mov	r2, r3
 80087a6:	4601      	mov	r1, r0
 80087a8:	4630      	mov	r0, r6
 80087aa:	f000 ff9d 	bl	80096e8 <__pow5mult>
 80087ae:	9b06      	ldr	r3, [sp, #24]
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	4604      	mov	r4, r0
 80087b4:	dd7a      	ble.n	80088ac <_dtoa_r+0x7dc>
 80087b6:	2300      	movs	r3, #0
 80087b8:	930a      	str	r3, [sp, #40]	; 0x28
 80087ba:	6922      	ldr	r2, [r4, #16]
 80087bc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80087c0:	6910      	ldr	r0, [r2, #16]
 80087c2:	f000 fe81 	bl	80094c8 <__hi0bits>
 80087c6:	f1c0 0020 	rsb	r0, r0, #32
 80087ca:	9b05      	ldr	r3, [sp, #20]
 80087cc:	4418      	add	r0, r3
 80087ce:	f010 001f 	ands.w	r0, r0, #31
 80087d2:	f000 808c 	beq.w	80088ee <_dtoa_r+0x81e>
 80087d6:	f1c0 0220 	rsb	r2, r0, #32
 80087da:	2a04      	cmp	r2, #4
 80087dc:	f340 8085 	ble.w	80088ea <_dtoa_r+0x81a>
 80087e0:	f1c0 001c 	rsb	r0, r0, #28
 80087e4:	9b04      	ldr	r3, [sp, #16]
 80087e6:	4403      	add	r3, r0
 80087e8:	9304      	str	r3, [sp, #16]
 80087ea:	9b05      	ldr	r3, [sp, #20]
 80087ec:	4403      	add	r3, r0
 80087ee:	4480      	add	r8, r0
 80087f0:	9305      	str	r3, [sp, #20]
 80087f2:	9b04      	ldr	r3, [sp, #16]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	dd05      	ble.n	8008804 <_dtoa_r+0x734>
 80087f8:	4629      	mov	r1, r5
 80087fa:	461a      	mov	r2, r3
 80087fc:	4630      	mov	r0, r6
 80087fe:	f000 ffcd 	bl	800979c <__lshift>
 8008802:	4605      	mov	r5, r0
 8008804:	9b05      	ldr	r3, [sp, #20]
 8008806:	2b00      	cmp	r3, #0
 8008808:	dd05      	ble.n	8008816 <_dtoa_r+0x746>
 800880a:	4621      	mov	r1, r4
 800880c:	461a      	mov	r2, r3
 800880e:	4630      	mov	r0, r6
 8008810:	f000 ffc4 	bl	800979c <__lshift>
 8008814:	4604      	mov	r4, r0
 8008816:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008818:	2b00      	cmp	r3, #0
 800881a:	d06a      	beq.n	80088f2 <_dtoa_r+0x822>
 800881c:	4621      	mov	r1, r4
 800881e:	4628      	mov	r0, r5
 8008820:	f001 f82c 	bl	800987c <__mcmp>
 8008824:	2800      	cmp	r0, #0
 8008826:	da64      	bge.n	80088f2 <_dtoa_r+0x822>
 8008828:	2300      	movs	r3, #0
 800882a:	4629      	mov	r1, r5
 800882c:	220a      	movs	r2, #10
 800882e:	4630      	mov	r0, r6
 8008830:	f000 fdba 	bl	80093a8 <__multadd>
 8008834:	9b07      	ldr	r3, [sp, #28]
 8008836:	f10b 3bff 	add.w	fp, fp, #4294967295
 800883a:	4605      	mov	r5, r0
 800883c:	2b00      	cmp	r3, #0
 800883e:	f000 8191 	beq.w	8008b64 <_dtoa_r+0xa94>
 8008842:	4639      	mov	r1, r7
 8008844:	2300      	movs	r3, #0
 8008846:	220a      	movs	r2, #10
 8008848:	4630      	mov	r0, r6
 800884a:	f000 fdad 	bl	80093a8 <__multadd>
 800884e:	f1ba 0f00 	cmp.w	sl, #0
 8008852:	4607      	mov	r7, r0
 8008854:	f300 808d 	bgt.w	8008972 <_dtoa_r+0x8a2>
 8008858:	9b06      	ldr	r3, [sp, #24]
 800885a:	2b02      	cmp	r3, #2
 800885c:	dc50      	bgt.n	8008900 <_dtoa_r+0x830>
 800885e:	e088      	b.n	8008972 <_dtoa_r+0x8a2>
 8008860:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008862:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008866:	e751      	b.n	800870c <_dtoa_r+0x63c>
 8008868:	f109 34ff 	add.w	r4, r9, #4294967295
 800886c:	42a3      	cmp	r3, r4
 800886e:	bfbf      	itttt	lt
 8008870:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8008872:	1ae3      	sublt	r3, r4, r3
 8008874:	18d2      	addlt	r2, r2, r3
 8008876:	9209      	strlt	r2, [sp, #36]	; 0x24
 8008878:	bfb6      	itet	lt
 800887a:	4623      	movlt	r3, r4
 800887c:	1b1c      	subge	r4, r3, r4
 800887e:	2400      	movlt	r4, #0
 8008880:	f1b9 0f00 	cmp.w	r9, #0
 8008884:	bfb5      	itete	lt
 8008886:	9a04      	ldrlt	r2, [sp, #16]
 8008888:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800888c:	eba2 0809 	sublt.w	r8, r2, r9
 8008890:	464a      	movge	r2, r9
 8008892:	bfb8      	it	lt
 8008894:	2200      	movlt	r2, #0
 8008896:	e73c      	b.n	8008712 <_dtoa_r+0x642>
 8008898:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800889c:	9f07      	ldr	r7, [sp, #28]
 800889e:	461c      	mov	r4, r3
 80088a0:	e744      	b.n	800872c <_dtoa_r+0x65c>
 80088a2:	461a      	mov	r2, r3
 80088a4:	e770      	b.n	8008788 <_dtoa_r+0x6b8>
 80088a6:	9b06      	ldr	r3, [sp, #24]
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	dc18      	bgt.n	80088de <_dtoa_r+0x80e>
 80088ac:	9b02      	ldr	r3, [sp, #8]
 80088ae:	b9b3      	cbnz	r3, 80088de <_dtoa_r+0x80e>
 80088b0:	9b03      	ldr	r3, [sp, #12]
 80088b2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80088b6:	b9a2      	cbnz	r2, 80088e2 <_dtoa_r+0x812>
 80088b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80088bc:	0d12      	lsrs	r2, r2, #20
 80088be:	0512      	lsls	r2, r2, #20
 80088c0:	b18a      	cbz	r2, 80088e6 <_dtoa_r+0x816>
 80088c2:	9b04      	ldr	r3, [sp, #16]
 80088c4:	3301      	adds	r3, #1
 80088c6:	9304      	str	r3, [sp, #16]
 80088c8:	9b05      	ldr	r3, [sp, #20]
 80088ca:	3301      	adds	r3, #1
 80088cc:	9305      	str	r3, [sp, #20]
 80088ce:	2301      	movs	r3, #1
 80088d0:	930a      	str	r3, [sp, #40]	; 0x28
 80088d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	f47f af70 	bne.w	80087ba <_dtoa_r+0x6ea>
 80088da:	2001      	movs	r0, #1
 80088dc:	e775      	b.n	80087ca <_dtoa_r+0x6fa>
 80088de:	2300      	movs	r3, #0
 80088e0:	e7f6      	b.n	80088d0 <_dtoa_r+0x800>
 80088e2:	9b02      	ldr	r3, [sp, #8]
 80088e4:	e7f4      	b.n	80088d0 <_dtoa_r+0x800>
 80088e6:	920a      	str	r2, [sp, #40]	; 0x28
 80088e8:	e7f3      	b.n	80088d2 <_dtoa_r+0x802>
 80088ea:	d082      	beq.n	80087f2 <_dtoa_r+0x722>
 80088ec:	4610      	mov	r0, r2
 80088ee:	301c      	adds	r0, #28
 80088f0:	e778      	b.n	80087e4 <_dtoa_r+0x714>
 80088f2:	f1b9 0f00 	cmp.w	r9, #0
 80088f6:	dc37      	bgt.n	8008968 <_dtoa_r+0x898>
 80088f8:	9b06      	ldr	r3, [sp, #24]
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	dd34      	ble.n	8008968 <_dtoa_r+0x898>
 80088fe:	46ca      	mov	sl, r9
 8008900:	f1ba 0f00 	cmp.w	sl, #0
 8008904:	d10d      	bne.n	8008922 <_dtoa_r+0x852>
 8008906:	4621      	mov	r1, r4
 8008908:	4653      	mov	r3, sl
 800890a:	2205      	movs	r2, #5
 800890c:	4630      	mov	r0, r6
 800890e:	f000 fd4b 	bl	80093a8 <__multadd>
 8008912:	4601      	mov	r1, r0
 8008914:	4604      	mov	r4, r0
 8008916:	4628      	mov	r0, r5
 8008918:	f000 ffb0 	bl	800987c <__mcmp>
 800891c:	2800      	cmp	r0, #0
 800891e:	f73f adeb 	bgt.w	80084f8 <_dtoa_r+0x428>
 8008922:	9b08      	ldr	r3, [sp, #32]
 8008924:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008928:	ea6f 0b03 	mvn.w	fp, r3
 800892c:	f04f 0900 	mov.w	r9, #0
 8008930:	4621      	mov	r1, r4
 8008932:	4630      	mov	r0, r6
 8008934:	f000 fd16 	bl	8009364 <_Bfree>
 8008938:	2f00      	cmp	r7, #0
 800893a:	f43f aea8 	beq.w	800868e <_dtoa_r+0x5be>
 800893e:	f1b9 0f00 	cmp.w	r9, #0
 8008942:	d005      	beq.n	8008950 <_dtoa_r+0x880>
 8008944:	45b9      	cmp	r9, r7
 8008946:	d003      	beq.n	8008950 <_dtoa_r+0x880>
 8008948:	4649      	mov	r1, r9
 800894a:	4630      	mov	r0, r6
 800894c:	f000 fd0a 	bl	8009364 <_Bfree>
 8008950:	4639      	mov	r1, r7
 8008952:	4630      	mov	r0, r6
 8008954:	f000 fd06 	bl	8009364 <_Bfree>
 8008958:	e699      	b.n	800868e <_dtoa_r+0x5be>
 800895a:	2400      	movs	r4, #0
 800895c:	4627      	mov	r7, r4
 800895e:	e7e0      	b.n	8008922 <_dtoa_r+0x852>
 8008960:	46bb      	mov	fp, r7
 8008962:	4604      	mov	r4, r0
 8008964:	4607      	mov	r7, r0
 8008966:	e5c7      	b.n	80084f8 <_dtoa_r+0x428>
 8008968:	9b07      	ldr	r3, [sp, #28]
 800896a:	46ca      	mov	sl, r9
 800896c:	2b00      	cmp	r3, #0
 800896e:	f000 8100 	beq.w	8008b72 <_dtoa_r+0xaa2>
 8008972:	f1b8 0f00 	cmp.w	r8, #0
 8008976:	dd05      	ble.n	8008984 <_dtoa_r+0x8b4>
 8008978:	4639      	mov	r1, r7
 800897a:	4642      	mov	r2, r8
 800897c:	4630      	mov	r0, r6
 800897e:	f000 ff0d 	bl	800979c <__lshift>
 8008982:	4607      	mov	r7, r0
 8008984:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008986:	2b00      	cmp	r3, #0
 8008988:	d05d      	beq.n	8008a46 <_dtoa_r+0x976>
 800898a:	6879      	ldr	r1, [r7, #4]
 800898c:	4630      	mov	r0, r6
 800898e:	f000 fca9 	bl	80092e4 <_Balloc>
 8008992:	4680      	mov	r8, r0
 8008994:	b928      	cbnz	r0, 80089a2 <_dtoa_r+0x8d2>
 8008996:	4b82      	ldr	r3, [pc, #520]	; (8008ba0 <_dtoa_r+0xad0>)
 8008998:	4602      	mov	r2, r0
 800899a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800899e:	f7ff bbaf 	b.w	8008100 <_dtoa_r+0x30>
 80089a2:	693a      	ldr	r2, [r7, #16]
 80089a4:	3202      	adds	r2, #2
 80089a6:	0092      	lsls	r2, r2, #2
 80089a8:	f107 010c 	add.w	r1, r7, #12
 80089ac:	300c      	adds	r0, #12
 80089ae:	f000 fc8b 	bl	80092c8 <memcpy>
 80089b2:	2201      	movs	r2, #1
 80089b4:	4641      	mov	r1, r8
 80089b6:	4630      	mov	r0, r6
 80089b8:	f000 fef0 	bl	800979c <__lshift>
 80089bc:	9b01      	ldr	r3, [sp, #4]
 80089be:	3301      	adds	r3, #1
 80089c0:	9304      	str	r3, [sp, #16]
 80089c2:	9b01      	ldr	r3, [sp, #4]
 80089c4:	4453      	add	r3, sl
 80089c6:	9308      	str	r3, [sp, #32]
 80089c8:	9b02      	ldr	r3, [sp, #8]
 80089ca:	f003 0301 	and.w	r3, r3, #1
 80089ce:	46b9      	mov	r9, r7
 80089d0:	9307      	str	r3, [sp, #28]
 80089d2:	4607      	mov	r7, r0
 80089d4:	9b04      	ldr	r3, [sp, #16]
 80089d6:	4621      	mov	r1, r4
 80089d8:	3b01      	subs	r3, #1
 80089da:	4628      	mov	r0, r5
 80089dc:	9302      	str	r3, [sp, #8]
 80089de:	f7ff faeb 	bl	8007fb8 <quorem>
 80089e2:	4603      	mov	r3, r0
 80089e4:	3330      	adds	r3, #48	; 0x30
 80089e6:	9005      	str	r0, [sp, #20]
 80089e8:	4649      	mov	r1, r9
 80089ea:	4628      	mov	r0, r5
 80089ec:	9309      	str	r3, [sp, #36]	; 0x24
 80089ee:	f000 ff45 	bl	800987c <__mcmp>
 80089f2:	463a      	mov	r2, r7
 80089f4:	4682      	mov	sl, r0
 80089f6:	4621      	mov	r1, r4
 80089f8:	4630      	mov	r0, r6
 80089fa:	f000 ff5b 	bl	80098b4 <__mdiff>
 80089fe:	68c2      	ldr	r2, [r0, #12]
 8008a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a02:	4680      	mov	r8, r0
 8008a04:	bb0a      	cbnz	r2, 8008a4a <_dtoa_r+0x97a>
 8008a06:	4601      	mov	r1, r0
 8008a08:	4628      	mov	r0, r5
 8008a0a:	f000 ff37 	bl	800987c <__mcmp>
 8008a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a10:	4602      	mov	r2, r0
 8008a12:	4641      	mov	r1, r8
 8008a14:	4630      	mov	r0, r6
 8008a16:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8008a1a:	f000 fca3 	bl	8009364 <_Bfree>
 8008a1e:	9b06      	ldr	r3, [sp, #24]
 8008a20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a22:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008a26:	ea43 0102 	orr.w	r1, r3, r2
 8008a2a:	9b07      	ldr	r3, [sp, #28]
 8008a2c:	430b      	orrs	r3, r1
 8008a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a30:	d10d      	bne.n	8008a4e <_dtoa_r+0x97e>
 8008a32:	2b39      	cmp	r3, #57	; 0x39
 8008a34:	d029      	beq.n	8008a8a <_dtoa_r+0x9ba>
 8008a36:	f1ba 0f00 	cmp.w	sl, #0
 8008a3a:	dd01      	ble.n	8008a40 <_dtoa_r+0x970>
 8008a3c:	9b05      	ldr	r3, [sp, #20]
 8008a3e:	3331      	adds	r3, #49	; 0x31
 8008a40:	9a02      	ldr	r2, [sp, #8]
 8008a42:	7013      	strb	r3, [r2, #0]
 8008a44:	e774      	b.n	8008930 <_dtoa_r+0x860>
 8008a46:	4638      	mov	r0, r7
 8008a48:	e7b8      	b.n	80089bc <_dtoa_r+0x8ec>
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	e7e1      	b.n	8008a12 <_dtoa_r+0x942>
 8008a4e:	f1ba 0f00 	cmp.w	sl, #0
 8008a52:	db06      	blt.n	8008a62 <_dtoa_r+0x992>
 8008a54:	9906      	ldr	r1, [sp, #24]
 8008a56:	ea41 0a0a 	orr.w	sl, r1, sl
 8008a5a:	9907      	ldr	r1, [sp, #28]
 8008a5c:	ea5a 0101 	orrs.w	r1, sl, r1
 8008a60:	d120      	bne.n	8008aa4 <_dtoa_r+0x9d4>
 8008a62:	2a00      	cmp	r2, #0
 8008a64:	ddec      	ble.n	8008a40 <_dtoa_r+0x970>
 8008a66:	4629      	mov	r1, r5
 8008a68:	2201      	movs	r2, #1
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	9304      	str	r3, [sp, #16]
 8008a6e:	f000 fe95 	bl	800979c <__lshift>
 8008a72:	4621      	mov	r1, r4
 8008a74:	4605      	mov	r5, r0
 8008a76:	f000 ff01 	bl	800987c <__mcmp>
 8008a7a:	2800      	cmp	r0, #0
 8008a7c:	9b04      	ldr	r3, [sp, #16]
 8008a7e:	dc02      	bgt.n	8008a86 <_dtoa_r+0x9b6>
 8008a80:	d1de      	bne.n	8008a40 <_dtoa_r+0x970>
 8008a82:	07da      	lsls	r2, r3, #31
 8008a84:	d5dc      	bpl.n	8008a40 <_dtoa_r+0x970>
 8008a86:	2b39      	cmp	r3, #57	; 0x39
 8008a88:	d1d8      	bne.n	8008a3c <_dtoa_r+0x96c>
 8008a8a:	9a02      	ldr	r2, [sp, #8]
 8008a8c:	2339      	movs	r3, #57	; 0x39
 8008a8e:	7013      	strb	r3, [r2, #0]
 8008a90:	4643      	mov	r3, r8
 8008a92:	4698      	mov	r8, r3
 8008a94:	3b01      	subs	r3, #1
 8008a96:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8008a9a:	2a39      	cmp	r2, #57	; 0x39
 8008a9c:	d051      	beq.n	8008b42 <_dtoa_r+0xa72>
 8008a9e:	3201      	adds	r2, #1
 8008aa0:	701a      	strb	r2, [r3, #0]
 8008aa2:	e745      	b.n	8008930 <_dtoa_r+0x860>
 8008aa4:	2a00      	cmp	r2, #0
 8008aa6:	dd03      	ble.n	8008ab0 <_dtoa_r+0x9e0>
 8008aa8:	2b39      	cmp	r3, #57	; 0x39
 8008aaa:	d0ee      	beq.n	8008a8a <_dtoa_r+0x9ba>
 8008aac:	3301      	adds	r3, #1
 8008aae:	e7c7      	b.n	8008a40 <_dtoa_r+0x970>
 8008ab0:	9a04      	ldr	r2, [sp, #16]
 8008ab2:	9908      	ldr	r1, [sp, #32]
 8008ab4:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008ab8:	428a      	cmp	r2, r1
 8008aba:	d02b      	beq.n	8008b14 <_dtoa_r+0xa44>
 8008abc:	4629      	mov	r1, r5
 8008abe:	2300      	movs	r3, #0
 8008ac0:	220a      	movs	r2, #10
 8008ac2:	4630      	mov	r0, r6
 8008ac4:	f000 fc70 	bl	80093a8 <__multadd>
 8008ac8:	45b9      	cmp	r9, r7
 8008aca:	4605      	mov	r5, r0
 8008acc:	f04f 0300 	mov.w	r3, #0
 8008ad0:	f04f 020a 	mov.w	r2, #10
 8008ad4:	4649      	mov	r1, r9
 8008ad6:	4630      	mov	r0, r6
 8008ad8:	d107      	bne.n	8008aea <_dtoa_r+0xa1a>
 8008ada:	f000 fc65 	bl	80093a8 <__multadd>
 8008ade:	4681      	mov	r9, r0
 8008ae0:	4607      	mov	r7, r0
 8008ae2:	9b04      	ldr	r3, [sp, #16]
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	9304      	str	r3, [sp, #16]
 8008ae8:	e774      	b.n	80089d4 <_dtoa_r+0x904>
 8008aea:	f000 fc5d 	bl	80093a8 <__multadd>
 8008aee:	4639      	mov	r1, r7
 8008af0:	4681      	mov	r9, r0
 8008af2:	2300      	movs	r3, #0
 8008af4:	220a      	movs	r2, #10
 8008af6:	4630      	mov	r0, r6
 8008af8:	f000 fc56 	bl	80093a8 <__multadd>
 8008afc:	4607      	mov	r7, r0
 8008afe:	e7f0      	b.n	8008ae2 <_dtoa_r+0xa12>
 8008b00:	f1ba 0f00 	cmp.w	sl, #0
 8008b04:	9a01      	ldr	r2, [sp, #4]
 8008b06:	bfcc      	ite	gt
 8008b08:	46d0      	movgt	r8, sl
 8008b0a:	f04f 0801 	movle.w	r8, #1
 8008b0e:	4490      	add	r8, r2
 8008b10:	f04f 0900 	mov.w	r9, #0
 8008b14:	4629      	mov	r1, r5
 8008b16:	2201      	movs	r2, #1
 8008b18:	4630      	mov	r0, r6
 8008b1a:	9302      	str	r3, [sp, #8]
 8008b1c:	f000 fe3e 	bl	800979c <__lshift>
 8008b20:	4621      	mov	r1, r4
 8008b22:	4605      	mov	r5, r0
 8008b24:	f000 feaa 	bl	800987c <__mcmp>
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	dcb1      	bgt.n	8008a90 <_dtoa_r+0x9c0>
 8008b2c:	d102      	bne.n	8008b34 <_dtoa_r+0xa64>
 8008b2e:	9b02      	ldr	r3, [sp, #8]
 8008b30:	07db      	lsls	r3, r3, #31
 8008b32:	d4ad      	bmi.n	8008a90 <_dtoa_r+0x9c0>
 8008b34:	4643      	mov	r3, r8
 8008b36:	4698      	mov	r8, r3
 8008b38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b3c:	2a30      	cmp	r2, #48	; 0x30
 8008b3e:	d0fa      	beq.n	8008b36 <_dtoa_r+0xa66>
 8008b40:	e6f6      	b.n	8008930 <_dtoa_r+0x860>
 8008b42:	9a01      	ldr	r2, [sp, #4]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d1a4      	bne.n	8008a92 <_dtoa_r+0x9c2>
 8008b48:	f10b 0b01 	add.w	fp, fp, #1
 8008b4c:	2331      	movs	r3, #49	; 0x31
 8008b4e:	e778      	b.n	8008a42 <_dtoa_r+0x972>
 8008b50:	4b14      	ldr	r3, [pc, #80]	; (8008ba4 <_dtoa_r+0xad4>)
 8008b52:	f7ff bb27 	b.w	80081a4 <_dtoa_r+0xd4>
 8008b56:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	f47f ab03 	bne.w	8008164 <_dtoa_r+0x94>
 8008b5e:	4b12      	ldr	r3, [pc, #72]	; (8008ba8 <_dtoa_r+0xad8>)
 8008b60:	f7ff bb20 	b.w	80081a4 <_dtoa_r+0xd4>
 8008b64:	f1ba 0f00 	cmp.w	sl, #0
 8008b68:	dc03      	bgt.n	8008b72 <_dtoa_r+0xaa2>
 8008b6a:	9b06      	ldr	r3, [sp, #24]
 8008b6c:	2b02      	cmp	r3, #2
 8008b6e:	f73f aec7 	bgt.w	8008900 <_dtoa_r+0x830>
 8008b72:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008b76:	4621      	mov	r1, r4
 8008b78:	4628      	mov	r0, r5
 8008b7a:	f7ff fa1d 	bl	8007fb8 <quorem>
 8008b7e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008b82:	f808 3b01 	strb.w	r3, [r8], #1
 8008b86:	9a01      	ldr	r2, [sp, #4]
 8008b88:	eba8 0202 	sub.w	r2, r8, r2
 8008b8c:	4592      	cmp	sl, r2
 8008b8e:	ddb7      	ble.n	8008b00 <_dtoa_r+0xa30>
 8008b90:	4629      	mov	r1, r5
 8008b92:	2300      	movs	r3, #0
 8008b94:	220a      	movs	r2, #10
 8008b96:	4630      	mov	r0, r6
 8008b98:	f000 fc06 	bl	80093a8 <__multadd>
 8008b9c:	4605      	mov	r5, r0
 8008b9e:	e7ea      	b.n	8008b76 <_dtoa_r+0xaa6>
 8008ba0:	0800af40 	.word	0x0800af40
 8008ba4:	0800ad44 	.word	0x0800ad44
 8008ba8:	0800aec1 	.word	0x0800aec1

08008bac <rshift>:
 8008bac:	6903      	ldr	r3, [r0, #16]
 8008bae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008bb2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008bb6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008bba:	f100 0414 	add.w	r4, r0, #20
 8008bbe:	dd45      	ble.n	8008c4c <rshift+0xa0>
 8008bc0:	f011 011f 	ands.w	r1, r1, #31
 8008bc4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008bc8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008bcc:	d10c      	bne.n	8008be8 <rshift+0x3c>
 8008bce:	f100 0710 	add.w	r7, r0, #16
 8008bd2:	4629      	mov	r1, r5
 8008bd4:	42b1      	cmp	r1, r6
 8008bd6:	d334      	bcc.n	8008c42 <rshift+0x96>
 8008bd8:	1a9b      	subs	r3, r3, r2
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	1eea      	subs	r2, r5, #3
 8008bde:	4296      	cmp	r6, r2
 8008be0:	bf38      	it	cc
 8008be2:	2300      	movcc	r3, #0
 8008be4:	4423      	add	r3, r4
 8008be6:	e015      	b.n	8008c14 <rshift+0x68>
 8008be8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008bec:	f1c1 0820 	rsb	r8, r1, #32
 8008bf0:	40cf      	lsrs	r7, r1
 8008bf2:	f105 0e04 	add.w	lr, r5, #4
 8008bf6:	46a1      	mov	r9, r4
 8008bf8:	4576      	cmp	r6, lr
 8008bfa:	46f4      	mov	ip, lr
 8008bfc:	d815      	bhi.n	8008c2a <rshift+0x7e>
 8008bfe:	1a9a      	subs	r2, r3, r2
 8008c00:	0092      	lsls	r2, r2, #2
 8008c02:	3a04      	subs	r2, #4
 8008c04:	3501      	adds	r5, #1
 8008c06:	42ae      	cmp	r6, r5
 8008c08:	bf38      	it	cc
 8008c0a:	2200      	movcc	r2, #0
 8008c0c:	18a3      	adds	r3, r4, r2
 8008c0e:	50a7      	str	r7, [r4, r2]
 8008c10:	b107      	cbz	r7, 8008c14 <rshift+0x68>
 8008c12:	3304      	adds	r3, #4
 8008c14:	1b1a      	subs	r2, r3, r4
 8008c16:	42a3      	cmp	r3, r4
 8008c18:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008c1c:	bf08      	it	eq
 8008c1e:	2300      	moveq	r3, #0
 8008c20:	6102      	str	r2, [r0, #16]
 8008c22:	bf08      	it	eq
 8008c24:	6143      	streq	r3, [r0, #20]
 8008c26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c2a:	f8dc c000 	ldr.w	ip, [ip]
 8008c2e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008c32:	ea4c 0707 	orr.w	r7, ip, r7
 8008c36:	f849 7b04 	str.w	r7, [r9], #4
 8008c3a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008c3e:	40cf      	lsrs	r7, r1
 8008c40:	e7da      	b.n	8008bf8 <rshift+0x4c>
 8008c42:	f851 cb04 	ldr.w	ip, [r1], #4
 8008c46:	f847 cf04 	str.w	ip, [r7, #4]!
 8008c4a:	e7c3      	b.n	8008bd4 <rshift+0x28>
 8008c4c:	4623      	mov	r3, r4
 8008c4e:	e7e1      	b.n	8008c14 <rshift+0x68>

08008c50 <__hexdig_fun>:
 8008c50:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008c54:	2b09      	cmp	r3, #9
 8008c56:	d802      	bhi.n	8008c5e <__hexdig_fun+0xe>
 8008c58:	3820      	subs	r0, #32
 8008c5a:	b2c0      	uxtb	r0, r0
 8008c5c:	4770      	bx	lr
 8008c5e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008c62:	2b05      	cmp	r3, #5
 8008c64:	d801      	bhi.n	8008c6a <__hexdig_fun+0x1a>
 8008c66:	3847      	subs	r0, #71	; 0x47
 8008c68:	e7f7      	b.n	8008c5a <__hexdig_fun+0xa>
 8008c6a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008c6e:	2b05      	cmp	r3, #5
 8008c70:	d801      	bhi.n	8008c76 <__hexdig_fun+0x26>
 8008c72:	3827      	subs	r0, #39	; 0x27
 8008c74:	e7f1      	b.n	8008c5a <__hexdig_fun+0xa>
 8008c76:	2000      	movs	r0, #0
 8008c78:	4770      	bx	lr
	...

08008c7c <__gethex>:
 8008c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c80:	ed2d 8b02 	vpush	{d8}
 8008c84:	b089      	sub	sp, #36	; 0x24
 8008c86:	ee08 0a10 	vmov	s16, r0
 8008c8a:	9304      	str	r3, [sp, #16]
 8008c8c:	4bb4      	ldr	r3, [pc, #720]	; (8008f60 <__gethex+0x2e4>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	9301      	str	r3, [sp, #4]
 8008c92:	4618      	mov	r0, r3
 8008c94:	468b      	mov	fp, r1
 8008c96:	4690      	mov	r8, r2
 8008c98:	f7f7 fad2 	bl	8000240 <strlen>
 8008c9c:	9b01      	ldr	r3, [sp, #4]
 8008c9e:	f8db 2000 	ldr.w	r2, [fp]
 8008ca2:	4403      	add	r3, r0
 8008ca4:	4682      	mov	sl, r0
 8008ca6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008caa:	9305      	str	r3, [sp, #20]
 8008cac:	1c93      	adds	r3, r2, #2
 8008cae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008cb2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008cb6:	32fe      	adds	r2, #254	; 0xfe
 8008cb8:	18d1      	adds	r1, r2, r3
 8008cba:	461f      	mov	r7, r3
 8008cbc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008cc0:	9100      	str	r1, [sp, #0]
 8008cc2:	2830      	cmp	r0, #48	; 0x30
 8008cc4:	d0f8      	beq.n	8008cb8 <__gethex+0x3c>
 8008cc6:	f7ff ffc3 	bl	8008c50 <__hexdig_fun>
 8008cca:	4604      	mov	r4, r0
 8008ccc:	2800      	cmp	r0, #0
 8008cce:	d13a      	bne.n	8008d46 <__gethex+0xca>
 8008cd0:	9901      	ldr	r1, [sp, #4]
 8008cd2:	4652      	mov	r2, sl
 8008cd4:	4638      	mov	r0, r7
 8008cd6:	f001 fa2f 	bl	800a138 <strncmp>
 8008cda:	4605      	mov	r5, r0
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	d168      	bne.n	8008db2 <__gethex+0x136>
 8008ce0:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008ce4:	eb07 060a 	add.w	r6, r7, sl
 8008ce8:	f7ff ffb2 	bl	8008c50 <__hexdig_fun>
 8008cec:	2800      	cmp	r0, #0
 8008cee:	d062      	beq.n	8008db6 <__gethex+0x13a>
 8008cf0:	4633      	mov	r3, r6
 8008cf2:	7818      	ldrb	r0, [r3, #0]
 8008cf4:	2830      	cmp	r0, #48	; 0x30
 8008cf6:	461f      	mov	r7, r3
 8008cf8:	f103 0301 	add.w	r3, r3, #1
 8008cfc:	d0f9      	beq.n	8008cf2 <__gethex+0x76>
 8008cfe:	f7ff ffa7 	bl	8008c50 <__hexdig_fun>
 8008d02:	2301      	movs	r3, #1
 8008d04:	fab0 f480 	clz	r4, r0
 8008d08:	0964      	lsrs	r4, r4, #5
 8008d0a:	4635      	mov	r5, r6
 8008d0c:	9300      	str	r3, [sp, #0]
 8008d0e:	463a      	mov	r2, r7
 8008d10:	4616      	mov	r6, r2
 8008d12:	3201      	adds	r2, #1
 8008d14:	7830      	ldrb	r0, [r6, #0]
 8008d16:	f7ff ff9b 	bl	8008c50 <__hexdig_fun>
 8008d1a:	2800      	cmp	r0, #0
 8008d1c:	d1f8      	bne.n	8008d10 <__gethex+0x94>
 8008d1e:	9901      	ldr	r1, [sp, #4]
 8008d20:	4652      	mov	r2, sl
 8008d22:	4630      	mov	r0, r6
 8008d24:	f001 fa08 	bl	800a138 <strncmp>
 8008d28:	b980      	cbnz	r0, 8008d4c <__gethex+0xd0>
 8008d2a:	b94d      	cbnz	r5, 8008d40 <__gethex+0xc4>
 8008d2c:	eb06 050a 	add.w	r5, r6, sl
 8008d30:	462a      	mov	r2, r5
 8008d32:	4616      	mov	r6, r2
 8008d34:	3201      	adds	r2, #1
 8008d36:	7830      	ldrb	r0, [r6, #0]
 8008d38:	f7ff ff8a 	bl	8008c50 <__hexdig_fun>
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	d1f8      	bne.n	8008d32 <__gethex+0xb6>
 8008d40:	1bad      	subs	r5, r5, r6
 8008d42:	00ad      	lsls	r5, r5, #2
 8008d44:	e004      	b.n	8008d50 <__gethex+0xd4>
 8008d46:	2400      	movs	r4, #0
 8008d48:	4625      	mov	r5, r4
 8008d4a:	e7e0      	b.n	8008d0e <__gethex+0x92>
 8008d4c:	2d00      	cmp	r5, #0
 8008d4e:	d1f7      	bne.n	8008d40 <__gethex+0xc4>
 8008d50:	7833      	ldrb	r3, [r6, #0]
 8008d52:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008d56:	2b50      	cmp	r3, #80	; 0x50
 8008d58:	d13b      	bne.n	8008dd2 <__gethex+0x156>
 8008d5a:	7873      	ldrb	r3, [r6, #1]
 8008d5c:	2b2b      	cmp	r3, #43	; 0x2b
 8008d5e:	d02c      	beq.n	8008dba <__gethex+0x13e>
 8008d60:	2b2d      	cmp	r3, #45	; 0x2d
 8008d62:	d02e      	beq.n	8008dc2 <__gethex+0x146>
 8008d64:	1c71      	adds	r1, r6, #1
 8008d66:	f04f 0900 	mov.w	r9, #0
 8008d6a:	7808      	ldrb	r0, [r1, #0]
 8008d6c:	f7ff ff70 	bl	8008c50 <__hexdig_fun>
 8008d70:	1e43      	subs	r3, r0, #1
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	2b18      	cmp	r3, #24
 8008d76:	d82c      	bhi.n	8008dd2 <__gethex+0x156>
 8008d78:	f1a0 0210 	sub.w	r2, r0, #16
 8008d7c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008d80:	f7ff ff66 	bl	8008c50 <__hexdig_fun>
 8008d84:	1e43      	subs	r3, r0, #1
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	2b18      	cmp	r3, #24
 8008d8a:	d91d      	bls.n	8008dc8 <__gethex+0x14c>
 8008d8c:	f1b9 0f00 	cmp.w	r9, #0
 8008d90:	d000      	beq.n	8008d94 <__gethex+0x118>
 8008d92:	4252      	negs	r2, r2
 8008d94:	4415      	add	r5, r2
 8008d96:	f8cb 1000 	str.w	r1, [fp]
 8008d9a:	b1e4      	cbz	r4, 8008dd6 <__gethex+0x15a>
 8008d9c:	9b00      	ldr	r3, [sp, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	bf14      	ite	ne
 8008da2:	2700      	movne	r7, #0
 8008da4:	2706      	moveq	r7, #6
 8008da6:	4638      	mov	r0, r7
 8008da8:	b009      	add	sp, #36	; 0x24
 8008daa:	ecbd 8b02 	vpop	{d8}
 8008dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008db2:	463e      	mov	r6, r7
 8008db4:	4625      	mov	r5, r4
 8008db6:	2401      	movs	r4, #1
 8008db8:	e7ca      	b.n	8008d50 <__gethex+0xd4>
 8008dba:	f04f 0900 	mov.w	r9, #0
 8008dbe:	1cb1      	adds	r1, r6, #2
 8008dc0:	e7d3      	b.n	8008d6a <__gethex+0xee>
 8008dc2:	f04f 0901 	mov.w	r9, #1
 8008dc6:	e7fa      	b.n	8008dbe <__gethex+0x142>
 8008dc8:	230a      	movs	r3, #10
 8008dca:	fb03 0202 	mla	r2, r3, r2, r0
 8008dce:	3a10      	subs	r2, #16
 8008dd0:	e7d4      	b.n	8008d7c <__gethex+0x100>
 8008dd2:	4631      	mov	r1, r6
 8008dd4:	e7df      	b.n	8008d96 <__gethex+0x11a>
 8008dd6:	1bf3      	subs	r3, r6, r7
 8008dd8:	3b01      	subs	r3, #1
 8008dda:	4621      	mov	r1, r4
 8008ddc:	2b07      	cmp	r3, #7
 8008dde:	dc0b      	bgt.n	8008df8 <__gethex+0x17c>
 8008de0:	ee18 0a10 	vmov	r0, s16
 8008de4:	f000 fa7e 	bl	80092e4 <_Balloc>
 8008de8:	4604      	mov	r4, r0
 8008dea:	b940      	cbnz	r0, 8008dfe <__gethex+0x182>
 8008dec:	4b5d      	ldr	r3, [pc, #372]	; (8008f64 <__gethex+0x2e8>)
 8008dee:	4602      	mov	r2, r0
 8008df0:	21de      	movs	r1, #222	; 0xde
 8008df2:	485d      	ldr	r0, [pc, #372]	; (8008f68 <__gethex+0x2ec>)
 8008df4:	f001 f9c2 	bl	800a17c <__assert_func>
 8008df8:	3101      	adds	r1, #1
 8008dfa:	105b      	asrs	r3, r3, #1
 8008dfc:	e7ee      	b.n	8008ddc <__gethex+0x160>
 8008dfe:	f100 0914 	add.w	r9, r0, #20
 8008e02:	f04f 0b00 	mov.w	fp, #0
 8008e06:	f1ca 0301 	rsb	r3, sl, #1
 8008e0a:	f8cd 9008 	str.w	r9, [sp, #8]
 8008e0e:	f8cd b000 	str.w	fp, [sp]
 8008e12:	9306      	str	r3, [sp, #24]
 8008e14:	42b7      	cmp	r7, r6
 8008e16:	d340      	bcc.n	8008e9a <__gethex+0x21e>
 8008e18:	9802      	ldr	r0, [sp, #8]
 8008e1a:	9b00      	ldr	r3, [sp, #0]
 8008e1c:	f840 3b04 	str.w	r3, [r0], #4
 8008e20:	eba0 0009 	sub.w	r0, r0, r9
 8008e24:	1080      	asrs	r0, r0, #2
 8008e26:	0146      	lsls	r6, r0, #5
 8008e28:	6120      	str	r0, [r4, #16]
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f000 fb4c 	bl	80094c8 <__hi0bits>
 8008e30:	1a30      	subs	r0, r6, r0
 8008e32:	f8d8 6000 	ldr.w	r6, [r8]
 8008e36:	42b0      	cmp	r0, r6
 8008e38:	dd63      	ble.n	8008f02 <__gethex+0x286>
 8008e3a:	1b87      	subs	r7, r0, r6
 8008e3c:	4639      	mov	r1, r7
 8008e3e:	4620      	mov	r0, r4
 8008e40:	f000 feed 	bl	8009c1e <__any_on>
 8008e44:	4682      	mov	sl, r0
 8008e46:	b1a8      	cbz	r0, 8008e74 <__gethex+0x1f8>
 8008e48:	1e7b      	subs	r3, r7, #1
 8008e4a:	1159      	asrs	r1, r3, #5
 8008e4c:	f003 021f 	and.w	r2, r3, #31
 8008e50:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008e54:	f04f 0a01 	mov.w	sl, #1
 8008e58:	fa0a f202 	lsl.w	r2, sl, r2
 8008e5c:	420a      	tst	r2, r1
 8008e5e:	d009      	beq.n	8008e74 <__gethex+0x1f8>
 8008e60:	4553      	cmp	r3, sl
 8008e62:	dd05      	ble.n	8008e70 <__gethex+0x1f4>
 8008e64:	1eb9      	subs	r1, r7, #2
 8008e66:	4620      	mov	r0, r4
 8008e68:	f000 fed9 	bl	8009c1e <__any_on>
 8008e6c:	2800      	cmp	r0, #0
 8008e6e:	d145      	bne.n	8008efc <__gethex+0x280>
 8008e70:	f04f 0a02 	mov.w	sl, #2
 8008e74:	4639      	mov	r1, r7
 8008e76:	4620      	mov	r0, r4
 8008e78:	f7ff fe98 	bl	8008bac <rshift>
 8008e7c:	443d      	add	r5, r7
 8008e7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e82:	42ab      	cmp	r3, r5
 8008e84:	da4c      	bge.n	8008f20 <__gethex+0x2a4>
 8008e86:	ee18 0a10 	vmov	r0, s16
 8008e8a:	4621      	mov	r1, r4
 8008e8c:	f000 fa6a 	bl	8009364 <_Bfree>
 8008e90:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008e92:	2300      	movs	r3, #0
 8008e94:	6013      	str	r3, [r2, #0]
 8008e96:	27a3      	movs	r7, #163	; 0xa3
 8008e98:	e785      	b.n	8008da6 <__gethex+0x12a>
 8008e9a:	1e73      	subs	r3, r6, #1
 8008e9c:	9a05      	ldr	r2, [sp, #20]
 8008e9e:	9303      	str	r3, [sp, #12]
 8008ea0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d019      	beq.n	8008edc <__gethex+0x260>
 8008ea8:	f1bb 0f20 	cmp.w	fp, #32
 8008eac:	d107      	bne.n	8008ebe <__gethex+0x242>
 8008eae:	9b02      	ldr	r3, [sp, #8]
 8008eb0:	9a00      	ldr	r2, [sp, #0]
 8008eb2:	f843 2b04 	str.w	r2, [r3], #4
 8008eb6:	9302      	str	r3, [sp, #8]
 8008eb8:	2300      	movs	r3, #0
 8008eba:	9300      	str	r3, [sp, #0]
 8008ebc:	469b      	mov	fp, r3
 8008ebe:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008ec2:	f7ff fec5 	bl	8008c50 <__hexdig_fun>
 8008ec6:	9b00      	ldr	r3, [sp, #0]
 8008ec8:	f000 000f 	and.w	r0, r0, #15
 8008ecc:	fa00 f00b 	lsl.w	r0, r0, fp
 8008ed0:	4303      	orrs	r3, r0
 8008ed2:	9300      	str	r3, [sp, #0]
 8008ed4:	f10b 0b04 	add.w	fp, fp, #4
 8008ed8:	9b03      	ldr	r3, [sp, #12]
 8008eda:	e00d      	b.n	8008ef8 <__gethex+0x27c>
 8008edc:	9b03      	ldr	r3, [sp, #12]
 8008ede:	9a06      	ldr	r2, [sp, #24]
 8008ee0:	4413      	add	r3, r2
 8008ee2:	42bb      	cmp	r3, r7
 8008ee4:	d3e0      	bcc.n	8008ea8 <__gethex+0x22c>
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	9901      	ldr	r1, [sp, #4]
 8008eea:	9307      	str	r3, [sp, #28]
 8008eec:	4652      	mov	r2, sl
 8008eee:	f001 f923 	bl	800a138 <strncmp>
 8008ef2:	9b07      	ldr	r3, [sp, #28]
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	d1d7      	bne.n	8008ea8 <__gethex+0x22c>
 8008ef8:	461e      	mov	r6, r3
 8008efa:	e78b      	b.n	8008e14 <__gethex+0x198>
 8008efc:	f04f 0a03 	mov.w	sl, #3
 8008f00:	e7b8      	b.n	8008e74 <__gethex+0x1f8>
 8008f02:	da0a      	bge.n	8008f1a <__gethex+0x29e>
 8008f04:	1a37      	subs	r7, r6, r0
 8008f06:	4621      	mov	r1, r4
 8008f08:	ee18 0a10 	vmov	r0, s16
 8008f0c:	463a      	mov	r2, r7
 8008f0e:	f000 fc45 	bl	800979c <__lshift>
 8008f12:	1bed      	subs	r5, r5, r7
 8008f14:	4604      	mov	r4, r0
 8008f16:	f100 0914 	add.w	r9, r0, #20
 8008f1a:	f04f 0a00 	mov.w	sl, #0
 8008f1e:	e7ae      	b.n	8008e7e <__gethex+0x202>
 8008f20:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008f24:	42a8      	cmp	r0, r5
 8008f26:	dd72      	ble.n	800900e <__gethex+0x392>
 8008f28:	1b45      	subs	r5, r0, r5
 8008f2a:	42ae      	cmp	r6, r5
 8008f2c:	dc36      	bgt.n	8008f9c <__gethex+0x320>
 8008f2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008f32:	2b02      	cmp	r3, #2
 8008f34:	d02a      	beq.n	8008f8c <__gethex+0x310>
 8008f36:	2b03      	cmp	r3, #3
 8008f38:	d02c      	beq.n	8008f94 <__gethex+0x318>
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d11c      	bne.n	8008f78 <__gethex+0x2fc>
 8008f3e:	42ae      	cmp	r6, r5
 8008f40:	d11a      	bne.n	8008f78 <__gethex+0x2fc>
 8008f42:	2e01      	cmp	r6, #1
 8008f44:	d112      	bne.n	8008f6c <__gethex+0x2f0>
 8008f46:	9a04      	ldr	r2, [sp, #16]
 8008f48:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008f4c:	6013      	str	r3, [r2, #0]
 8008f4e:	2301      	movs	r3, #1
 8008f50:	6123      	str	r3, [r4, #16]
 8008f52:	f8c9 3000 	str.w	r3, [r9]
 8008f56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f58:	2762      	movs	r7, #98	; 0x62
 8008f5a:	601c      	str	r4, [r3, #0]
 8008f5c:	e723      	b.n	8008da6 <__gethex+0x12a>
 8008f5e:	bf00      	nop
 8008f60:	0800afb8 	.word	0x0800afb8
 8008f64:	0800af40 	.word	0x0800af40
 8008f68:	0800af51 	.word	0x0800af51
 8008f6c:	1e71      	subs	r1, r6, #1
 8008f6e:	4620      	mov	r0, r4
 8008f70:	f000 fe55 	bl	8009c1e <__any_on>
 8008f74:	2800      	cmp	r0, #0
 8008f76:	d1e6      	bne.n	8008f46 <__gethex+0x2ca>
 8008f78:	ee18 0a10 	vmov	r0, s16
 8008f7c:	4621      	mov	r1, r4
 8008f7e:	f000 f9f1 	bl	8009364 <_Bfree>
 8008f82:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008f84:	2300      	movs	r3, #0
 8008f86:	6013      	str	r3, [r2, #0]
 8008f88:	2750      	movs	r7, #80	; 0x50
 8008f8a:	e70c      	b.n	8008da6 <__gethex+0x12a>
 8008f8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d1f2      	bne.n	8008f78 <__gethex+0x2fc>
 8008f92:	e7d8      	b.n	8008f46 <__gethex+0x2ca>
 8008f94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d1d5      	bne.n	8008f46 <__gethex+0x2ca>
 8008f9a:	e7ed      	b.n	8008f78 <__gethex+0x2fc>
 8008f9c:	1e6f      	subs	r7, r5, #1
 8008f9e:	f1ba 0f00 	cmp.w	sl, #0
 8008fa2:	d131      	bne.n	8009008 <__gethex+0x38c>
 8008fa4:	b127      	cbz	r7, 8008fb0 <__gethex+0x334>
 8008fa6:	4639      	mov	r1, r7
 8008fa8:	4620      	mov	r0, r4
 8008faa:	f000 fe38 	bl	8009c1e <__any_on>
 8008fae:	4682      	mov	sl, r0
 8008fb0:	117b      	asrs	r3, r7, #5
 8008fb2:	2101      	movs	r1, #1
 8008fb4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008fb8:	f007 071f 	and.w	r7, r7, #31
 8008fbc:	fa01 f707 	lsl.w	r7, r1, r7
 8008fc0:	421f      	tst	r7, r3
 8008fc2:	4629      	mov	r1, r5
 8008fc4:	4620      	mov	r0, r4
 8008fc6:	bf18      	it	ne
 8008fc8:	f04a 0a02 	orrne.w	sl, sl, #2
 8008fcc:	1b76      	subs	r6, r6, r5
 8008fce:	f7ff fded 	bl	8008bac <rshift>
 8008fd2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008fd6:	2702      	movs	r7, #2
 8008fd8:	f1ba 0f00 	cmp.w	sl, #0
 8008fdc:	d048      	beq.n	8009070 <__gethex+0x3f4>
 8008fde:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008fe2:	2b02      	cmp	r3, #2
 8008fe4:	d015      	beq.n	8009012 <__gethex+0x396>
 8008fe6:	2b03      	cmp	r3, #3
 8008fe8:	d017      	beq.n	800901a <__gethex+0x39e>
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d109      	bne.n	8009002 <__gethex+0x386>
 8008fee:	f01a 0f02 	tst.w	sl, #2
 8008ff2:	d006      	beq.n	8009002 <__gethex+0x386>
 8008ff4:	f8d9 0000 	ldr.w	r0, [r9]
 8008ff8:	ea4a 0a00 	orr.w	sl, sl, r0
 8008ffc:	f01a 0f01 	tst.w	sl, #1
 8009000:	d10e      	bne.n	8009020 <__gethex+0x3a4>
 8009002:	f047 0710 	orr.w	r7, r7, #16
 8009006:	e033      	b.n	8009070 <__gethex+0x3f4>
 8009008:	f04f 0a01 	mov.w	sl, #1
 800900c:	e7d0      	b.n	8008fb0 <__gethex+0x334>
 800900e:	2701      	movs	r7, #1
 8009010:	e7e2      	b.n	8008fd8 <__gethex+0x35c>
 8009012:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009014:	f1c3 0301 	rsb	r3, r3, #1
 8009018:	9315      	str	r3, [sp, #84]	; 0x54
 800901a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800901c:	2b00      	cmp	r3, #0
 800901e:	d0f0      	beq.n	8009002 <__gethex+0x386>
 8009020:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009024:	f104 0314 	add.w	r3, r4, #20
 8009028:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800902c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009030:	f04f 0c00 	mov.w	ip, #0
 8009034:	4618      	mov	r0, r3
 8009036:	f853 2b04 	ldr.w	r2, [r3], #4
 800903a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800903e:	d01c      	beq.n	800907a <__gethex+0x3fe>
 8009040:	3201      	adds	r2, #1
 8009042:	6002      	str	r2, [r0, #0]
 8009044:	2f02      	cmp	r7, #2
 8009046:	f104 0314 	add.w	r3, r4, #20
 800904a:	d13f      	bne.n	80090cc <__gethex+0x450>
 800904c:	f8d8 2000 	ldr.w	r2, [r8]
 8009050:	3a01      	subs	r2, #1
 8009052:	42b2      	cmp	r2, r6
 8009054:	d10a      	bne.n	800906c <__gethex+0x3f0>
 8009056:	1171      	asrs	r1, r6, #5
 8009058:	2201      	movs	r2, #1
 800905a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800905e:	f006 061f 	and.w	r6, r6, #31
 8009062:	fa02 f606 	lsl.w	r6, r2, r6
 8009066:	421e      	tst	r6, r3
 8009068:	bf18      	it	ne
 800906a:	4617      	movne	r7, r2
 800906c:	f047 0720 	orr.w	r7, r7, #32
 8009070:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009072:	601c      	str	r4, [r3, #0]
 8009074:	9b04      	ldr	r3, [sp, #16]
 8009076:	601d      	str	r5, [r3, #0]
 8009078:	e695      	b.n	8008da6 <__gethex+0x12a>
 800907a:	4299      	cmp	r1, r3
 800907c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009080:	d8d8      	bhi.n	8009034 <__gethex+0x3b8>
 8009082:	68a3      	ldr	r3, [r4, #8]
 8009084:	459b      	cmp	fp, r3
 8009086:	db19      	blt.n	80090bc <__gethex+0x440>
 8009088:	6861      	ldr	r1, [r4, #4]
 800908a:	ee18 0a10 	vmov	r0, s16
 800908e:	3101      	adds	r1, #1
 8009090:	f000 f928 	bl	80092e4 <_Balloc>
 8009094:	4681      	mov	r9, r0
 8009096:	b918      	cbnz	r0, 80090a0 <__gethex+0x424>
 8009098:	4b1a      	ldr	r3, [pc, #104]	; (8009104 <__gethex+0x488>)
 800909a:	4602      	mov	r2, r0
 800909c:	2184      	movs	r1, #132	; 0x84
 800909e:	e6a8      	b.n	8008df2 <__gethex+0x176>
 80090a0:	6922      	ldr	r2, [r4, #16]
 80090a2:	3202      	adds	r2, #2
 80090a4:	f104 010c 	add.w	r1, r4, #12
 80090a8:	0092      	lsls	r2, r2, #2
 80090aa:	300c      	adds	r0, #12
 80090ac:	f000 f90c 	bl	80092c8 <memcpy>
 80090b0:	4621      	mov	r1, r4
 80090b2:	ee18 0a10 	vmov	r0, s16
 80090b6:	f000 f955 	bl	8009364 <_Bfree>
 80090ba:	464c      	mov	r4, r9
 80090bc:	6923      	ldr	r3, [r4, #16]
 80090be:	1c5a      	adds	r2, r3, #1
 80090c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80090c4:	6122      	str	r2, [r4, #16]
 80090c6:	2201      	movs	r2, #1
 80090c8:	615a      	str	r2, [r3, #20]
 80090ca:	e7bb      	b.n	8009044 <__gethex+0x3c8>
 80090cc:	6922      	ldr	r2, [r4, #16]
 80090ce:	455a      	cmp	r2, fp
 80090d0:	dd0b      	ble.n	80090ea <__gethex+0x46e>
 80090d2:	2101      	movs	r1, #1
 80090d4:	4620      	mov	r0, r4
 80090d6:	f7ff fd69 	bl	8008bac <rshift>
 80090da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80090de:	3501      	adds	r5, #1
 80090e0:	42ab      	cmp	r3, r5
 80090e2:	f6ff aed0 	blt.w	8008e86 <__gethex+0x20a>
 80090e6:	2701      	movs	r7, #1
 80090e8:	e7c0      	b.n	800906c <__gethex+0x3f0>
 80090ea:	f016 061f 	ands.w	r6, r6, #31
 80090ee:	d0fa      	beq.n	80090e6 <__gethex+0x46a>
 80090f0:	4453      	add	r3, sl
 80090f2:	f1c6 0620 	rsb	r6, r6, #32
 80090f6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80090fa:	f000 f9e5 	bl	80094c8 <__hi0bits>
 80090fe:	42b0      	cmp	r0, r6
 8009100:	dbe7      	blt.n	80090d2 <__gethex+0x456>
 8009102:	e7f0      	b.n	80090e6 <__gethex+0x46a>
 8009104:	0800af40 	.word	0x0800af40

08009108 <L_shift>:
 8009108:	f1c2 0208 	rsb	r2, r2, #8
 800910c:	0092      	lsls	r2, r2, #2
 800910e:	b570      	push	{r4, r5, r6, lr}
 8009110:	f1c2 0620 	rsb	r6, r2, #32
 8009114:	6843      	ldr	r3, [r0, #4]
 8009116:	6804      	ldr	r4, [r0, #0]
 8009118:	fa03 f506 	lsl.w	r5, r3, r6
 800911c:	432c      	orrs	r4, r5
 800911e:	40d3      	lsrs	r3, r2
 8009120:	6004      	str	r4, [r0, #0]
 8009122:	f840 3f04 	str.w	r3, [r0, #4]!
 8009126:	4288      	cmp	r0, r1
 8009128:	d3f4      	bcc.n	8009114 <L_shift+0xc>
 800912a:	bd70      	pop	{r4, r5, r6, pc}

0800912c <__match>:
 800912c:	b530      	push	{r4, r5, lr}
 800912e:	6803      	ldr	r3, [r0, #0]
 8009130:	3301      	adds	r3, #1
 8009132:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009136:	b914      	cbnz	r4, 800913e <__match+0x12>
 8009138:	6003      	str	r3, [r0, #0]
 800913a:	2001      	movs	r0, #1
 800913c:	bd30      	pop	{r4, r5, pc}
 800913e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009142:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009146:	2d19      	cmp	r5, #25
 8009148:	bf98      	it	ls
 800914a:	3220      	addls	r2, #32
 800914c:	42a2      	cmp	r2, r4
 800914e:	d0f0      	beq.n	8009132 <__match+0x6>
 8009150:	2000      	movs	r0, #0
 8009152:	e7f3      	b.n	800913c <__match+0x10>

08009154 <__hexnan>:
 8009154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009158:	680b      	ldr	r3, [r1, #0]
 800915a:	115e      	asrs	r6, r3, #5
 800915c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009160:	f013 031f 	ands.w	r3, r3, #31
 8009164:	b087      	sub	sp, #28
 8009166:	bf18      	it	ne
 8009168:	3604      	addne	r6, #4
 800916a:	2500      	movs	r5, #0
 800916c:	1f37      	subs	r7, r6, #4
 800916e:	4690      	mov	r8, r2
 8009170:	6802      	ldr	r2, [r0, #0]
 8009172:	9301      	str	r3, [sp, #4]
 8009174:	4682      	mov	sl, r0
 8009176:	f846 5c04 	str.w	r5, [r6, #-4]
 800917a:	46b9      	mov	r9, r7
 800917c:	463c      	mov	r4, r7
 800917e:	9502      	str	r5, [sp, #8]
 8009180:	46ab      	mov	fp, r5
 8009182:	7851      	ldrb	r1, [r2, #1]
 8009184:	1c53      	adds	r3, r2, #1
 8009186:	9303      	str	r3, [sp, #12]
 8009188:	b341      	cbz	r1, 80091dc <__hexnan+0x88>
 800918a:	4608      	mov	r0, r1
 800918c:	9205      	str	r2, [sp, #20]
 800918e:	9104      	str	r1, [sp, #16]
 8009190:	f7ff fd5e 	bl	8008c50 <__hexdig_fun>
 8009194:	2800      	cmp	r0, #0
 8009196:	d14f      	bne.n	8009238 <__hexnan+0xe4>
 8009198:	9904      	ldr	r1, [sp, #16]
 800919a:	9a05      	ldr	r2, [sp, #20]
 800919c:	2920      	cmp	r1, #32
 800919e:	d818      	bhi.n	80091d2 <__hexnan+0x7e>
 80091a0:	9b02      	ldr	r3, [sp, #8]
 80091a2:	459b      	cmp	fp, r3
 80091a4:	dd13      	ble.n	80091ce <__hexnan+0x7a>
 80091a6:	454c      	cmp	r4, r9
 80091a8:	d206      	bcs.n	80091b8 <__hexnan+0x64>
 80091aa:	2d07      	cmp	r5, #7
 80091ac:	dc04      	bgt.n	80091b8 <__hexnan+0x64>
 80091ae:	462a      	mov	r2, r5
 80091b0:	4649      	mov	r1, r9
 80091b2:	4620      	mov	r0, r4
 80091b4:	f7ff ffa8 	bl	8009108 <L_shift>
 80091b8:	4544      	cmp	r4, r8
 80091ba:	d950      	bls.n	800925e <__hexnan+0x10a>
 80091bc:	2300      	movs	r3, #0
 80091be:	f1a4 0904 	sub.w	r9, r4, #4
 80091c2:	f844 3c04 	str.w	r3, [r4, #-4]
 80091c6:	f8cd b008 	str.w	fp, [sp, #8]
 80091ca:	464c      	mov	r4, r9
 80091cc:	461d      	mov	r5, r3
 80091ce:	9a03      	ldr	r2, [sp, #12]
 80091d0:	e7d7      	b.n	8009182 <__hexnan+0x2e>
 80091d2:	2929      	cmp	r1, #41	; 0x29
 80091d4:	d156      	bne.n	8009284 <__hexnan+0x130>
 80091d6:	3202      	adds	r2, #2
 80091d8:	f8ca 2000 	str.w	r2, [sl]
 80091dc:	f1bb 0f00 	cmp.w	fp, #0
 80091e0:	d050      	beq.n	8009284 <__hexnan+0x130>
 80091e2:	454c      	cmp	r4, r9
 80091e4:	d206      	bcs.n	80091f4 <__hexnan+0xa0>
 80091e6:	2d07      	cmp	r5, #7
 80091e8:	dc04      	bgt.n	80091f4 <__hexnan+0xa0>
 80091ea:	462a      	mov	r2, r5
 80091ec:	4649      	mov	r1, r9
 80091ee:	4620      	mov	r0, r4
 80091f0:	f7ff ff8a 	bl	8009108 <L_shift>
 80091f4:	4544      	cmp	r4, r8
 80091f6:	d934      	bls.n	8009262 <__hexnan+0x10e>
 80091f8:	f1a8 0204 	sub.w	r2, r8, #4
 80091fc:	4623      	mov	r3, r4
 80091fe:	f853 1b04 	ldr.w	r1, [r3], #4
 8009202:	f842 1f04 	str.w	r1, [r2, #4]!
 8009206:	429f      	cmp	r7, r3
 8009208:	d2f9      	bcs.n	80091fe <__hexnan+0xaa>
 800920a:	1b3b      	subs	r3, r7, r4
 800920c:	f023 0303 	bic.w	r3, r3, #3
 8009210:	3304      	adds	r3, #4
 8009212:	3401      	adds	r4, #1
 8009214:	3e03      	subs	r6, #3
 8009216:	42b4      	cmp	r4, r6
 8009218:	bf88      	it	hi
 800921a:	2304      	movhi	r3, #4
 800921c:	4443      	add	r3, r8
 800921e:	2200      	movs	r2, #0
 8009220:	f843 2b04 	str.w	r2, [r3], #4
 8009224:	429f      	cmp	r7, r3
 8009226:	d2fb      	bcs.n	8009220 <__hexnan+0xcc>
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	b91b      	cbnz	r3, 8009234 <__hexnan+0xe0>
 800922c:	4547      	cmp	r7, r8
 800922e:	d127      	bne.n	8009280 <__hexnan+0x12c>
 8009230:	2301      	movs	r3, #1
 8009232:	603b      	str	r3, [r7, #0]
 8009234:	2005      	movs	r0, #5
 8009236:	e026      	b.n	8009286 <__hexnan+0x132>
 8009238:	3501      	adds	r5, #1
 800923a:	2d08      	cmp	r5, #8
 800923c:	f10b 0b01 	add.w	fp, fp, #1
 8009240:	dd06      	ble.n	8009250 <__hexnan+0xfc>
 8009242:	4544      	cmp	r4, r8
 8009244:	d9c3      	bls.n	80091ce <__hexnan+0x7a>
 8009246:	2300      	movs	r3, #0
 8009248:	f844 3c04 	str.w	r3, [r4, #-4]
 800924c:	2501      	movs	r5, #1
 800924e:	3c04      	subs	r4, #4
 8009250:	6822      	ldr	r2, [r4, #0]
 8009252:	f000 000f 	and.w	r0, r0, #15
 8009256:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800925a:	6022      	str	r2, [r4, #0]
 800925c:	e7b7      	b.n	80091ce <__hexnan+0x7a>
 800925e:	2508      	movs	r5, #8
 8009260:	e7b5      	b.n	80091ce <__hexnan+0x7a>
 8009262:	9b01      	ldr	r3, [sp, #4]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d0df      	beq.n	8009228 <__hexnan+0xd4>
 8009268:	f04f 32ff 	mov.w	r2, #4294967295
 800926c:	f1c3 0320 	rsb	r3, r3, #32
 8009270:	fa22 f303 	lsr.w	r3, r2, r3
 8009274:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009278:	401a      	ands	r2, r3
 800927a:	f846 2c04 	str.w	r2, [r6, #-4]
 800927e:	e7d3      	b.n	8009228 <__hexnan+0xd4>
 8009280:	3f04      	subs	r7, #4
 8009282:	e7d1      	b.n	8009228 <__hexnan+0xd4>
 8009284:	2004      	movs	r0, #4
 8009286:	b007      	add	sp, #28
 8009288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800928c <_localeconv_r>:
 800928c:	4800      	ldr	r0, [pc, #0]	; (8009290 <_localeconv_r+0x4>)
 800928e:	4770      	bx	lr
 8009290:	2000018c 	.word	0x2000018c

08009294 <malloc>:
 8009294:	4b02      	ldr	r3, [pc, #8]	; (80092a0 <malloc+0xc>)
 8009296:	4601      	mov	r1, r0
 8009298:	6818      	ldr	r0, [r3, #0]
 800929a:	f000 bd63 	b.w	8009d64 <_malloc_r>
 800929e:	bf00      	nop
 80092a0:	20000034 	.word	0x20000034

080092a4 <__ascii_mbtowc>:
 80092a4:	b082      	sub	sp, #8
 80092a6:	b901      	cbnz	r1, 80092aa <__ascii_mbtowc+0x6>
 80092a8:	a901      	add	r1, sp, #4
 80092aa:	b142      	cbz	r2, 80092be <__ascii_mbtowc+0x1a>
 80092ac:	b14b      	cbz	r3, 80092c2 <__ascii_mbtowc+0x1e>
 80092ae:	7813      	ldrb	r3, [r2, #0]
 80092b0:	600b      	str	r3, [r1, #0]
 80092b2:	7812      	ldrb	r2, [r2, #0]
 80092b4:	1e10      	subs	r0, r2, #0
 80092b6:	bf18      	it	ne
 80092b8:	2001      	movne	r0, #1
 80092ba:	b002      	add	sp, #8
 80092bc:	4770      	bx	lr
 80092be:	4610      	mov	r0, r2
 80092c0:	e7fb      	b.n	80092ba <__ascii_mbtowc+0x16>
 80092c2:	f06f 0001 	mvn.w	r0, #1
 80092c6:	e7f8      	b.n	80092ba <__ascii_mbtowc+0x16>

080092c8 <memcpy>:
 80092c8:	440a      	add	r2, r1
 80092ca:	4291      	cmp	r1, r2
 80092cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80092d0:	d100      	bne.n	80092d4 <memcpy+0xc>
 80092d2:	4770      	bx	lr
 80092d4:	b510      	push	{r4, lr}
 80092d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092de:	4291      	cmp	r1, r2
 80092e0:	d1f9      	bne.n	80092d6 <memcpy+0xe>
 80092e2:	bd10      	pop	{r4, pc}

080092e4 <_Balloc>:
 80092e4:	b570      	push	{r4, r5, r6, lr}
 80092e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80092e8:	4604      	mov	r4, r0
 80092ea:	460d      	mov	r5, r1
 80092ec:	b976      	cbnz	r6, 800930c <_Balloc+0x28>
 80092ee:	2010      	movs	r0, #16
 80092f0:	f7ff ffd0 	bl	8009294 <malloc>
 80092f4:	4602      	mov	r2, r0
 80092f6:	6260      	str	r0, [r4, #36]	; 0x24
 80092f8:	b920      	cbnz	r0, 8009304 <_Balloc+0x20>
 80092fa:	4b18      	ldr	r3, [pc, #96]	; (800935c <_Balloc+0x78>)
 80092fc:	4818      	ldr	r0, [pc, #96]	; (8009360 <_Balloc+0x7c>)
 80092fe:	2166      	movs	r1, #102	; 0x66
 8009300:	f000 ff3c 	bl	800a17c <__assert_func>
 8009304:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009308:	6006      	str	r6, [r0, #0]
 800930a:	60c6      	str	r6, [r0, #12]
 800930c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800930e:	68f3      	ldr	r3, [r6, #12]
 8009310:	b183      	cbz	r3, 8009334 <_Balloc+0x50>
 8009312:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800931a:	b9b8      	cbnz	r0, 800934c <_Balloc+0x68>
 800931c:	2101      	movs	r1, #1
 800931e:	fa01 f605 	lsl.w	r6, r1, r5
 8009322:	1d72      	adds	r2, r6, #5
 8009324:	0092      	lsls	r2, r2, #2
 8009326:	4620      	mov	r0, r4
 8009328:	f000 fc9a 	bl	8009c60 <_calloc_r>
 800932c:	b160      	cbz	r0, 8009348 <_Balloc+0x64>
 800932e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009332:	e00e      	b.n	8009352 <_Balloc+0x6e>
 8009334:	2221      	movs	r2, #33	; 0x21
 8009336:	2104      	movs	r1, #4
 8009338:	4620      	mov	r0, r4
 800933a:	f000 fc91 	bl	8009c60 <_calloc_r>
 800933e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009340:	60f0      	str	r0, [r6, #12]
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d1e4      	bne.n	8009312 <_Balloc+0x2e>
 8009348:	2000      	movs	r0, #0
 800934a:	bd70      	pop	{r4, r5, r6, pc}
 800934c:	6802      	ldr	r2, [r0, #0]
 800934e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009352:	2300      	movs	r3, #0
 8009354:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009358:	e7f7      	b.n	800934a <_Balloc+0x66>
 800935a:	bf00      	nop
 800935c:	0800aece 	.word	0x0800aece
 8009360:	0800afcc 	.word	0x0800afcc

08009364 <_Bfree>:
 8009364:	b570      	push	{r4, r5, r6, lr}
 8009366:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009368:	4605      	mov	r5, r0
 800936a:	460c      	mov	r4, r1
 800936c:	b976      	cbnz	r6, 800938c <_Bfree+0x28>
 800936e:	2010      	movs	r0, #16
 8009370:	f7ff ff90 	bl	8009294 <malloc>
 8009374:	4602      	mov	r2, r0
 8009376:	6268      	str	r0, [r5, #36]	; 0x24
 8009378:	b920      	cbnz	r0, 8009384 <_Bfree+0x20>
 800937a:	4b09      	ldr	r3, [pc, #36]	; (80093a0 <_Bfree+0x3c>)
 800937c:	4809      	ldr	r0, [pc, #36]	; (80093a4 <_Bfree+0x40>)
 800937e:	218a      	movs	r1, #138	; 0x8a
 8009380:	f000 fefc 	bl	800a17c <__assert_func>
 8009384:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009388:	6006      	str	r6, [r0, #0]
 800938a:	60c6      	str	r6, [r0, #12]
 800938c:	b13c      	cbz	r4, 800939e <_Bfree+0x3a>
 800938e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009390:	6862      	ldr	r2, [r4, #4]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009398:	6021      	str	r1, [r4, #0]
 800939a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800939e:	bd70      	pop	{r4, r5, r6, pc}
 80093a0:	0800aece 	.word	0x0800aece
 80093a4:	0800afcc 	.word	0x0800afcc

080093a8 <__multadd>:
 80093a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093ac:	690d      	ldr	r5, [r1, #16]
 80093ae:	4607      	mov	r7, r0
 80093b0:	460c      	mov	r4, r1
 80093b2:	461e      	mov	r6, r3
 80093b4:	f101 0c14 	add.w	ip, r1, #20
 80093b8:	2000      	movs	r0, #0
 80093ba:	f8dc 3000 	ldr.w	r3, [ip]
 80093be:	b299      	uxth	r1, r3
 80093c0:	fb02 6101 	mla	r1, r2, r1, r6
 80093c4:	0c1e      	lsrs	r6, r3, #16
 80093c6:	0c0b      	lsrs	r3, r1, #16
 80093c8:	fb02 3306 	mla	r3, r2, r6, r3
 80093cc:	b289      	uxth	r1, r1
 80093ce:	3001      	adds	r0, #1
 80093d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80093d4:	4285      	cmp	r5, r0
 80093d6:	f84c 1b04 	str.w	r1, [ip], #4
 80093da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80093de:	dcec      	bgt.n	80093ba <__multadd+0x12>
 80093e0:	b30e      	cbz	r6, 8009426 <__multadd+0x7e>
 80093e2:	68a3      	ldr	r3, [r4, #8]
 80093e4:	42ab      	cmp	r3, r5
 80093e6:	dc19      	bgt.n	800941c <__multadd+0x74>
 80093e8:	6861      	ldr	r1, [r4, #4]
 80093ea:	4638      	mov	r0, r7
 80093ec:	3101      	adds	r1, #1
 80093ee:	f7ff ff79 	bl	80092e4 <_Balloc>
 80093f2:	4680      	mov	r8, r0
 80093f4:	b928      	cbnz	r0, 8009402 <__multadd+0x5a>
 80093f6:	4602      	mov	r2, r0
 80093f8:	4b0c      	ldr	r3, [pc, #48]	; (800942c <__multadd+0x84>)
 80093fa:	480d      	ldr	r0, [pc, #52]	; (8009430 <__multadd+0x88>)
 80093fc:	21b5      	movs	r1, #181	; 0xb5
 80093fe:	f000 febd 	bl	800a17c <__assert_func>
 8009402:	6922      	ldr	r2, [r4, #16]
 8009404:	3202      	adds	r2, #2
 8009406:	f104 010c 	add.w	r1, r4, #12
 800940a:	0092      	lsls	r2, r2, #2
 800940c:	300c      	adds	r0, #12
 800940e:	f7ff ff5b 	bl	80092c8 <memcpy>
 8009412:	4621      	mov	r1, r4
 8009414:	4638      	mov	r0, r7
 8009416:	f7ff ffa5 	bl	8009364 <_Bfree>
 800941a:	4644      	mov	r4, r8
 800941c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009420:	3501      	adds	r5, #1
 8009422:	615e      	str	r6, [r3, #20]
 8009424:	6125      	str	r5, [r4, #16]
 8009426:	4620      	mov	r0, r4
 8009428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800942c:	0800af40 	.word	0x0800af40
 8009430:	0800afcc 	.word	0x0800afcc

08009434 <__s2b>:
 8009434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009438:	460c      	mov	r4, r1
 800943a:	4615      	mov	r5, r2
 800943c:	461f      	mov	r7, r3
 800943e:	2209      	movs	r2, #9
 8009440:	3308      	adds	r3, #8
 8009442:	4606      	mov	r6, r0
 8009444:	fb93 f3f2 	sdiv	r3, r3, r2
 8009448:	2100      	movs	r1, #0
 800944a:	2201      	movs	r2, #1
 800944c:	429a      	cmp	r2, r3
 800944e:	db09      	blt.n	8009464 <__s2b+0x30>
 8009450:	4630      	mov	r0, r6
 8009452:	f7ff ff47 	bl	80092e4 <_Balloc>
 8009456:	b940      	cbnz	r0, 800946a <__s2b+0x36>
 8009458:	4602      	mov	r2, r0
 800945a:	4b19      	ldr	r3, [pc, #100]	; (80094c0 <__s2b+0x8c>)
 800945c:	4819      	ldr	r0, [pc, #100]	; (80094c4 <__s2b+0x90>)
 800945e:	21ce      	movs	r1, #206	; 0xce
 8009460:	f000 fe8c 	bl	800a17c <__assert_func>
 8009464:	0052      	lsls	r2, r2, #1
 8009466:	3101      	adds	r1, #1
 8009468:	e7f0      	b.n	800944c <__s2b+0x18>
 800946a:	9b08      	ldr	r3, [sp, #32]
 800946c:	6143      	str	r3, [r0, #20]
 800946e:	2d09      	cmp	r5, #9
 8009470:	f04f 0301 	mov.w	r3, #1
 8009474:	6103      	str	r3, [r0, #16]
 8009476:	dd16      	ble.n	80094a6 <__s2b+0x72>
 8009478:	f104 0909 	add.w	r9, r4, #9
 800947c:	46c8      	mov	r8, r9
 800947e:	442c      	add	r4, r5
 8009480:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009484:	4601      	mov	r1, r0
 8009486:	3b30      	subs	r3, #48	; 0x30
 8009488:	220a      	movs	r2, #10
 800948a:	4630      	mov	r0, r6
 800948c:	f7ff ff8c 	bl	80093a8 <__multadd>
 8009490:	45a0      	cmp	r8, r4
 8009492:	d1f5      	bne.n	8009480 <__s2b+0x4c>
 8009494:	f1a5 0408 	sub.w	r4, r5, #8
 8009498:	444c      	add	r4, r9
 800949a:	1b2d      	subs	r5, r5, r4
 800949c:	1963      	adds	r3, r4, r5
 800949e:	42bb      	cmp	r3, r7
 80094a0:	db04      	blt.n	80094ac <__s2b+0x78>
 80094a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094a6:	340a      	adds	r4, #10
 80094a8:	2509      	movs	r5, #9
 80094aa:	e7f6      	b.n	800949a <__s2b+0x66>
 80094ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80094b0:	4601      	mov	r1, r0
 80094b2:	3b30      	subs	r3, #48	; 0x30
 80094b4:	220a      	movs	r2, #10
 80094b6:	4630      	mov	r0, r6
 80094b8:	f7ff ff76 	bl	80093a8 <__multadd>
 80094bc:	e7ee      	b.n	800949c <__s2b+0x68>
 80094be:	bf00      	nop
 80094c0:	0800af40 	.word	0x0800af40
 80094c4:	0800afcc 	.word	0x0800afcc

080094c8 <__hi0bits>:
 80094c8:	0c03      	lsrs	r3, r0, #16
 80094ca:	041b      	lsls	r3, r3, #16
 80094cc:	b9d3      	cbnz	r3, 8009504 <__hi0bits+0x3c>
 80094ce:	0400      	lsls	r0, r0, #16
 80094d0:	2310      	movs	r3, #16
 80094d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80094d6:	bf04      	itt	eq
 80094d8:	0200      	lsleq	r0, r0, #8
 80094da:	3308      	addeq	r3, #8
 80094dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80094e0:	bf04      	itt	eq
 80094e2:	0100      	lsleq	r0, r0, #4
 80094e4:	3304      	addeq	r3, #4
 80094e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80094ea:	bf04      	itt	eq
 80094ec:	0080      	lsleq	r0, r0, #2
 80094ee:	3302      	addeq	r3, #2
 80094f0:	2800      	cmp	r0, #0
 80094f2:	db05      	blt.n	8009500 <__hi0bits+0x38>
 80094f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80094f8:	f103 0301 	add.w	r3, r3, #1
 80094fc:	bf08      	it	eq
 80094fe:	2320      	moveq	r3, #32
 8009500:	4618      	mov	r0, r3
 8009502:	4770      	bx	lr
 8009504:	2300      	movs	r3, #0
 8009506:	e7e4      	b.n	80094d2 <__hi0bits+0xa>

08009508 <__lo0bits>:
 8009508:	6803      	ldr	r3, [r0, #0]
 800950a:	f013 0207 	ands.w	r2, r3, #7
 800950e:	4601      	mov	r1, r0
 8009510:	d00b      	beq.n	800952a <__lo0bits+0x22>
 8009512:	07da      	lsls	r2, r3, #31
 8009514:	d423      	bmi.n	800955e <__lo0bits+0x56>
 8009516:	0798      	lsls	r0, r3, #30
 8009518:	bf49      	itett	mi
 800951a:	085b      	lsrmi	r3, r3, #1
 800951c:	089b      	lsrpl	r3, r3, #2
 800951e:	2001      	movmi	r0, #1
 8009520:	600b      	strmi	r3, [r1, #0]
 8009522:	bf5c      	itt	pl
 8009524:	600b      	strpl	r3, [r1, #0]
 8009526:	2002      	movpl	r0, #2
 8009528:	4770      	bx	lr
 800952a:	b298      	uxth	r0, r3
 800952c:	b9a8      	cbnz	r0, 800955a <__lo0bits+0x52>
 800952e:	0c1b      	lsrs	r3, r3, #16
 8009530:	2010      	movs	r0, #16
 8009532:	b2da      	uxtb	r2, r3
 8009534:	b90a      	cbnz	r2, 800953a <__lo0bits+0x32>
 8009536:	3008      	adds	r0, #8
 8009538:	0a1b      	lsrs	r3, r3, #8
 800953a:	071a      	lsls	r2, r3, #28
 800953c:	bf04      	itt	eq
 800953e:	091b      	lsreq	r3, r3, #4
 8009540:	3004      	addeq	r0, #4
 8009542:	079a      	lsls	r2, r3, #30
 8009544:	bf04      	itt	eq
 8009546:	089b      	lsreq	r3, r3, #2
 8009548:	3002      	addeq	r0, #2
 800954a:	07da      	lsls	r2, r3, #31
 800954c:	d403      	bmi.n	8009556 <__lo0bits+0x4e>
 800954e:	085b      	lsrs	r3, r3, #1
 8009550:	f100 0001 	add.w	r0, r0, #1
 8009554:	d005      	beq.n	8009562 <__lo0bits+0x5a>
 8009556:	600b      	str	r3, [r1, #0]
 8009558:	4770      	bx	lr
 800955a:	4610      	mov	r0, r2
 800955c:	e7e9      	b.n	8009532 <__lo0bits+0x2a>
 800955e:	2000      	movs	r0, #0
 8009560:	4770      	bx	lr
 8009562:	2020      	movs	r0, #32
 8009564:	4770      	bx	lr
	...

08009568 <__i2b>:
 8009568:	b510      	push	{r4, lr}
 800956a:	460c      	mov	r4, r1
 800956c:	2101      	movs	r1, #1
 800956e:	f7ff feb9 	bl	80092e4 <_Balloc>
 8009572:	4602      	mov	r2, r0
 8009574:	b928      	cbnz	r0, 8009582 <__i2b+0x1a>
 8009576:	4b05      	ldr	r3, [pc, #20]	; (800958c <__i2b+0x24>)
 8009578:	4805      	ldr	r0, [pc, #20]	; (8009590 <__i2b+0x28>)
 800957a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800957e:	f000 fdfd 	bl	800a17c <__assert_func>
 8009582:	2301      	movs	r3, #1
 8009584:	6144      	str	r4, [r0, #20]
 8009586:	6103      	str	r3, [r0, #16]
 8009588:	bd10      	pop	{r4, pc}
 800958a:	bf00      	nop
 800958c:	0800af40 	.word	0x0800af40
 8009590:	0800afcc 	.word	0x0800afcc

08009594 <__multiply>:
 8009594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009598:	4691      	mov	r9, r2
 800959a:	690a      	ldr	r2, [r1, #16]
 800959c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	bfb8      	it	lt
 80095a4:	460b      	movlt	r3, r1
 80095a6:	460c      	mov	r4, r1
 80095a8:	bfbc      	itt	lt
 80095aa:	464c      	movlt	r4, r9
 80095ac:	4699      	movlt	r9, r3
 80095ae:	6927      	ldr	r7, [r4, #16]
 80095b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80095b4:	68a3      	ldr	r3, [r4, #8]
 80095b6:	6861      	ldr	r1, [r4, #4]
 80095b8:	eb07 060a 	add.w	r6, r7, sl
 80095bc:	42b3      	cmp	r3, r6
 80095be:	b085      	sub	sp, #20
 80095c0:	bfb8      	it	lt
 80095c2:	3101      	addlt	r1, #1
 80095c4:	f7ff fe8e 	bl	80092e4 <_Balloc>
 80095c8:	b930      	cbnz	r0, 80095d8 <__multiply+0x44>
 80095ca:	4602      	mov	r2, r0
 80095cc:	4b44      	ldr	r3, [pc, #272]	; (80096e0 <__multiply+0x14c>)
 80095ce:	4845      	ldr	r0, [pc, #276]	; (80096e4 <__multiply+0x150>)
 80095d0:	f240 115d 	movw	r1, #349	; 0x15d
 80095d4:	f000 fdd2 	bl	800a17c <__assert_func>
 80095d8:	f100 0514 	add.w	r5, r0, #20
 80095dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80095e0:	462b      	mov	r3, r5
 80095e2:	2200      	movs	r2, #0
 80095e4:	4543      	cmp	r3, r8
 80095e6:	d321      	bcc.n	800962c <__multiply+0x98>
 80095e8:	f104 0314 	add.w	r3, r4, #20
 80095ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80095f0:	f109 0314 	add.w	r3, r9, #20
 80095f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80095f8:	9202      	str	r2, [sp, #8]
 80095fa:	1b3a      	subs	r2, r7, r4
 80095fc:	3a15      	subs	r2, #21
 80095fe:	f022 0203 	bic.w	r2, r2, #3
 8009602:	3204      	adds	r2, #4
 8009604:	f104 0115 	add.w	r1, r4, #21
 8009608:	428f      	cmp	r7, r1
 800960a:	bf38      	it	cc
 800960c:	2204      	movcc	r2, #4
 800960e:	9201      	str	r2, [sp, #4]
 8009610:	9a02      	ldr	r2, [sp, #8]
 8009612:	9303      	str	r3, [sp, #12]
 8009614:	429a      	cmp	r2, r3
 8009616:	d80c      	bhi.n	8009632 <__multiply+0x9e>
 8009618:	2e00      	cmp	r6, #0
 800961a:	dd03      	ble.n	8009624 <__multiply+0x90>
 800961c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009620:	2b00      	cmp	r3, #0
 8009622:	d05a      	beq.n	80096da <__multiply+0x146>
 8009624:	6106      	str	r6, [r0, #16]
 8009626:	b005      	add	sp, #20
 8009628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800962c:	f843 2b04 	str.w	r2, [r3], #4
 8009630:	e7d8      	b.n	80095e4 <__multiply+0x50>
 8009632:	f8b3 a000 	ldrh.w	sl, [r3]
 8009636:	f1ba 0f00 	cmp.w	sl, #0
 800963a:	d024      	beq.n	8009686 <__multiply+0xf2>
 800963c:	f104 0e14 	add.w	lr, r4, #20
 8009640:	46a9      	mov	r9, r5
 8009642:	f04f 0c00 	mov.w	ip, #0
 8009646:	f85e 2b04 	ldr.w	r2, [lr], #4
 800964a:	f8d9 1000 	ldr.w	r1, [r9]
 800964e:	fa1f fb82 	uxth.w	fp, r2
 8009652:	b289      	uxth	r1, r1
 8009654:	fb0a 110b 	mla	r1, sl, fp, r1
 8009658:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800965c:	f8d9 2000 	ldr.w	r2, [r9]
 8009660:	4461      	add	r1, ip
 8009662:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009666:	fb0a c20b 	mla	r2, sl, fp, ip
 800966a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800966e:	b289      	uxth	r1, r1
 8009670:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009674:	4577      	cmp	r7, lr
 8009676:	f849 1b04 	str.w	r1, [r9], #4
 800967a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800967e:	d8e2      	bhi.n	8009646 <__multiply+0xb2>
 8009680:	9a01      	ldr	r2, [sp, #4]
 8009682:	f845 c002 	str.w	ip, [r5, r2]
 8009686:	9a03      	ldr	r2, [sp, #12]
 8009688:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800968c:	3304      	adds	r3, #4
 800968e:	f1b9 0f00 	cmp.w	r9, #0
 8009692:	d020      	beq.n	80096d6 <__multiply+0x142>
 8009694:	6829      	ldr	r1, [r5, #0]
 8009696:	f104 0c14 	add.w	ip, r4, #20
 800969a:	46ae      	mov	lr, r5
 800969c:	f04f 0a00 	mov.w	sl, #0
 80096a0:	f8bc b000 	ldrh.w	fp, [ip]
 80096a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80096a8:	fb09 220b 	mla	r2, r9, fp, r2
 80096ac:	4492      	add	sl, r2
 80096ae:	b289      	uxth	r1, r1
 80096b0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80096b4:	f84e 1b04 	str.w	r1, [lr], #4
 80096b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80096bc:	f8be 1000 	ldrh.w	r1, [lr]
 80096c0:	0c12      	lsrs	r2, r2, #16
 80096c2:	fb09 1102 	mla	r1, r9, r2, r1
 80096c6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80096ca:	4567      	cmp	r7, ip
 80096cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80096d0:	d8e6      	bhi.n	80096a0 <__multiply+0x10c>
 80096d2:	9a01      	ldr	r2, [sp, #4]
 80096d4:	50a9      	str	r1, [r5, r2]
 80096d6:	3504      	adds	r5, #4
 80096d8:	e79a      	b.n	8009610 <__multiply+0x7c>
 80096da:	3e01      	subs	r6, #1
 80096dc:	e79c      	b.n	8009618 <__multiply+0x84>
 80096de:	bf00      	nop
 80096e0:	0800af40 	.word	0x0800af40
 80096e4:	0800afcc 	.word	0x0800afcc

080096e8 <__pow5mult>:
 80096e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096ec:	4615      	mov	r5, r2
 80096ee:	f012 0203 	ands.w	r2, r2, #3
 80096f2:	4606      	mov	r6, r0
 80096f4:	460f      	mov	r7, r1
 80096f6:	d007      	beq.n	8009708 <__pow5mult+0x20>
 80096f8:	4c25      	ldr	r4, [pc, #148]	; (8009790 <__pow5mult+0xa8>)
 80096fa:	3a01      	subs	r2, #1
 80096fc:	2300      	movs	r3, #0
 80096fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009702:	f7ff fe51 	bl	80093a8 <__multadd>
 8009706:	4607      	mov	r7, r0
 8009708:	10ad      	asrs	r5, r5, #2
 800970a:	d03d      	beq.n	8009788 <__pow5mult+0xa0>
 800970c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800970e:	b97c      	cbnz	r4, 8009730 <__pow5mult+0x48>
 8009710:	2010      	movs	r0, #16
 8009712:	f7ff fdbf 	bl	8009294 <malloc>
 8009716:	4602      	mov	r2, r0
 8009718:	6270      	str	r0, [r6, #36]	; 0x24
 800971a:	b928      	cbnz	r0, 8009728 <__pow5mult+0x40>
 800971c:	4b1d      	ldr	r3, [pc, #116]	; (8009794 <__pow5mult+0xac>)
 800971e:	481e      	ldr	r0, [pc, #120]	; (8009798 <__pow5mult+0xb0>)
 8009720:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009724:	f000 fd2a 	bl	800a17c <__assert_func>
 8009728:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800972c:	6004      	str	r4, [r0, #0]
 800972e:	60c4      	str	r4, [r0, #12]
 8009730:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009734:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009738:	b94c      	cbnz	r4, 800974e <__pow5mult+0x66>
 800973a:	f240 2171 	movw	r1, #625	; 0x271
 800973e:	4630      	mov	r0, r6
 8009740:	f7ff ff12 	bl	8009568 <__i2b>
 8009744:	2300      	movs	r3, #0
 8009746:	f8c8 0008 	str.w	r0, [r8, #8]
 800974a:	4604      	mov	r4, r0
 800974c:	6003      	str	r3, [r0, #0]
 800974e:	f04f 0900 	mov.w	r9, #0
 8009752:	07eb      	lsls	r3, r5, #31
 8009754:	d50a      	bpl.n	800976c <__pow5mult+0x84>
 8009756:	4639      	mov	r1, r7
 8009758:	4622      	mov	r2, r4
 800975a:	4630      	mov	r0, r6
 800975c:	f7ff ff1a 	bl	8009594 <__multiply>
 8009760:	4639      	mov	r1, r7
 8009762:	4680      	mov	r8, r0
 8009764:	4630      	mov	r0, r6
 8009766:	f7ff fdfd 	bl	8009364 <_Bfree>
 800976a:	4647      	mov	r7, r8
 800976c:	106d      	asrs	r5, r5, #1
 800976e:	d00b      	beq.n	8009788 <__pow5mult+0xa0>
 8009770:	6820      	ldr	r0, [r4, #0]
 8009772:	b938      	cbnz	r0, 8009784 <__pow5mult+0x9c>
 8009774:	4622      	mov	r2, r4
 8009776:	4621      	mov	r1, r4
 8009778:	4630      	mov	r0, r6
 800977a:	f7ff ff0b 	bl	8009594 <__multiply>
 800977e:	6020      	str	r0, [r4, #0]
 8009780:	f8c0 9000 	str.w	r9, [r0]
 8009784:	4604      	mov	r4, r0
 8009786:	e7e4      	b.n	8009752 <__pow5mult+0x6a>
 8009788:	4638      	mov	r0, r7
 800978a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800978e:	bf00      	nop
 8009790:	0800b118 	.word	0x0800b118
 8009794:	0800aece 	.word	0x0800aece
 8009798:	0800afcc 	.word	0x0800afcc

0800979c <__lshift>:
 800979c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097a0:	460c      	mov	r4, r1
 80097a2:	6849      	ldr	r1, [r1, #4]
 80097a4:	6923      	ldr	r3, [r4, #16]
 80097a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80097aa:	68a3      	ldr	r3, [r4, #8]
 80097ac:	4607      	mov	r7, r0
 80097ae:	4691      	mov	r9, r2
 80097b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80097b4:	f108 0601 	add.w	r6, r8, #1
 80097b8:	42b3      	cmp	r3, r6
 80097ba:	db0b      	blt.n	80097d4 <__lshift+0x38>
 80097bc:	4638      	mov	r0, r7
 80097be:	f7ff fd91 	bl	80092e4 <_Balloc>
 80097c2:	4605      	mov	r5, r0
 80097c4:	b948      	cbnz	r0, 80097da <__lshift+0x3e>
 80097c6:	4602      	mov	r2, r0
 80097c8:	4b2a      	ldr	r3, [pc, #168]	; (8009874 <__lshift+0xd8>)
 80097ca:	482b      	ldr	r0, [pc, #172]	; (8009878 <__lshift+0xdc>)
 80097cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80097d0:	f000 fcd4 	bl	800a17c <__assert_func>
 80097d4:	3101      	adds	r1, #1
 80097d6:	005b      	lsls	r3, r3, #1
 80097d8:	e7ee      	b.n	80097b8 <__lshift+0x1c>
 80097da:	2300      	movs	r3, #0
 80097dc:	f100 0114 	add.w	r1, r0, #20
 80097e0:	f100 0210 	add.w	r2, r0, #16
 80097e4:	4618      	mov	r0, r3
 80097e6:	4553      	cmp	r3, sl
 80097e8:	db37      	blt.n	800985a <__lshift+0xbe>
 80097ea:	6920      	ldr	r0, [r4, #16]
 80097ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80097f0:	f104 0314 	add.w	r3, r4, #20
 80097f4:	f019 091f 	ands.w	r9, r9, #31
 80097f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80097fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009800:	d02f      	beq.n	8009862 <__lshift+0xc6>
 8009802:	f1c9 0e20 	rsb	lr, r9, #32
 8009806:	468a      	mov	sl, r1
 8009808:	f04f 0c00 	mov.w	ip, #0
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	fa02 f209 	lsl.w	r2, r2, r9
 8009812:	ea42 020c 	orr.w	r2, r2, ip
 8009816:	f84a 2b04 	str.w	r2, [sl], #4
 800981a:	f853 2b04 	ldr.w	r2, [r3], #4
 800981e:	4298      	cmp	r0, r3
 8009820:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009824:	d8f2      	bhi.n	800980c <__lshift+0x70>
 8009826:	1b03      	subs	r3, r0, r4
 8009828:	3b15      	subs	r3, #21
 800982a:	f023 0303 	bic.w	r3, r3, #3
 800982e:	3304      	adds	r3, #4
 8009830:	f104 0215 	add.w	r2, r4, #21
 8009834:	4290      	cmp	r0, r2
 8009836:	bf38      	it	cc
 8009838:	2304      	movcc	r3, #4
 800983a:	f841 c003 	str.w	ip, [r1, r3]
 800983e:	f1bc 0f00 	cmp.w	ip, #0
 8009842:	d001      	beq.n	8009848 <__lshift+0xac>
 8009844:	f108 0602 	add.w	r6, r8, #2
 8009848:	3e01      	subs	r6, #1
 800984a:	4638      	mov	r0, r7
 800984c:	612e      	str	r6, [r5, #16]
 800984e:	4621      	mov	r1, r4
 8009850:	f7ff fd88 	bl	8009364 <_Bfree>
 8009854:	4628      	mov	r0, r5
 8009856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800985a:	f842 0f04 	str.w	r0, [r2, #4]!
 800985e:	3301      	adds	r3, #1
 8009860:	e7c1      	b.n	80097e6 <__lshift+0x4a>
 8009862:	3904      	subs	r1, #4
 8009864:	f853 2b04 	ldr.w	r2, [r3], #4
 8009868:	f841 2f04 	str.w	r2, [r1, #4]!
 800986c:	4298      	cmp	r0, r3
 800986e:	d8f9      	bhi.n	8009864 <__lshift+0xc8>
 8009870:	e7ea      	b.n	8009848 <__lshift+0xac>
 8009872:	bf00      	nop
 8009874:	0800af40 	.word	0x0800af40
 8009878:	0800afcc 	.word	0x0800afcc

0800987c <__mcmp>:
 800987c:	b530      	push	{r4, r5, lr}
 800987e:	6902      	ldr	r2, [r0, #16]
 8009880:	690c      	ldr	r4, [r1, #16]
 8009882:	1b12      	subs	r2, r2, r4
 8009884:	d10e      	bne.n	80098a4 <__mcmp+0x28>
 8009886:	f100 0314 	add.w	r3, r0, #20
 800988a:	3114      	adds	r1, #20
 800988c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009890:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009894:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009898:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800989c:	42a5      	cmp	r5, r4
 800989e:	d003      	beq.n	80098a8 <__mcmp+0x2c>
 80098a0:	d305      	bcc.n	80098ae <__mcmp+0x32>
 80098a2:	2201      	movs	r2, #1
 80098a4:	4610      	mov	r0, r2
 80098a6:	bd30      	pop	{r4, r5, pc}
 80098a8:	4283      	cmp	r3, r0
 80098aa:	d3f3      	bcc.n	8009894 <__mcmp+0x18>
 80098ac:	e7fa      	b.n	80098a4 <__mcmp+0x28>
 80098ae:	f04f 32ff 	mov.w	r2, #4294967295
 80098b2:	e7f7      	b.n	80098a4 <__mcmp+0x28>

080098b4 <__mdiff>:
 80098b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098b8:	460c      	mov	r4, r1
 80098ba:	4606      	mov	r6, r0
 80098bc:	4611      	mov	r1, r2
 80098be:	4620      	mov	r0, r4
 80098c0:	4690      	mov	r8, r2
 80098c2:	f7ff ffdb 	bl	800987c <__mcmp>
 80098c6:	1e05      	subs	r5, r0, #0
 80098c8:	d110      	bne.n	80098ec <__mdiff+0x38>
 80098ca:	4629      	mov	r1, r5
 80098cc:	4630      	mov	r0, r6
 80098ce:	f7ff fd09 	bl	80092e4 <_Balloc>
 80098d2:	b930      	cbnz	r0, 80098e2 <__mdiff+0x2e>
 80098d4:	4b3a      	ldr	r3, [pc, #232]	; (80099c0 <__mdiff+0x10c>)
 80098d6:	4602      	mov	r2, r0
 80098d8:	f240 2132 	movw	r1, #562	; 0x232
 80098dc:	4839      	ldr	r0, [pc, #228]	; (80099c4 <__mdiff+0x110>)
 80098de:	f000 fc4d 	bl	800a17c <__assert_func>
 80098e2:	2301      	movs	r3, #1
 80098e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80098e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ec:	bfa4      	itt	ge
 80098ee:	4643      	movge	r3, r8
 80098f0:	46a0      	movge	r8, r4
 80098f2:	4630      	mov	r0, r6
 80098f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80098f8:	bfa6      	itte	ge
 80098fa:	461c      	movge	r4, r3
 80098fc:	2500      	movge	r5, #0
 80098fe:	2501      	movlt	r5, #1
 8009900:	f7ff fcf0 	bl	80092e4 <_Balloc>
 8009904:	b920      	cbnz	r0, 8009910 <__mdiff+0x5c>
 8009906:	4b2e      	ldr	r3, [pc, #184]	; (80099c0 <__mdiff+0x10c>)
 8009908:	4602      	mov	r2, r0
 800990a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800990e:	e7e5      	b.n	80098dc <__mdiff+0x28>
 8009910:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009914:	6926      	ldr	r6, [r4, #16]
 8009916:	60c5      	str	r5, [r0, #12]
 8009918:	f104 0914 	add.w	r9, r4, #20
 800991c:	f108 0514 	add.w	r5, r8, #20
 8009920:	f100 0e14 	add.w	lr, r0, #20
 8009924:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009928:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800992c:	f108 0210 	add.w	r2, r8, #16
 8009930:	46f2      	mov	sl, lr
 8009932:	2100      	movs	r1, #0
 8009934:	f859 3b04 	ldr.w	r3, [r9], #4
 8009938:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800993c:	fa1f f883 	uxth.w	r8, r3
 8009940:	fa11 f18b 	uxtah	r1, r1, fp
 8009944:	0c1b      	lsrs	r3, r3, #16
 8009946:	eba1 0808 	sub.w	r8, r1, r8
 800994a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800994e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009952:	fa1f f888 	uxth.w	r8, r8
 8009956:	1419      	asrs	r1, r3, #16
 8009958:	454e      	cmp	r6, r9
 800995a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800995e:	f84a 3b04 	str.w	r3, [sl], #4
 8009962:	d8e7      	bhi.n	8009934 <__mdiff+0x80>
 8009964:	1b33      	subs	r3, r6, r4
 8009966:	3b15      	subs	r3, #21
 8009968:	f023 0303 	bic.w	r3, r3, #3
 800996c:	3304      	adds	r3, #4
 800996e:	3415      	adds	r4, #21
 8009970:	42a6      	cmp	r6, r4
 8009972:	bf38      	it	cc
 8009974:	2304      	movcc	r3, #4
 8009976:	441d      	add	r5, r3
 8009978:	4473      	add	r3, lr
 800997a:	469e      	mov	lr, r3
 800997c:	462e      	mov	r6, r5
 800997e:	4566      	cmp	r6, ip
 8009980:	d30e      	bcc.n	80099a0 <__mdiff+0xec>
 8009982:	f10c 0203 	add.w	r2, ip, #3
 8009986:	1b52      	subs	r2, r2, r5
 8009988:	f022 0203 	bic.w	r2, r2, #3
 800998c:	3d03      	subs	r5, #3
 800998e:	45ac      	cmp	ip, r5
 8009990:	bf38      	it	cc
 8009992:	2200      	movcc	r2, #0
 8009994:	441a      	add	r2, r3
 8009996:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800999a:	b17b      	cbz	r3, 80099bc <__mdiff+0x108>
 800999c:	6107      	str	r7, [r0, #16]
 800999e:	e7a3      	b.n	80098e8 <__mdiff+0x34>
 80099a0:	f856 8b04 	ldr.w	r8, [r6], #4
 80099a4:	fa11 f288 	uxtah	r2, r1, r8
 80099a8:	1414      	asrs	r4, r2, #16
 80099aa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80099ae:	b292      	uxth	r2, r2
 80099b0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80099b4:	f84e 2b04 	str.w	r2, [lr], #4
 80099b8:	1421      	asrs	r1, r4, #16
 80099ba:	e7e0      	b.n	800997e <__mdiff+0xca>
 80099bc:	3f01      	subs	r7, #1
 80099be:	e7ea      	b.n	8009996 <__mdiff+0xe2>
 80099c0:	0800af40 	.word	0x0800af40
 80099c4:	0800afcc 	.word	0x0800afcc

080099c8 <__ulp>:
 80099c8:	b082      	sub	sp, #8
 80099ca:	ed8d 0b00 	vstr	d0, [sp]
 80099ce:	9b01      	ldr	r3, [sp, #4]
 80099d0:	4912      	ldr	r1, [pc, #72]	; (8009a1c <__ulp+0x54>)
 80099d2:	4019      	ands	r1, r3
 80099d4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80099d8:	2900      	cmp	r1, #0
 80099da:	dd05      	ble.n	80099e8 <__ulp+0x20>
 80099dc:	2200      	movs	r2, #0
 80099de:	460b      	mov	r3, r1
 80099e0:	ec43 2b10 	vmov	d0, r2, r3
 80099e4:	b002      	add	sp, #8
 80099e6:	4770      	bx	lr
 80099e8:	4249      	negs	r1, r1
 80099ea:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80099ee:	ea4f 5021 	mov.w	r0, r1, asr #20
 80099f2:	f04f 0200 	mov.w	r2, #0
 80099f6:	f04f 0300 	mov.w	r3, #0
 80099fa:	da04      	bge.n	8009a06 <__ulp+0x3e>
 80099fc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009a00:	fa41 f300 	asr.w	r3, r1, r0
 8009a04:	e7ec      	b.n	80099e0 <__ulp+0x18>
 8009a06:	f1a0 0114 	sub.w	r1, r0, #20
 8009a0a:	291e      	cmp	r1, #30
 8009a0c:	bfda      	itte	le
 8009a0e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009a12:	fa20 f101 	lsrle.w	r1, r0, r1
 8009a16:	2101      	movgt	r1, #1
 8009a18:	460a      	mov	r2, r1
 8009a1a:	e7e1      	b.n	80099e0 <__ulp+0x18>
 8009a1c:	7ff00000 	.word	0x7ff00000

08009a20 <__b2d>:
 8009a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a22:	6905      	ldr	r5, [r0, #16]
 8009a24:	f100 0714 	add.w	r7, r0, #20
 8009a28:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009a2c:	1f2e      	subs	r6, r5, #4
 8009a2e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009a32:	4620      	mov	r0, r4
 8009a34:	f7ff fd48 	bl	80094c8 <__hi0bits>
 8009a38:	f1c0 0320 	rsb	r3, r0, #32
 8009a3c:	280a      	cmp	r0, #10
 8009a3e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009abc <__b2d+0x9c>
 8009a42:	600b      	str	r3, [r1, #0]
 8009a44:	dc14      	bgt.n	8009a70 <__b2d+0x50>
 8009a46:	f1c0 0e0b 	rsb	lr, r0, #11
 8009a4a:	fa24 f10e 	lsr.w	r1, r4, lr
 8009a4e:	42b7      	cmp	r7, r6
 8009a50:	ea41 030c 	orr.w	r3, r1, ip
 8009a54:	bf34      	ite	cc
 8009a56:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009a5a:	2100      	movcs	r1, #0
 8009a5c:	3015      	adds	r0, #21
 8009a5e:	fa04 f000 	lsl.w	r0, r4, r0
 8009a62:	fa21 f10e 	lsr.w	r1, r1, lr
 8009a66:	ea40 0201 	orr.w	r2, r0, r1
 8009a6a:	ec43 2b10 	vmov	d0, r2, r3
 8009a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a70:	42b7      	cmp	r7, r6
 8009a72:	bf3a      	itte	cc
 8009a74:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009a78:	f1a5 0608 	subcc.w	r6, r5, #8
 8009a7c:	2100      	movcs	r1, #0
 8009a7e:	380b      	subs	r0, #11
 8009a80:	d017      	beq.n	8009ab2 <__b2d+0x92>
 8009a82:	f1c0 0c20 	rsb	ip, r0, #32
 8009a86:	fa04 f500 	lsl.w	r5, r4, r0
 8009a8a:	42be      	cmp	r6, r7
 8009a8c:	fa21 f40c 	lsr.w	r4, r1, ip
 8009a90:	ea45 0504 	orr.w	r5, r5, r4
 8009a94:	bf8c      	ite	hi
 8009a96:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009a9a:	2400      	movls	r4, #0
 8009a9c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009aa0:	fa01 f000 	lsl.w	r0, r1, r0
 8009aa4:	fa24 f40c 	lsr.w	r4, r4, ip
 8009aa8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009aac:	ea40 0204 	orr.w	r2, r0, r4
 8009ab0:	e7db      	b.n	8009a6a <__b2d+0x4a>
 8009ab2:	ea44 030c 	orr.w	r3, r4, ip
 8009ab6:	460a      	mov	r2, r1
 8009ab8:	e7d7      	b.n	8009a6a <__b2d+0x4a>
 8009aba:	bf00      	nop
 8009abc:	3ff00000 	.word	0x3ff00000

08009ac0 <__d2b>:
 8009ac0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009ac4:	4689      	mov	r9, r1
 8009ac6:	2101      	movs	r1, #1
 8009ac8:	ec57 6b10 	vmov	r6, r7, d0
 8009acc:	4690      	mov	r8, r2
 8009ace:	f7ff fc09 	bl	80092e4 <_Balloc>
 8009ad2:	4604      	mov	r4, r0
 8009ad4:	b930      	cbnz	r0, 8009ae4 <__d2b+0x24>
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	4b25      	ldr	r3, [pc, #148]	; (8009b70 <__d2b+0xb0>)
 8009ada:	4826      	ldr	r0, [pc, #152]	; (8009b74 <__d2b+0xb4>)
 8009adc:	f240 310a 	movw	r1, #778	; 0x30a
 8009ae0:	f000 fb4c 	bl	800a17c <__assert_func>
 8009ae4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009ae8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009aec:	bb35      	cbnz	r5, 8009b3c <__d2b+0x7c>
 8009aee:	2e00      	cmp	r6, #0
 8009af0:	9301      	str	r3, [sp, #4]
 8009af2:	d028      	beq.n	8009b46 <__d2b+0x86>
 8009af4:	4668      	mov	r0, sp
 8009af6:	9600      	str	r6, [sp, #0]
 8009af8:	f7ff fd06 	bl	8009508 <__lo0bits>
 8009afc:	9900      	ldr	r1, [sp, #0]
 8009afe:	b300      	cbz	r0, 8009b42 <__d2b+0x82>
 8009b00:	9a01      	ldr	r2, [sp, #4]
 8009b02:	f1c0 0320 	rsb	r3, r0, #32
 8009b06:	fa02 f303 	lsl.w	r3, r2, r3
 8009b0a:	430b      	orrs	r3, r1
 8009b0c:	40c2      	lsrs	r2, r0
 8009b0e:	6163      	str	r3, [r4, #20]
 8009b10:	9201      	str	r2, [sp, #4]
 8009b12:	9b01      	ldr	r3, [sp, #4]
 8009b14:	61a3      	str	r3, [r4, #24]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	bf14      	ite	ne
 8009b1a:	2202      	movne	r2, #2
 8009b1c:	2201      	moveq	r2, #1
 8009b1e:	6122      	str	r2, [r4, #16]
 8009b20:	b1d5      	cbz	r5, 8009b58 <__d2b+0x98>
 8009b22:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009b26:	4405      	add	r5, r0
 8009b28:	f8c9 5000 	str.w	r5, [r9]
 8009b2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009b30:	f8c8 0000 	str.w	r0, [r8]
 8009b34:	4620      	mov	r0, r4
 8009b36:	b003      	add	sp, #12
 8009b38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b40:	e7d5      	b.n	8009aee <__d2b+0x2e>
 8009b42:	6161      	str	r1, [r4, #20]
 8009b44:	e7e5      	b.n	8009b12 <__d2b+0x52>
 8009b46:	a801      	add	r0, sp, #4
 8009b48:	f7ff fcde 	bl	8009508 <__lo0bits>
 8009b4c:	9b01      	ldr	r3, [sp, #4]
 8009b4e:	6163      	str	r3, [r4, #20]
 8009b50:	2201      	movs	r2, #1
 8009b52:	6122      	str	r2, [r4, #16]
 8009b54:	3020      	adds	r0, #32
 8009b56:	e7e3      	b.n	8009b20 <__d2b+0x60>
 8009b58:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009b5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009b60:	f8c9 0000 	str.w	r0, [r9]
 8009b64:	6918      	ldr	r0, [r3, #16]
 8009b66:	f7ff fcaf 	bl	80094c8 <__hi0bits>
 8009b6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009b6e:	e7df      	b.n	8009b30 <__d2b+0x70>
 8009b70:	0800af40 	.word	0x0800af40
 8009b74:	0800afcc 	.word	0x0800afcc

08009b78 <__ratio>:
 8009b78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b7c:	4688      	mov	r8, r1
 8009b7e:	4669      	mov	r1, sp
 8009b80:	4681      	mov	r9, r0
 8009b82:	f7ff ff4d 	bl	8009a20 <__b2d>
 8009b86:	a901      	add	r1, sp, #4
 8009b88:	4640      	mov	r0, r8
 8009b8a:	ec55 4b10 	vmov	r4, r5, d0
 8009b8e:	ee10 aa10 	vmov	sl, s0
 8009b92:	f7ff ff45 	bl	8009a20 <__b2d>
 8009b96:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009b9a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8009b9e:	1a59      	subs	r1, r3, r1
 8009ba0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ba4:	1ad3      	subs	r3, r2, r3
 8009ba6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009baa:	ec57 6b10 	vmov	r6, r7, d0
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	bfd6      	itet	le
 8009bb2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009bb6:	462a      	movgt	r2, r5
 8009bb8:	463a      	movle	r2, r7
 8009bba:	46ab      	mov	fp, r5
 8009bbc:	bfd6      	itet	le
 8009bbe:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8009bc2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8009bc6:	ee00 3a90 	vmovle	s1, r3
 8009bca:	ec4b ab17 	vmov	d7, sl, fp
 8009bce:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8009bd2:	b003      	add	sp, #12
 8009bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009bd8 <__copybits>:
 8009bd8:	3901      	subs	r1, #1
 8009bda:	b570      	push	{r4, r5, r6, lr}
 8009bdc:	1149      	asrs	r1, r1, #5
 8009bde:	6914      	ldr	r4, [r2, #16]
 8009be0:	3101      	adds	r1, #1
 8009be2:	f102 0314 	add.w	r3, r2, #20
 8009be6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009bea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009bee:	1f05      	subs	r5, r0, #4
 8009bf0:	42a3      	cmp	r3, r4
 8009bf2:	d30c      	bcc.n	8009c0e <__copybits+0x36>
 8009bf4:	1aa3      	subs	r3, r4, r2
 8009bf6:	3b11      	subs	r3, #17
 8009bf8:	f023 0303 	bic.w	r3, r3, #3
 8009bfc:	3211      	adds	r2, #17
 8009bfe:	42a2      	cmp	r2, r4
 8009c00:	bf88      	it	hi
 8009c02:	2300      	movhi	r3, #0
 8009c04:	4418      	add	r0, r3
 8009c06:	2300      	movs	r3, #0
 8009c08:	4288      	cmp	r0, r1
 8009c0a:	d305      	bcc.n	8009c18 <__copybits+0x40>
 8009c0c:	bd70      	pop	{r4, r5, r6, pc}
 8009c0e:	f853 6b04 	ldr.w	r6, [r3], #4
 8009c12:	f845 6f04 	str.w	r6, [r5, #4]!
 8009c16:	e7eb      	b.n	8009bf0 <__copybits+0x18>
 8009c18:	f840 3b04 	str.w	r3, [r0], #4
 8009c1c:	e7f4      	b.n	8009c08 <__copybits+0x30>

08009c1e <__any_on>:
 8009c1e:	f100 0214 	add.w	r2, r0, #20
 8009c22:	6900      	ldr	r0, [r0, #16]
 8009c24:	114b      	asrs	r3, r1, #5
 8009c26:	4298      	cmp	r0, r3
 8009c28:	b510      	push	{r4, lr}
 8009c2a:	db11      	blt.n	8009c50 <__any_on+0x32>
 8009c2c:	dd0a      	ble.n	8009c44 <__any_on+0x26>
 8009c2e:	f011 011f 	ands.w	r1, r1, #31
 8009c32:	d007      	beq.n	8009c44 <__any_on+0x26>
 8009c34:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009c38:	fa24 f001 	lsr.w	r0, r4, r1
 8009c3c:	fa00 f101 	lsl.w	r1, r0, r1
 8009c40:	428c      	cmp	r4, r1
 8009c42:	d10b      	bne.n	8009c5c <__any_on+0x3e>
 8009c44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d803      	bhi.n	8009c54 <__any_on+0x36>
 8009c4c:	2000      	movs	r0, #0
 8009c4e:	bd10      	pop	{r4, pc}
 8009c50:	4603      	mov	r3, r0
 8009c52:	e7f7      	b.n	8009c44 <__any_on+0x26>
 8009c54:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c58:	2900      	cmp	r1, #0
 8009c5a:	d0f5      	beq.n	8009c48 <__any_on+0x2a>
 8009c5c:	2001      	movs	r0, #1
 8009c5e:	e7f6      	b.n	8009c4e <__any_on+0x30>

08009c60 <_calloc_r>:
 8009c60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c62:	fba1 2402 	umull	r2, r4, r1, r2
 8009c66:	b94c      	cbnz	r4, 8009c7c <_calloc_r+0x1c>
 8009c68:	4611      	mov	r1, r2
 8009c6a:	9201      	str	r2, [sp, #4]
 8009c6c:	f000 f87a 	bl	8009d64 <_malloc_r>
 8009c70:	9a01      	ldr	r2, [sp, #4]
 8009c72:	4605      	mov	r5, r0
 8009c74:	b930      	cbnz	r0, 8009c84 <_calloc_r+0x24>
 8009c76:	4628      	mov	r0, r5
 8009c78:	b003      	add	sp, #12
 8009c7a:	bd30      	pop	{r4, r5, pc}
 8009c7c:	220c      	movs	r2, #12
 8009c7e:	6002      	str	r2, [r0, #0]
 8009c80:	2500      	movs	r5, #0
 8009c82:	e7f8      	b.n	8009c76 <_calloc_r+0x16>
 8009c84:	4621      	mov	r1, r4
 8009c86:	f7fc fcc5 	bl	8006614 <memset>
 8009c8a:	e7f4      	b.n	8009c76 <_calloc_r+0x16>

08009c8c <_free_r>:
 8009c8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c8e:	2900      	cmp	r1, #0
 8009c90:	d044      	beq.n	8009d1c <_free_r+0x90>
 8009c92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c96:	9001      	str	r0, [sp, #4]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	f1a1 0404 	sub.w	r4, r1, #4
 8009c9e:	bfb8      	it	lt
 8009ca0:	18e4      	addlt	r4, r4, r3
 8009ca2:	f000 fab5 	bl	800a210 <__malloc_lock>
 8009ca6:	4a1e      	ldr	r2, [pc, #120]	; (8009d20 <_free_r+0x94>)
 8009ca8:	9801      	ldr	r0, [sp, #4]
 8009caa:	6813      	ldr	r3, [r2, #0]
 8009cac:	b933      	cbnz	r3, 8009cbc <_free_r+0x30>
 8009cae:	6063      	str	r3, [r4, #4]
 8009cb0:	6014      	str	r4, [r2, #0]
 8009cb2:	b003      	add	sp, #12
 8009cb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009cb8:	f000 bab0 	b.w	800a21c <__malloc_unlock>
 8009cbc:	42a3      	cmp	r3, r4
 8009cbe:	d908      	bls.n	8009cd2 <_free_r+0x46>
 8009cc0:	6825      	ldr	r5, [r4, #0]
 8009cc2:	1961      	adds	r1, r4, r5
 8009cc4:	428b      	cmp	r3, r1
 8009cc6:	bf01      	itttt	eq
 8009cc8:	6819      	ldreq	r1, [r3, #0]
 8009cca:	685b      	ldreq	r3, [r3, #4]
 8009ccc:	1949      	addeq	r1, r1, r5
 8009cce:	6021      	streq	r1, [r4, #0]
 8009cd0:	e7ed      	b.n	8009cae <_free_r+0x22>
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	b10b      	cbz	r3, 8009cdc <_free_r+0x50>
 8009cd8:	42a3      	cmp	r3, r4
 8009cda:	d9fa      	bls.n	8009cd2 <_free_r+0x46>
 8009cdc:	6811      	ldr	r1, [r2, #0]
 8009cde:	1855      	adds	r5, r2, r1
 8009ce0:	42a5      	cmp	r5, r4
 8009ce2:	d10b      	bne.n	8009cfc <_free_r+0x70>
 8009ce4:	6824      	ldr	r4, [r4, #0]
 8009ce6:	4421      	add	r1, r4
 8009ce8:	1854      	adds	r4, r2, r1
 8009cea:	42a3      	cmp	r3, r4
 8009cec:	6011      	str	r1, [r2, #0]
 8009cee:	d1e0      	bne.n	8009cb2 <_free_r+0x26>
 8009cf0:	681c      	ldr	r4, [r3, #0]
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	6053      	str	r3, [r2, #4]
 8009cf6:	4421      	add	r1, r4
 8009cf8:	6011      	str	r1, [r2, #0]
 8009cfa:	e7da      	b.n	8009cb2 <_free_r+0x26>
 8009cfc:	d902      	bls.n	8009d04 <_free_r+0x78>
 8009cfe:	230c      	movs	r3, #12
 8009d00:	6003      	str	r3, [r0, #0]
 8009d02:	e7d6      	b.n	8009cb2 <_free_r+0x26>
 8009d04:	6825      	ldr	r5, [r4, #0]
 8009d06:	1961      	adds	r1, r4, r5
 8009d08:	428b      	cmp	r3, r1
 8009d0a:	bf04      	itt	eq
 8009d0c:	6819      	ldreq	r1, [r3, #0]
 8009d0e:	685b      	ldreq	r3, [r3, #4]
 8009d10:	6063      	str	r3, [r4, #4]
 8009d12:	bf04      	itt	eq
 8009d14:	1949      	addeq	r1, r1, r5
 8009d16:	6021      	streq	r1, [r4, #0]
 8009d18:	6054      	str	r4, [r2, #4]
 8009d1a:	e7ca      	b.n	8009cb2 <_free_r+0x26>
 8009d1c:	b003      	add	sp, #12
 8009d1e:	bd30      	pop	{r4, r5, pc}
 8009d20:	20000504 	.word	0x20000504

08009d24 <sbrk_aligned>:
 8009d24:	b570      	push	{r4, r5, r6, lr}
 8009d26:	4e0e      	ldr	r6, [pc, #56]	; (8009d60 <sbrk_aligned+0x3c>)
 8009d28:	460c      	mov	r4, r1
 8009d2a:	6831      	ldr	r1, [r6, #0]
 8009d2c:	4605      	mov	r5, r0
 8009d2e:	b911      	cbnz	r1, 8009d36 <sbrk_aligned+0x12>
 8009d30:	f000 f9f2 	bl	800a118 <_sbrk_r>
 8009d34:	6030      	str	r0, [r6, #0]
 8009d36:	4621      	mov	r1, r4
 8009d38:	4628      	mov	r0, r5
 8009d3a:	f000 f9ed 	bl	800a118 <_sbrk_r>
 8009d3e:	1c43      	adds	r3, r0, #1
 8009d40:	d00a      	beq.n	8009d58 <sbrk_aligned+0x34>
 8009d42:	1cc4      	adds	r4, r0, #3
 8009d44:	f024 0403 	bic.w	r4, r4, #3
 8009d48:	42a0      	cmp	r0, r4
 8009d4a:	d007      	beq.n	8009d5c <sbrk_aligned+0x38>
 8009d4c:	1a21      	subs	r1, r4, r0
 8009d4e:	4628      	mov	r0, r5
 8009d50:	f000 f9e2 	bl	800a118 <_sbrk_r>
 8009d54:	3001      	adds	r0, #1
 8009d56:	d101      	bne.n	8009d5c <sbrk_aligned+0x38>
 8009d58:	f04f 34ff 	mov.w	r4, #4294967295
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	bd70      	pop	{r4, r5, r6, pc}
 8009d60:	20000508 	.word	0x20000508

08009d64 <_malloc_r>:
 8009d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d68:	1ccd      	adds	r5, r1, #3
 8009d6a:	f025 0503 	bic.w	r5, r5, #3
 8009d6e:	3508      	adds	r5, #8
 8009d70:	2d0c      	cmp	r5, #12
 8009d72:	bf38      	it	cc
 8009d74:	250c      	movcc	r5, #12
 8009d76:	2d00      	cmp	r5, #0
 8009d78:	4607      	mov	r7, r0
 8009d7a:	db01      	blt.n	8009d80 <_malloc_r+0x1c>
 8009d7c:	42a9      	cmp	r1, r5
 8009d7e:	d905      	bls.n	8009d8c <_malloc_r+0x28>
 8009d80:	230c      	movs	r3, #12
 8009d82:	603b      	str	r3, [r7, #0]
 8009d84:	2600      	movs	r6, #0
 8009d86:	4630      	mov	r0, r6
 8009d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d8c:	4e2e      	ldr	r6, [pc, #184]	; (8009e48 <_malloc_r+0xe4>)
 8009d8e:	f000 fa3f 	bl	800a210 <__malloc_lock>
 8009d92:	6833      	ldr	r3, [r6, #0]
 8009d94:	461c      	mov	r4, r3
 8009d96:	bb34      	cbnz	r4, 8009de6 <_malloc_r+0x82>
 8009d98:	4629      	mov	r1, r5
 8009d9a:	4638      	mov	r0, r7
 8009d9c:	f7ff ffc2 	bl	8009d24 <sbrk_aligned>
 8009da0:	1c43      	adds	r3, r0, #1
 8009da2:	4604      	mov	r4, r0
 8009da4:	d14d      	bne.n	8009e42 <_malloc_r+0xde>
 8009da6:	6834      	ldr	r4, [r6, #0]
 8009da8:	4626      	mov	r6, r4
 8009daa:	2e00      	cmp	r6, #0
 8009dac:	d140      	bne.n	8009e30 <_malloc_r+0xcc>
 8009dae:	6823      	ldr	r3, [r4, #0]
 8009db0:	4631      	mov	r1, r6
 8009db2:	4638      	mov	r0, r7
 8009db4:	eb04 0803 	add.w	r8, r4, r3
 8009db8:	f000 f9ae 	bl	800a118 <_sbrk_r>
 8009dbc:	4580      	cmp	r8, r0
 8009dbe:	d13a      	bne.n	8009e36 <_malloc_r+0xd2>
 8009dc0:	6821      	ldr	r1, [r4, #0]
 8009dc2:	3503      	adds	r5, #3
 8009dc4:	1a6d      	subs	r5, r5, r1
 8009dc6:	f025 0503 	bic.w	r5, r5, #3
 8009dca:	3508      	adds	r5, #8
 8009dcc:	2d0c      	cmp	r5, #12
 8009dce:	bf38      	it	cc
 8009dd0:	250c      	movcc	r5, #12
 8009dd2:	4629      	mov	r1, r5
 8009dd4:	4638      	mov	r0, r7
 8009dd6:	f7ff ffa5 	bl	8009d24 <sbrk_aligned>
 8009dda:	3001      	adds	r0, #1
 8009ddc:	d02b      	beq.n	8009e36 <_malloc_r+0xd2>
 8009dde:	6823      	ldr	r3, [r4, #0]
 8009de0:	442b      	add	r3, r5
 8009de2:	6023      	str	r3, [r4, #0]
 8009de4:	e00e      	b.n	8009e04 <_malloc_r+0xa0>
 8009de6:	6822      	ldr	r2, [r4, #0]
 8009de8:	1b52      	subs	r2, r2, r5
 8009dea:	d41e      	bmi.n	8009e2a <_malloc_r+0xc6>
 8009dec:	2a0b      	cmp	r2, #11
 8009dee:	d916      	bls.n	8009e1e <_malloc_r+0xba>
 8009df0:	1961      	adds	r1, r4, r5
 8009df2:	42a3      	cmp	r3, r4
 8009df4:	6025      	str	r5, [r4, #0]
 8009df6:	bf18      	it	ne
 8009df8:	6059      	strne	r1, [r3, #4]
 8009dfa:	6863      	ldr	r3, [r4, #4]
 8009dfc:	bf08      	it	eq
 8009dfe:	6031      	streq	r1, [r6, #0]
 8009e00:	5162      	str	r2, [r4, r5]
 8009e02:	604b      	str	r3, [r1, #4]
 8009e04:	4638      	mov	r0, r7
 8009e06:	f104 060b 	add.w	r6, r4, #11
 8009e0a:	f000 fa07 	bl	800a21c <__malloc_unlock>
 8009e0e:	f026 0607 	bic.w	r6, r6, #7
 8009e12:	1d23      	adds	r3, r4, #4
 8009e14:	1af2      	subs	r2, r6, r3
 8009e16:	d0b6      	beq.n	8009d86 <_malloc_r+0x22>
 8009e18:	1b9b      	subs	r3, r3, r6
 8009e1a:	50a3      	str	r3, [r4, r2]
 8009e1c:	e7b3      	b.n	8009d86 <_malloc_r+0x22>
 8009e1e:	6862      	ldr	r2, [r4, #4]
 8009e20:	42a3      	cmp	r3, r4
 8009e22:	bf0c      	ite	eq
 8009e24:	6032      	streq	r2, [r6, #0]
 8009e26:	605a      	strne	r2, [r3, #4]
 8009e28:	e7ec      	b.n	8009e04 <_malloc_r+0xa0>
 8009e2a:	4623      	mov	r3, r4
 8009e2c:	6864      	ldr	r4, [r4, #4]
 8009e2e:	e7b2      	b.n	8009d96 <_malloc_r+0x32>
 8009e30:	4634      	mov	r4, r6
 8009e32:	6876      	ldr	r6, [r6, #4]
 8009e34:	e7b9      	b.n	8009daa <_malloc_r+0x46>
 8009e36:	230c      	movs	r3, #12
 8009e38:	603b      	str	r3, [r7, #0]
 8009e3a:	4638      	mov	r0, r7
 8009e3c:	f000 f9ee 	bl	800a21c <__malloc_unlock>
 8009e40:	e7a1      	b.n	8009d86 <_malloc_r+0x22>
 8009e42:	6025      	str	r5, [r4, #0]
 8009e44:	e7de      	b.n	8009e04 <_malloc_r+0xa0>
 8009e46:	bf00      	nop
 8009e48:	20000504 	.word	0x20000504

08009e4c <__ssputs_r>:
 8009e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e50:	688e      	ldr	r6, [r1, #8]
 8009e52:	429e      	cmp	r6, r3
 8009e54:	4682      	mov	sl, r0
 8009e56:	460c      	mov	r4, r1
 8009e58:	4690      	mov	r8, r2
 8009e5a:	461f      	mov	r7, r3
 8009e5c:	d838      	bhi.n	8009ed0 <__ssputs_r+0x84>
 8009e5e:	898a      	ldrh	r2, [r1, #12]
 8009e60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009e64:	d032      	beq.n	8009ecc <__ssputs_r+0x80>
 8009e66:	6825      	ldr	r5, [r4, #0]
 8009e68:	6909      	ldr	r1, [r1, #16]
 8009e6a:	eba5 0901 	sub.w	r9, r5, r1
 8009e6e:	6965      	ldr	r5, [r4, #20]
 8009e70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e78:	3301      	adds	r3, #1
 8009e7a:	444b      	add	r3, r9
 8009e7c:	106d      	asrs	r5, r5, #1
 8009e7e:	429d      	cmp	r5, r3
 8009e80:	bf38      	it	cc
 8009e82:	461d      	movcc	r5, r3
 8009e84:	0553      	lsls	r3, r2, #21
 8009e86:	d531      	bpl.n	8009eec <__ssputs_r+0xa0>
 8009e88:	4629      	mov	r1, r5
 8009e8a:	f7ff ff6b 	bl	8009d64 <_malloc_r>
 8009e8e:	4606      	mov	r6, r0
 8009e90:	b950      	cbnz	r0, 8009ea8 <__ssputs_r+0x5c>
 8009e92:	230c      	movs	r3, #12
 8009e94:	f8ca 3000 	str.w	r3, [sl]
 8009e98:	89a3      	ldrh	r3, [r4, #12]
 8009e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e9e:	81a3      	strh	r3, [r4, #12]
 8009ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ea8:	6921      	ldr	r1, [r4, #16]
 8009eaa:	464a      	mov	r2, r9
 8009eac:	f7ff fa0c 	bl	80092c8 <memcpy>
 8009eb0:	89a3      	ldrh	r3, [r4, #12]
 8009eb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eba:	81a3      	strh	r3, [r4, #12]
 8009ebc:	6126      	str	r6, [r4, #16]
 8009ebe:	6165      	str	r5, [r4, #20]
 8009ec0:	444e      	add	r6, r9
 8009ec2:	eba5 0509 	sub.w	r5, r5, r9
 8009ec6:	6026      	str	r6, [r4, #0]
 8009ec8:	60a5      	str	r5, [r4, #8]
 8009eca:	463e      	mov	r6, r7
 8009ecc:	42be      	cmp	r6, r7
 8009ece:	d900      	bls.n	8009ed2 <__ssputs_r+0x86>
 8009ed0:	463e      	mov	r6, r7
 8009ed2:	6820      	ldr	r0, [r4, #0]
 8009ed4:	4632      	mov	r2, r6
 8009ed6:	4641      	mov	r1, r8
 8009ed8:	f000 f980 	bl	800a1dc <memmove>
 8009edc:	68a3      	ldr	r3, [r4, #8]
 8009ede:	1b9b      	subs	r3, r3, r6
 8009ee0:	60a3      	str	r3, [r4, #8]
 8009ee2:	6823      	ldr	r3, [r4, #0]
 8009ee4:	4433      	add	r3, r6
 8009ee6:	6023      	str	r3, [r4, #0]
 8009ee8:	2000      	movs	r0, #0
 8009eea:	e7db      	b.n	8009ea4 <__ssputs_r+0x58>
 8009eec:	462a      	mov	r2, r5
 8009eee:	f000 f99b 	bl	800a228 <_realloc_r>
 8009ef2:	4606      	mov	r6, r0
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	d1e1      	bne.n	8009ebc <__ssputs_r+0x70>
 8009ef8:	6921      	ldr	r1, [r4, #16]
 8009efa:	4650      	mov	r0, sl
 8009efc:	f7ff fec6 	bl	8009c8c <_free_r>
 8009f00:	e7c7      	b.n	8009e92 <__ssputs_r+0x46>
	...

08009f04 <_svfiprintf_r>:
 8009f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f08:	4698      	mov	r8, r3
 8009f0a:	898b      	ldrh	r3, [r1, #12]
 8009f0c:	061b      	lsls	r3, r3, #24
 8009f0e:	b09d      	sub	sp, #116	; 0x74
 8009f10:	4607      	mov	r7, r0
 8009f12:	460d      	mov	r5, r1
 8009f14:	4614      	mov	r4, r2
 8009f16:	d50e      	bpl.n	8009f36 <_svfiprintf_r+0x32>
 8009f18:	690b      	ldr	r3, [r1, #16]
 8009f1a:	b963      	cbnz	r3, 8009f36 <_svfiprintf_r+0x32>
 8009f1c:	2140      	movs	r1, #64	; 0x40
 8009f1e:	f7ff ff21 	bl	8009d64 <_malloc_r>
 8009f22:	6028      	str	r0, [r5, #0]
 8009f24:	6128      	str	r0, [r5, #16]
 8009f26:	b920      	cbnz	r0, 8009f32 <_svfiprintf_r+0x2e>
 8009f28:	230c      	movs	r3, #12
 8009f2a:	603b      	str	r3, [r7, #0]
 8009f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f30:	e0d1      	b.n	800a0d6 <_svfiprintf_r+0x1d2>
 8009f32:	2340      	movs	r3, #64	; 0x40
 8009f34:	616b      	str	r3, [r5, #20]
 8009f36:	2300      	movs	r3, #0
 8009f38:	9309      	str	r3, [sp, #36]	; 0x24
 8009f3a:	2320      	movs	r3, #32
 8009f3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f40:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f44:	2330      	movs	r3, #48	; 0x30
 8009f46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a0f0 <_svfiprintf_r+0x1ec>
 8009f4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f4e:	f04f 0901 	mov.w	r9, #1
 8009f52:	4623      	mov	r3, r4
 8009f54:	469a      	mov	sl, r3
 8009f56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f5a:	b10a      	cbz	r2, 8009f60 <_svfiprintf_r+0x5c>
 8009f5c:	2a25      	cmp	r2, #37	; 0x25
 8009f5e:	d1f9      	bne.n	8009f54 <_svfiprintf_r+0x50>
 8009f60:	ebba 0b04 	subs.w	fp, sl, r4
 8009f64:	d00b      	beq.n	8009f7e <_svfiprintf_r+0x7a>
 8009f66:	465b      	mov	r3, fp
 8009f68:	4622      	mov	r2, r4
 8009f6a:	4629      	mov	r1, r5
 8009f6c:	4638      	mov	r0, r7
 8009f6e:	f7ff ff6d 	bl	8009e4c <__ssputs_r>
 8009f72:	3001      	adds	r0, #1
 8009f74:	f000 80aa 	beq.w	800a0cc <_svfiprintf_r+0x1c8>
 8009f78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f7a:	445a      	add	r2, fp
 8009f7c:	9209      	str	r2, [sp, #36]	; 0x24
 8009f7e:	f89a 3000 	ldrb.w	r3, [sl]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	f000 80a2 	beq.w	800a0cc <_svfiprintf_r+0x1c8>
 8009f88:	2300      	movs	r3, #0
 8009f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f92:	f10a 0a01 	add.w	sl, sl, #1
 8009f96:	9304      	str	r3, [sp, #16]
 8009f98:	9307      	str	r3, [sp, #28]
 8009f9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f9e:	931a      	str	r3, [sp, #104]	; 0x68
 8009fa0:	4654      	mov	r4, sl
 8009fa2:	2205      	movs	r2, #5
 8009fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fa8:	4851      	ldr	r0, [pc, #324]	; (800a0f0 <_svfiprintf_r+0x1ec>)
 8009faa:	f7f6 f951 	bl	8000250 <memchr>
 8009fae:	9a04      	ldr	r2, [sp, #16]
 8009fb0:	b9d8      	cbnz	r0, 8009fea <_svfiprintf_r+0xe6>
 8009fb2:	06d0      	lsls	r0, r2, #27
 8009fb4:	bf44      	itt	mi
 8009fb6:	2320      	movmi	r3, #32
 8009fb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fbc:	0711      	lsls	r1, r2, #28
 8009fbe:	bf44      	itt	mi
 8009fc0:	232b      	movmi	r3, #43	; 0x2b
 8009fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fc6:	f89a 3000 	ldrb.w	r3, [sl]
 8009fca:	2b2a      	cmp	r3, #42	; 0x2a
 8009fcc:	d015      	beq.n	8009ffa <_svfiprintf_r+0xf6>
 8009fce:	9a07      	ldr	r2, [sp, #28]
 8009fd0:	4654      	mov	r4, sl
 8009fd2:	2000      	movs	r0, #0
 8009fd4:	f04f 0c0a 	mov.w	ip, #10
 8009fd8:	4621      	mov	r1, r4
 8009fda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fde:	3b30      	subs	r3, #48	; 0x30
 8009fe0:	2b09      	cmp	r3, #9
 8009fe2:	d94e      	bls.n	800a082 <_svfiprintf_r+0x17e>
 8009fe4:	b1b0      	cbz	r0, 800a014 <_svfiprintf_r+0x110>
 8009fe6:	9207      	str	r2, [sp, #28]
 8009fe8:	e014      	b.n	800a014 <_svfiprintf_r+0x110>
 8009fea:	eba0 0308 	sub.w	r3, r0, r8
 8009fee:	fa09 f303 	lsl.w	r3, r9, r3
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	9304      	str	r3, [sp, #16]
 8009ff6:	46a2      	mov	sl, r4
 8009ff8:	e7d2      	b.n	8009fa0 <_svfiprintf_r+0x9c>
 8009ffa:	9b03      	ldr	r3, [sp, #12]
 8009ffc:	1d19      	adds	r1, r3, #4
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	9103      	str	r1, [sp, #12]
 800a002:	2b00      	cmp	r3, #0
 800a004:	bfbb      	ittet	lt
 800a006:	425b      	neglt	r3, r3
 800a008:	f042 0202 	orrlt.w	r2, r2, #2
 800a00c:	9307      	strge	r3, [sp, #28]
 800a00e:	9307      	strlt	r3, [sp, #28]
 800a010:	bfb8      	it	lt
 800a012:	9204      	strlt	r2, [sp, #16]
 800a014:	7823      	ldrb	r3, [r4, #0]
 800a016:	2b2e      	cmp	r3, #46	; 0x2e
 800a018:	d10c      	bne.n	800a034 <_svfiprintf_r+0x130>
 800a01a:	7863      	ldrb	r3, [r4, #1]
 800a01c:	2b2a      	cmp	r3, #42	; 0x2a
 800a01e:	d135      	bne.n	800a08c <_svfiprintf_r+0x188>
 800a020:	9b03      	ldr	r3, [sp, #12]
 800a022:	1d1a      	adds	r2, r3, #4
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	9203      	str	r2, [sp, #12]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	bfb8      	it	lt
 800a02c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a030:	3402      	adds	r4, #2
 800a032:	9305      	str	r3, [sp, #20]
 800a034:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a100 <_svfiprintf_r+0x1fc>
 800a038:	7821      	ldrb	r1, [r4, #0]
 800a03a:	2203      	movs	r2, #3
 800a03c:	4650      	mov	r0, sl
 800a03e:	f7f6 f907 	bl	8000250 <memchr>
 800a042:	b140      	cbz	r0, 800a056 <_svfiprintf_r+0x152>
 800a044:	2340      	movs	r3, #64	; 0x40
 800a046:	eba0 000a 	sub.w	r0, r0, sl
 800a04a:	fa03 f000 	lsl.w	r0, r3, r0
 800a04e:	9b04      	ldr	r3, [sp, #16]
 800a050:	4303      	orrs	r3, r0
 800a052:	3401      	adds	r4, #1
 800a054:	9304      	str	r3, [sp, #16]
 800a056:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a05a:	4826      	ldr	r0, [pc, #152]	; (800a0f4 <_svfiprintf_r+0x1f0>)
 800a05c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a060:	2206      	movs	r2, #6
 800a062:	f7f6 f8f5 	bl	8000250 <memchr>
 800a066:	2800      	cmp	r0, #0
 800a068:	d038      	beq.n	800a0dc <_svfiprintf_r+0x1d8>
 800a06a:	4b23      	ldr	r3, [pc, #140]	; (800a0f8 <_svfiprintf_r+0x1f4>)
 800a06c:	bb1b      	cbnz	r3, 800a0b6 <_svfiprintf_r+0x1b2>
 800a06e:	9b03      	ldr	r3, [sp, #12]
 800a070:	3307      	adds	r3, #7
 800a072:	f023 0307 	bic.w	r3, r3, #7
 800a076:	3308      	adds	r3, #8
 800a078:	9303      	str	r3, [sp, #12]
 800a07a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a07c:	4433      	add	r3, r6
 800a07e:	9309      	str	r3, [sp, #36]	; 0x24
 800a080:	e767      	b.n	8009f52 <_svfiprintf_r+0x4e>
 800a082:	fb0c 3202 	mla	r2, ip, r2, r3
 800a086:	460c      	mov	r4, r1
 800a088:	2001      	movs	r0, #1
 800a08a:	e7a5      	b.n	8009fd8 <_svfiprintf_r+0xd4>
 800a08c:	2300      	movs	r3, #0
 800a08e:	3401      	adds	r4, #1
 800a090:	9305      	str	r3, [sp, #20]
 800a092:	4619      	mov	r1, r3
 800a094:	f04f 0c0a 	mov.w	ip, #10
 800a098:	4620      	mov	r0, r4
 800a09a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a09e:	3a30      	subs	r2, #48	; 0x30
 800a0a0:	2a09      	cmp	r2, #9
 800a0a2:	d903      	bls.n	800a0ac <_svfiprintf_r+0x1a8>
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d0c5      	beq.n	800a034 <_svfiprintf_r+0x130>
 800a0a8:	9105      	str	r1, [sp, #20]
 800a0aa:	e7c3      	b.n	800a034 <_svfiprintf_r+0x130>
 800a0ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0b0:	4604      	mov	r4, r0
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	e7f0      	b.n	800a098 <_svfiprintf_r+0x194>
 800a0b6:	ab03      	add	r3, sp, #12
 800a0b8:	9300      	str	r3, [sp, #0]
 800a0ba:	462a      	mov	r2, r5
 800a0bc:	4b0f      	ldr	r3, [pc, #60]	; (800a0fc <_svfiprintf_r+0x1f8>)
 800a0be:	a904      	add	r1, sp, #16
 800a0c0:	4638      	mov	r0, r7
 800a0c2:	f7fc fb41 	bl	8006748 <_printf_float>
 800a0c6:	1c42      	adds	r2, r0, #1
 800a0c8:	4606      	mov	r6, r0
 800a0ca:	d1d6      	bne.n	800a07a <_svfiprintf_r+0x176>
 800a0cc:	89ab      	ldrh	r3, [r5, #12]
 800a0ce:	065b      	lsls	r3, r3, #25
 800a0d0:	f53f af2c 	bmi.w	8009f2c <_svfiprintf_r+0x28>
 800a0d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0d6:	b01d      	add	sp, #116	; 0x74
 800a0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0dc:	ab03      	add	r3, sp, #12
 800a0de:	9300      	str	r3, [sp, #0]
 800a0e0:	462a      	mov	r2, r5
 800a0e2:	4b06      	ldr	r3, [pc, #24]	; (800a0fc <_svfiprintf_r+0x1f8>)
 800a0e4:	a904      	add	r1, sp, #16
 800a0e6:	4638      	mov	r0, r7
 800a0e8:	f7fc fdba 	bl	8006c60 <_printf_i>
 800a0ec:	e7eb      	b.n	800a0c6 <_svfiprintf_r+0x1c2>
 800a0ee:	bf00      	nop
 800a0f0:	0800b124 	.word	0x0800b124
 800a0f4:	0800b12e 	.word	0x0800b12e
 800a0f8:	08006749 	.word	0x08006749
 800a0fc:	08009e4d 	.word	0x08009e4d
 800a100:	0800b12a 	.word	0x0800b12a
 800a104:	00000000 	.word	0x00000000

0800a108 <nan>:
 800a108:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a110 <nan+0x8>
 800a10c:	4770      	bx	lr
 800a10e:	bf00      	nop
 800a110:	00000000 	.word	0x00000000
 800a114:	7ff80000 	.word	0x7ff80000

0800a118 <_sbrk_r>:
 800a118:	b538      	push	{r3, r4, r5, lr}
 800a11a:	4d06      	ldr	r5, [pc, #24]	; (800a134 <_sbrk_r+0x1c>)
 800a11c:	2300      	movs	r3, #0
 800a11e:	4604      	mov	r4, r0
 800a120:	4608      	mov	r0, r1
 800a122:	602b      	str	r3, [r5, #0]
 800a124:	f7f8 f9c2 	bl	80024ac <_sbrk>
 800a128:	1c43      	adds	r3, r0, #1
 800a12a:	d102      	bne.n	800a132 <_sbrk_r+0x1a>
 800a12c:	682b      	ldr	r3, [r5, #0]
 800a12e:	b103      	cbz	r3, 800a132 <_sbrk_r+0x1a>
 800a130:	6023      	str	r3, [r4, #0]
 800a132:	bd38      	pop	{r3, r4, r5, pc}
 800a134:	2000050c 	.word	0x2000050c

0800a138 <strncmp>:
 800a138:	b510      	push	{r4, lr}
 800a13a:	b17a      	cbz	r2, 800a15c <strncmp+0x24>
 800a13c:	4603      	mov	r3, r0
 800a13e:	3901      	subs	r1, #1
 800a140:	1884      	adds	r4, r0, r2
 800a142:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a146:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a14a:	4290      	cmp	r0, r2
 800a14c:	d101      	bne.n	800a152 <strncmp+0x1a>
 800a14e:	42a3      	cmp	r3, r4
 800a150:	d101      	bne.n	800a156 <strncmp+0x1e>
 800a152:	1a80      	subs	r0, r0, r2
 800a154:	bd10      	pop	{r4, pc}
 800a156:	2800      	cmp	r0, #0
 800a158:	d1f3      	bne.n	800a142 <strncmp+0xa>
 800a15a:	e7fa      	b.n	800a152 <strncmp+0x1a>
 800a15c:	4610      	mov	r0, r2
 800a15e:	e7f9      	b.n	800a154 <strncmp+0x1c>

0800a160 <__ascii_wctomb>:
 800a160:	b149      	cbz	r1, 800a176 <__ascii_wctomb+0x16>
 800a162:	2aff      	cmp	r2, #255	; 0xff
 800a164:	bf85      	ittet	hi
 800a166:	238a      	movhi	r3, #138	; 0x8a
 800a168:	6003      	strhi	r3, [r0, #0]
 800a16a:	700a      	strbls	r2, [r1, #0]
 800a16c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a170:	bf98      	it	ls
 800a172:	2001      	movls	r0, #1
 800a174:	4770      	bx	lr
 800a176:	4608      	mov	r0, r1
 800a178:	4770      	bx	lr
	...

0800a17c <__assert_func>:
 800a17c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a17e:	4614      	mov	r4, r2
 800a180:	461a      	mov	r2, r3
 800a182:	4b09      	ldr	r3, [pc, #36]	; (800a1a8 <__assert_func+0x2c>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4605      	mov	r5, r0
 800a188:	68d8      	ldr	r0, [r3, #12]
 800a18a:	b14c      	cbz	r4, 800a1a0 <__assert_func+0x24>
 800a18c:	4b07      	ldr	r3, [pc, #28]	; (800a1ac <__assert_func+0x30>)
 800a18e:	9100      	str	r1, [sp, #0]
 800a190:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a194:	4906      	ldr	r1, [pc, #24]	; (800a1b0 <__assert_func+0x34>)
 800a196:	462b      	mov	r3, r5
 800a198:	f000 f80e 	bl	800a1b8 <fiprintf>
 800a19c:	f000 fa8c 	bl	800a6b8 <abort>
 800a1a0:	4b04      	ldr	r3, [pc, #16]	; (800a1b4 <__assert_func+0x38>)
 800a1a2:	461c      	mov	r4, r3
 800a1a4:	e7f3      	b.n	800a18e <__assert_func+0x12>
 800a1a6:	bf00      	nop
 800a1a8:	20000034 	.word	0x20000034
 800a1ac:	0800b135 	.word	0x0800b135
 800a1b0:	0800b142 	.word	0x0800b142
 800a1b4:	0800b170 	.word	0x0800b170

0800a1b8 <fiprintf>:
 800a1b8:	b40e      	push	{r1, r2, r3}
 800a1ba:	b503      	push	{r0, r1, lr}
 800a1bc:	4601      	mov	r1, r0
 800a1be:	ab03      	add	r3, sp, #12
 800a1c0:	4805      	ldr	r0, [pc, #20]	; (800a1d8 <fiprintf+0x20>)
 800a1c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1c6:	6800      	ldr	r0, [r0, #0]
 800a1c8:	9301      	str	r3, [sp, #4]
 800a1ca:	f000 f885 	bl	800a2d8 <_vfiprintf_r>
 800a1ce:	b002      	add	sp, #8
 800a1d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1d4:	b003      	add	sp, #12
 800a1d6:	4770      	bx	lr
 800a1d8:	20000034 	.word	0x20000034

0800a1dc <memmove>:
 800a1dc:	4288      	cmp	r0, r1
 800a1de:	b510      	push	{r4, lr}
 800a1e0:	eb01 0402 	add.w	r4, r1, r2
 800a1e4:	d902      	bls.n	800a1ec <memmove+0x10>
 800a1e6:	4284      	cmp	r4, r0
 800a1e8:	4623      	mov	r3, r4
 800a1ea:	d807      	bhi.n	800a1fc <memmove+0x20>
 800a1ec:	1e43      	subs	r3, r0, #1
 800a1ee:	42a1      	cmp	r1, r4
 800a1f0:	d008      	beq.n	800a204 <memmove+0x28>
 800a1f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a1fa:	e7f8      	b.n	800a1ee <memmove+0x12>
 800a1fc:	4402      	add	r2, r0
 800a1fe:	4601      	mov	r1, r0
 800a200:	428a      	cmp	r2, r1
 800a202:	d100      	bne.n	800a206 <memmove+0x2a>
 800a204:	bd10      	pop	{r4, pc}
 800a206:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a20a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a20e:	e7f7      	b.n	800a200 <memmove+0x24>

0800a210 <__malloc_lock>:
 800a210:	4801      	ldr	r0, [pc, #4]	; (800a218 <__malloc_lock+0x8>)
 800a212:	f000 bc11 	b.w	800aa38 <__retarget_lock_acquire_recursive>
 800a216:	bf00      	nop
 800a218:	20000510 	.word	0x20000510

0800a21c <__malloc_unlock>:
 800a21c:	4801      	ldr	r0, [pc, #4]	; (800a224 <__malloc_unlock+0x8>)
 800a21e:	f000 bc0c 	b.w	800aa3a <__retarget_lock_release_recursive>
 800a222:	bf00      	nop
 800a224:	20000510 	.word	0x20000510

0800a228 <_realloc_r>:
 800a228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a22c:	4680      	mov	r8, r0
 800a22e:	4614      	mov	r4, r2
 800a230:	460e      	mov	r6, r1
 800a232:	b921      	cbnz	r1, 800a23e <_realloc_r+0x16>
 800a234:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a238:	4611      	mov	r1, r2
 800a23a:	f7ff bd93 	b.w	8009d64 <_malloc_r>
 800a23e:	b92a      	cbnz	r2, 800a24c <_realloc_r+0x24>
 800a240:	f7ff fd24 	bl	8009c8c <_free_r>
 800a244:	4625      	mov	r5, r4
 800a246:	4628      	mov	r0, r5
 800a248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a24c:	f000 fc5c 	bl	800ab08 <_malloc_usable_size_r>
 800a250:	4284      	cmp	r4, r0
 800a252:	4607      	mov	r7, r0
 800a254:	d802      	bhi.n	800a25c <_realloc_r+0x34>
 800a256:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a25a:	d812      	bhi.n	800a282 <_realloc_r+0x5a>
 800a25c:	4621      	mov	r1, r4
 800a25e:	4640      	mov	r0, r8
 800a260:	f7ff fd80 	bl	8009d64 <_malloc_r>
 800a264:	4605      	mov	r5, r0
 800a266:	2800      	cmp	r0, #0
 800a268:	d0ed      	beq.n	800a246 <_realloc_r+0x1e>
 800a26a:	42bc      	cmp	r4, r7
 800a26c:	4622      	mov	r2, r4
 800a26e:	4631      	mov	r1, r6
 800a270:	bf28      	it	cs
 800a272:	463a      	movcs	r2, r7
 800a274:	f7ff f828 	bl	80092c8 <memcpy>
 800a278:	4631      	mov	r1, r6
 800a27a:	4640      	mov	r0, r8
 800a27c:	f7ff fd06 	bl	8009c8c <_free_r>
 800a280:	e7e1      	b.n	800a246 <_realloc_r+0x1e>
 800a282:	4635      	mov	r5, r6
 800a284:	e7df      	b.n	800a246 <_realloc_r+0x1e>

0800a286 <__sfputc_r>:
 800a286:	6893      	ldr	r3, [r2, #8]
 800a288:	3b01      	subs	r3, #1
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	b410      	push	{r4}
 800a28e:	6093      	str	r3, [r2, #8]
 800a290:	da08      	bge.n	800a2a4 <__sfputc_r+0x1e>
 800a292:	6994      	ldr	r4, [r2, #24]
 800a294:	42a3      	cmp	r3, r4
 800a296:	db01      	blt.n	800a29c <__sfputc_r+0x16>
 800a298:	290a      	cmp	r1, #10
 800a29a:	d103      	bne.n	800a2a4 <__sfputc_r+0x1e>
 800a29c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2a0:	f000 b94a 	b.w	800a538 <__swbuf_r>
 800a2a4:	6813      	ldr	r3, [r2, #0]
 800a2a6:	1c58      	adds	r0, r3, #1
 800a2a8:	6010      	str	r0, [r2, #0]
 800a2aa:	7019      	strb	r1, [r3, #0]
 800a2ac:	4608      	mov	r0, r1
 800a2ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2b2:	4770      	bx	lr

0800a2b4 <__sfputs_r>:
 800a2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2b6:	4606      	mov	r6, r0
 800a2b8:	460f      	mov	r7, r1
 800a2ba:	4614      	mov	r4, r2
 800a2bc:	18d5      	adds	r5, r2, r3
 800a2be:	42ac      	cmp	r4, r5
 800a2c0:	d101      	bne.n	800a2c6 <__sfputs_r+0x12>
 800a2c2:	2000      	movs	r0, #0
 800a2c4:	e007      	b.n	800a2d6 <__sfputs_r+0x22>
 800a2c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2ca:	463a      	mov	r2, r7
 800a2cc:	4630      	mov	r0, r6
 800a2ce:	f7ff ffda 	bl	800a286 <__sfputc_r>
 800a2d2:	1c43      	adds	r3, r0, #1
 800a2d4:	d1f3      	bne.n	800a2be <__sfputs_r+0xa>
 800a2d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a2d8 <_vfiprintf_r>:
 800a2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2dc:	460d      	mov	r5, r1
 800a2de:	b09d      	sub	sp, #116	; 0x74
 800a2e0:	4614      	mov	r4, r2
 800a2e2:	4698      	mov	r8, r3
 800a2e4:	4606      	mov	r6, r0
 800a2e6:	b118      	cbz	r0, 800a2f0 <_vfiprintf_r+0x18>
 800a2e8:	6983      	ldr	r3, [r0, #24]
 800a2ea:	b90b      	cbnz	r3, 800a2f0 <_vfiprintf_r+0x18>
 800a2ec:	f000 fb06 	bl	800a8fc <__sinit>
 800a2f0:	4b89      	ldr	r3, [pc, #548]	; (800a518 <_vfiprintf_r+0x240>)
 800a2f2:	429d      	cmp	r5, r3
 800a2f4:	d11b      	bne.n	800a32e <_vfiprintf_r+0x56>
 800a2f6:	6875      	ldr	r5, [r6, #4]
 800a2f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2fa:	07d9      	lsls	r1, r3, #31
 800a2fc:	d405      	bmi.n	800a30a <_vfiprintf_r+0x32>
 800a2fe:	89ab      	ldrh	r3, [r5, #12]
 800a300:	059a      	lsls	r2, r3, #22
 800a302:	d402      	bmi.n	800a30a <_vfiprintf_r+0x32>
 800a304:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a306:	f000 fb97 	bl	800aa38 <__retarget_lock_acquire_recursive>
 800a30a:	89ab      	ldrh	r3, [r5, #12]
 800a30c:	071b      	lsls	r3, r3, #28
 800a30e:	d501      	bpl.n	800a314 <_vfiprintf_r+0x3c>
 800a310:	692b      	ldr	r3, [r5, #16]
 800a312:	b9eb      	cbnz	r3, 800a350 <_vfiprintf_r+0x78>
 800a314:	4629      	mov	r1, r5
 800a316:	4630      	mov	r0, r6
 800a318:	f000 f960 	bl	800a5dc <__swsetup_r>
 800a31c:	b1c0      	cbz	r0, 800a350 <_vfiprintf_r+0x78>
 800a31e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a320:	07dc      	lsls	r4, r3, #31
 800a322:	d50e      	bpl.n	800a342 <_vfiprintf_r+0x6a>
 800a324:	f04f 30ff 	mov.w	r0, #4294967295
 800a328:	b01d      	add	sp, #116	; 0x74
 800a32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a32e:	4b7b      	ldr	r3, [pc, #492]	; (800a51c <_vfiprintf_r+0x244>)
 800a330:	429d      	cmp	r5, r3
 800a332:	d101      	bne.n	800a338 <_vfiprintf_r+0x60>
 800a334:	68b5      	ldr	r5, [r6, #8]
 800a336:	e7df      	b.n	800a2f8 <_vfiprintf_r+0x20>
 800a338:	4b79      	ldr	r3, [pc, #484]	; (800a520 <_vfiprintf_r+0x248>)
 800a33a:	429d      	cmp	r5, r3
 800a33c:	bf08      	it	eq
 800a33e:	68f5      	ldreq	r5, [r6, #12]
 800a340:	e7da      	b.n	800a2f8 <_vfiprintf_r+0x20>
 800a342:	89ab      	ldrh	r3, [r5, #12]
 800a344:	0598      	lsls	r0, r3, #22
 800a346:	d4ed      	bmi.n	800a324 <_vfiprintf_r+0x4c>
 800a348:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a34a:	f000 fb76 	bl	800aa3a <__retarget_lock_release_recursive>
 800a34e:	e7e9      	b.n	800a324 <_vfiprintf_r+0x4c>
 800a350:	2300      	movs	r3, #0
 800a352:	9309      	str	r3, [sp, #36]	; 0x24
 800a354:	2320      	movs	r3, #32
 800a356:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a35a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a35e:	2330      	movs	r3, #48	; 0x30
 800a360:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a524 <_vfiprintf_r+0x24c>
 800a364:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a368:	f04f 0901 	mov.w	r9, #1
 800a36c:	4623      	mov	r3, r4
 800a36e:	469a      	mov	sl, r3
 800a370:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a374:	b10a      	cbz	r2, 800a37a <_vfiprintf_r+0xa2>
 800a376:	2a25      	cmp	r2, #37	; 0x25
 800a378:	d1f9      	bne.n	800a36e <_vfiprintf_r+0x96>
 800a37a:	ebba 0b04 	subs.w	fp, sl, r4
 800a37e:	d00b      	beq.n	800a398 <_vfiprintf_r+0xc0>
 800a380:	465b      	mov	r3, fp
 800a382:	4622      	mov	r2, r4
 800a384:	4629      	mov	r1, r5
 800a386:	4630      	mov	r0, r6
 800a388:	f7ff ff94 	bl	800a2b4 <__sfputs_r>
 800a38c:	3001      	adds	r0, #1
 800a38e:	f000 80aa 	beq.w	800a4e6 <_vfiprintf_r+0x20e>
 800a392:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a394:	445a      	add	r2, fp
 800a396:	9209      	str	r2, [sp, #36]	; 0x24
 800a398:	f89a 3000 	ldrb.w	r3, [sl]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	f000 80a2 	beq.w	800a4e6 <_vfiprintf_r+0x20e>
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a3a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3ac:	f10a 0a01 	add.w	sl, sl, #1
 800a3b0:	9304      	str	r3, [sp, #16]
 800a3b2:	9307      	str	r3, [sp, #28]
 800a3b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3b8:	931a      	str	r3, [sp, #104]	; 0x68
 800a3ba:	4654      	mov	r4, sl
 800a3bc:	2205      	movs	r2, #5
 800a3be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3c2:	4858      	ldr	r0, [pc, #352]	; (800a524 <_vfiprintf_r+0x24c>)
 800a3c4:	f7f5 ff44 	bl	8000250 <memchr>
 800a3c8:	9a04      	ldr	r2, [sp, #16]
 800a3ca:	b9d8      	cbnz	r0, 800a404 <_vfiprintf_r+0x12c>
 800a3cc:	06d1      	lsls	r1, r2, #27
 800a3ce:	bf44      	itt	mi
 800a3d0:	2320      	movmi	r3, #32
 800a3d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3d6:	0713      	lsls	r3, r2, #28
 800a3d8:	bf44      	itt	mi
 800a3da:	232b      	movmi	r3, #43	; 0x2b
 800a3dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3e0:	f89a 3000 	ldrb.w	r3, [sl]
 800a3e4:	2b2a      	cmp	r3, #42	; 0x2a
 800a3e6:	d015      	beq.n	800a414 <_vfiprintf_r+0x13c>
 800a3e8:	9a07      	ldr	r2, [sp, #28]
 800a3ea:	4654      	mov	r4, sl
 800a3ec:	2000      	movs	r0, #0
 800a3ee:	f04f 0c0a 	mov.w	ip, #10
 800a3f2:	4621      	mov	r1, r4
 800a3f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3f8:	3b30      	subs	r3, #48	; 0x30
 800a3fa:	2b09      	cmp	r3, #9
 800a3fc:	d94e      	bls.n	800a49c <_vfiprintf_r+0x1c4>
 800a3fe:	b1b0      	cbz	r0, 800a42e <_vfiprintf_r+0x156>
 800a400:	9207      	str	r2, [sp, #28]
 800a402:	e014      	b.n	800a42e <_vfiprintf_r+0x156>
 800a404:	eba0 0308 	sub.w	r3, r0, r8
 800a408:	fa09 f303 	lsl.w	r3, r9, r3
 800a40c:	4313      	orrs	r3, r2
 800a40e:	9304      	str	r3, [sp, #16]
 800a410:	46a2      	mov	sl, r4
 800a412:	e7d2      	b.n	800a3ba <_vfiprintf_r+0xe2>
 800a414:	9b03      	ldr	r3, [sp, #12]
 800a416:	1d19      	adds	r1, r3, #4
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	9103      	str	r1, [sp, #12]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	bfbb      	ittet	lt
 800a420:	425b      	neglt	r3, r3
 800a422:	f042 0202 	orrlt.w	r2, r2, #2
 800a426:	9307      	strge	r3, [sp, #28]
 800a428:	9307      	strlt	r3, [sp, #28]
 800a42a:	bfb8      	it	lt
 800a42c:	9204      	strlt	r2, [sp, #16]
 800a42e:	7823      	ldrb	r3, [r4, #0]
 800a430:	2b2e      	cmp	r3, #46	; 0x2e
 800a432:	d10c      	bne.n	800a44e <_vfiprintf_r+0x176>
 800a434:	7863      	ldrb	r3, [r4, #1]
 800a436:	2b2a      	cmp	r3, #42	; 0x2a
 800a438:	d135      	bne.n	800a4a6 <_vfiprintf_r+0x1ce>
 800a43a:	9b03      	ldr	r3, [sp, #12]
 800a43c:	1d1a      	adds	r2, r3, #4
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	9203      	str	r2, [sp, #12]
 800a442:	2b00      	cmp	r3, #0
 800a444:	bfb8      	it	lt
 800a446:	f04f 33ff 	movlt.w	r3, #4294967295
 800a44a:	3402      	adds	r4, #2
 800a44c:	9305      	str	r3, [sp, #20]
 800a44e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a534 <_vfiprintf_r+0x25c>
 800a452:	7821      	ldrb	r1, [r4, #0]
 800a454:	2203      	movs	r2, #3
 800a456:	4650      	mov	r0, sl
 800a458:	f7f5 fefa 	bl	8000250 <memchr>
 800a45c:	b140      	cbz	r0, 800a470 <_vfiprintf_r+0x198>
 800a45e:	2340      	movs	r3, #64	; 0x40
 800a460:	eba0 000a 	sub.w	r0, r0, sl
 800a464:	fa03 f000 	lsl.w	r0, r3, r0
 800a468:	9b04      	ldr	r3, [sp, #16]
 800a46a:	4303      	orrs	r3, r0
 800a46c:	3401      	adds	r4, #1
 800a46e:	9304      	str	r3, [sp, #16]
 800a470:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a474:	482c      	ldr	r0, [pc, #176]	; (800a528 <_vfiprintf_r+0x250>)
 800a476:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a47a:	2206      	movs	r2, #6
 800a47c:	f7f5 fee8 	bl	8000250 <memchr>
 800a480:	2800      	cmp	r0, #0
 800a482:	d03f      	beq.n	800a504 <_vfiprintf_r+0x22c>
 800a484:	4b29      	ldr	r3, [pc, #164]	; (800a52c <_vfiprintf_r+0x254>)
 800a486:	bb1b      	cbnz	r3, 800a4d0 <_vfiprintf_r+0x1f8>
 800a488:	9b03      	ldr	r3, [sp, #12]
 800a48a:	3307      	adds	r3, #7
 800a48c:	f023 0307 	bic.w	r3, r3, #7
 800a490:	3308      	adds	r3, #8
 800a492:	9303      	str	r3, [sp, #12]
 800a494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a496:	443b      	add	r3, r7
 800a498:	9309      	str	r3, [sp, #36]	; 0x24
 800a49a:	e767      	b.n	800a36c <_vfiprintf_r+0x94>
 800a49c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4a0:	460c      	mov	r4, r1
 800a4a2:	2001      	movs	r0, #1
 800a4a4:	e7a5      	b.n	800a3f2 <_vfiprintf_r+0x11a>
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	3401      	adds	r4, #1
 800a4aa:	9305      	str	r3, [sp, #20]
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	f04f 0c0a 	mov.w	ip, #10
 800a4b2:	4620      	mov	r0, r4
 800a4b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4b8:	3a30      	subs	r2, #48	; 0x30
 800a4ba:	2a09      	cmp	r2, #9
 800a4bc:	d903      	bls.n	800a4c6 <_vfiprintf_r+0x1ee>
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d0c5      	beq.n	800a44e <_vfiprintf_r+0x176>
 800a4c2:	9105      	str	r1, [sp, #20]
 800a4c4:	e7c3      	b.n	800a44e <_vfiprintf_r+0x176>
 800a4c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4ca:	4604      	mov	r4, r0
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	e7f0      	b.n	800a4b2 <_vfiprintf_r+0x1da>
 800a4d0:	ab03      	add	r3, sp, #12
 800a4d2:	9300      	str	r3, [sp, #0]
 800a4d4:	462a      	mov	r2, r5
 800a4d6:	4b16      	ldr	r3, [pc, #88]	; (800a530 <_vfiprintf_r+0x258>)
 800a4d8:	a904      	add	r1, sp, #16
 800a4da:	4630      	mov	r0, r6
 800a4dc:	f7fc f934 	bl	8006748 <_printf_float>
 800a4e0:	4607      	mov	r7, r0
 800a4e2:	1c78      	adds	r0, r7, #1
 800a4e4:	d1d6      	bne.n	800a494 <_vfiprintf_r+0x1bc>
 800a4e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4e8:	07d9      	lsls	r1, r3, #31
 800a4ea:	d405      	bmi.n	800a4f8 <_vfiprintf_r+0x220>
 800a4ec:	89ab      	ldrh	r3, [r5, #12]
 800a4ee:	059a      	lsls	r2, r3, #22
 800a4f0:	d402      	bmi.n	800a4f8 <_vfiprintf_r+0x220>
 800a4f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4f4:	f000 faa1 	bl	800aa3a <__retarget_lock_release_recursive>
 800a4f8:	89ab      	ldrh	r3, [r5, #12]
 800a4fa:	065b      	lsls	r3, r3, #25
 800a4fc:	f53f af12 	bmi.w	800a324 <_vfiprintf_r+0x4c>
 800a500:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a502:	e711      	b.n	800a328 <_vfiprintf_r+0x50>
 800a504:	ab03      	add	r3, sp, #12
 800a506:	9300      	str	r3, [sp, #0]
 800a508:	462a      	mov	r2, r5
 800a50a:	4b09      	ldr	r3, [pc, #36]	; (800a530 <_vfiprintf_r+0x258>)
 800a50c:	a904      	add	r1, sp, #16
 800a50e:	4630      	mov	r0, r6
 800a510:	f7fc fba6 	bl	8006c60 <_printf_i>
 800a514:	e7e4      	b.n	800a4e0 <_vfiprintf_r+0x208>
 800a516:	bf00      	nop
 800a518:	0800b194 	.word	0x0800b194
 800a51c:	0800b1b4 	.word	0x0800b1b4
 800a520:	0800b174 	.word	0x0800b174
 800a524:	0800b124 	.word	0x0800b124
 800a528:	0800b12e 	.word	0x0800b12e
 800a52c:	08006749 	.word	0x08006749
 800a530:	0800a2b5 	.word	0x0800a2b5
 800a534:	0800b12a 	.word	0x0800b12a

0800a538 <__swbuf_r>:
 800a538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a53a:	460e      	mov	r6, r1
 800a53c:	4614      	mov	r4, r2
 800a53e:	4605      	mov	r5, r0
 800a540:	b118      	cbz	r0, 800a54a <__swbuf_r+0x12>
 800a542:	6983      	ldr	r3, [r0, #24]
 800a544:	b90b      	cbnz	r3, 800a54a <__swbuf_r+0x12>
 800a546:	f000 f9d9 	bl	800a8fc <__sinit>
 800a54a:	4b21      	ldr	r3, [pc, #132]	; (800a5d0 <__swbuf_r+0x98>)
 800a54c:	429c      	cmp	r4, r3
 800a54e:	d12b      	bne.n	800a5a8 <__swbuf_r+0x70>
 800a550:	686c      	ldr	r4, [r5, #4]
 800a552:	69a3      	ldr	r3, [r4, #24]
 800a554:	60a3      	str	r3, [r4, #8]
 800a556:	89a3      	ldrh	r3, [r4, #12]
 800a558:	071a      	lsls	r2, r3, #28
 800a55a:	d52f      	bpl.n	800a5bc <__swbuf_r+0x84>
 800a55c:	6923      	ldr	r3, [r4, #16]
 800a55e:	b36b      	cbz	r3, 800a5bc <__swbuf_r+0x84>
 800a560:	6923      	ldr	r3, [r4, #16]
 800a562:	6820      	ldr	r0, [r4, #0]
 800a564:	1ac0      	subs	r0, r0, r3
 800a566:	6963      	ldr	r3, [r4, #20]
 800a568:	b2f6      	uxtb	r6, r6
 800a56a:	4283      	cmp	r3, r0
 800a56c:	4637      	mov	r7, r6
 800a56e:	dc04      	bgt.n	800a57a <__swbuf_r+0x42>
 800a570:	4621      	mov	r1, r4
 800a572:	4628      	mov	r0, r5
 800a574:	f000 f92e 	bl	800a7d4 <_fflush_r>
 800a578:	bb30      	cbnz	r0, 800a5c8 <__swbuf_r+0x90>
 800a57a:	68a3      	ldr	r3, [r4, #8]
 800a57c:	3b01      	subs	r3, #1
 800a57e:	60a3      	str	r3, [r4, #8]
 800a580:	6823      	ldr	r3, [r4, #0]
 800a582:	1c5a      	adds	r2, r3, #1
 800a584:	6022      	str	r2, [r4, #0]
 800a586:	701e      	strb	r6, [r3, #0]
 800a588:	6963      	ldr	r3, [r4, #20]
 800a58a:	3001      	adds	r0, #1
 800a58c:	4283      	cmp	r3, r0
 800a58e:	d004      	beq.n	800a59a <__swbuf_r+0x62>
 800a590:	89a3      	ldrh	r3, [r4, #12]
 800a592:	07db      	lsls	r3, r3, #31
 800a594:	d506      	bpl.n	800a5a4 <__swbuf_r+0x6c>
 800a596:	2e0a      	cmp	r6, #10
 800a598:	d104      	bne.n	800a5a4 <__swbuf_r+0x6c>
 800a59a:	4621      	mov	r1, r4
 800a59c:	4628      	mov	r0, r5
 800a59e:	f000 f919 	bl	800a7d4 <_fflush_r>
 800a5a2:	b988      	cbnz	r0, 800a5c8 <__swbuf_r+0x90>
 800a5a4:	4638      	mov	r0, r7
 800a5a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5a8:	4b0a      	ldr	r3, [pc, #40]	; (800a5d4 <__swbuf_r+0x9c>)
 800a5aa:	429c      	cmp	r4, r3
 800a5ac:	d101      	bne.n	800a5b2 <__swbuf_r+0x7a>
 800a5ae:	68ac      	ldr	r4, [r5, #8]
 800a5b0:	e7cf      	b.n	800a552 <__swbuf_r+0x1a>
 800a5b2:	4b09      	ldr	r3, [pc, #36]	; (800a5d8 <__swbuf_r+0xa0>)
 800a5b4:	429c      	cmp	r4, r3
 800a5b6:	bf08      	it	eq
 800a5b8:	68ec      	ldreq	r4, [r5, #12]
 800a5ba:	e7ca      	b.n	800a552 <__swbuf_r+0x1a>
 800a5bc:	4621      	mov	r1, r4
 800a5be:	4628      	mov	r0, r5
 800a5c0:	f000 f80c 	bl	800a5dc <__swsetup_r>
 800a5c4:	2800      	cmp	r0, #0
 800a5c6:	d0cb      	beq.n	800a560 <__swbuf_r+0x28>
 800a5c8:	f04f 37ff 	mov.w	r7, #4294967295
 800a5cc:	e7ea      	b.n	800a5a4 <__swbuf_r+0x6c>
 800a5ce:	bf00      	nop
 800a5d0:	0800b194 	.word	0x0800b194
 800a5d4:	0800b1b4 	.word	0x0800b1b4
 800a5d8:	0800b174 	.word	0x0800b174

0800a5dc <__swsetup_r>:
 800a5dc:	4b32      	ldr	r3, [pc, #200]	; (800a6a8 <__swsetup_r+0xcc>)
 800a5de:	b570      	push	{r4, r5, r6, lr}
 800a5e0:	681d      	ldr	r5, [r3, #0]
 800a5e2:	4606      	mov	r6, r0
 800a5e4:	460c      	mov	r4, r1
 800a5e6:	b125      	cbz	r5, 800a5f2 <__swsetup_r+0x16>
 800a5e8:	69ab      	ldr	r3, [r5, #24]
 800a5ea:	b913      	cbnz	r3, 800a5f2 <__swsetup_r+0x16>
 800a5ec:	4628      	mov	r0, r5
 800a5ee:	f000 f985 	bl	800a8fc <__sinit>
 800a5f2:	4b2e      	ldr	r3, [pc, #184]	; (800a6ac <__swsetup_r+0xd0>)
 800a5f4:	429c      	cmp	r4, r3
 800a5f6:	d10f      	bne.n	800a618 <__swsetup_r+0x3c>
 800a5f8:	686c      	ldr	r4, [r5, #4]
 800a5fa:	89a3      	ldrh	r3, [r4, #12]
 800a5fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a600:	0719      	lsls	r1, r3, #28
 800a602:	d42c      	bmi.n	800a65e <__swsetup_r+0x82>
 800a604:	06dd      	lsls	r5, r3, #27
 800a606:	d411      	bmi.n	800a62c <__swsetup_r+0x50>
 800a608:	2309      	movs	r3, #9
 800a60a:	6033      	str	r3, [r6, #0]
 800a60c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a610:	81a3      	strh	r3, [r4, #12]
 800a612:	f04f 30ff 	mov.w	r0, #4294967295
 800a616:	e03e      	b.n	800a696 <__swsetup_r+0xba>
 800a618:	4b25      	ldr	r3, [pc, #148]	; (800a6b0 <__swsetup_r+0xd4>)
 800a61a:	429c      	cmp	r4, r3
 800a61c:	d101      	bne.n	800a622 <__swsetup_r+0x46>
 800a61e:	68ac      	ldr	r4, [r5, #8]
 800a620:	e7eb      	b.n	800a5fa <__swsetup_r+0x1e>
 800a622:	4b24      	ldr	r3, [pc, #144]	; (800a6b4 <__swsetup_r+0xd8>)
 800a624:	429c      	cmp	r4, r3
 800a626:	bf08      	it	eq
 800a628:	68ec      	ldreq	r4, [r5, #12]
 800a62a:	e7e6      	b.n	800a5fa <__swsetup_r+0x1e>
 800a62c:	0758      	lsls	r0, r3, #29
 800a62e:	d512      	bpl.n	800a656 <__swsetup_r+0x7a>
 800a630:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a632:	b141      	cbz	r1, 800a646 <__swsetup_r+0x6a>
 800a634:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a638:	4299      	cmp	r1, r3
 800a63a:	d002      	beq.n	800a642 <__swsetup_r+0x66>
 800a63c:	4630      	mov	r0, r6
 800a63e:	f7ff fb25 	bl	8009c8c <_free_r>
 800a642:	2300      	movs	r3, #0
 800a644:	6363      	str	r3, [r4, #52]	; 0x34
 800a646:	89a3      	ldrh	r3, [r4, #12]
 800a648:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a64c:	81a3      	strh	r3, [r4, #12]
 800a64e:	2300      	movs	r3, #0
 800a650:	6063      	str	r3, [r4, #4]
 800a652:	6923      	ldr	r3, [r4, #16]
 800a654:	6023      	str	r3, [r4, #0]
 800a656:	89a3      	ldrh	r3, [r4, #12]
 800a658:	f043 0308 	orr.w	r3, r3, #8
 800a65c:	81a3      	strh	r3, [r4, #12]
 800a65e:	6923      	ldr	r3, [r4, #16]
 800a660:	b94b      	cbnz	r3, 800a676 <__swsetup_r+0x9a>
 800a662:	89a3      	ldrh	r3, [r4, #12]
 800a664:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a66c:	d003      	beq.n	800a676 <__swsetup_r+0x9a>
 800a66e:	4621      	mov	r1, r4
 800a670:	4630      	mov	r0, r6
 800a672:	f000 fa09 	bl	800aa88 <__smakebuf_r>
 800a676:	89a0      	ldrh	r0, [r4, #12]
 800a678:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a67c:	f010 0301 	ands.w	r3, r0, #1
 800a680:	d00a      	beq.n	800a698 <__swsetup_r+0xbc>
 800a682:	2300      	movs	r3, #0
 800a684:	60a3      	str	r3, [r4, #8]
 800a686:	6963      	ldr	r3, [r4, #20]
 800a688:	425b      	negs	r3, r3
 800a68a:	61a3      	str	r3, [r4, #24]
 800a68c:	6923      	ldr	r3, [r4, #16]
 800a68e:	b943      	cbnz	r3, 800a6a2 <__swsetup_r+0xc6>
 800a690:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a694:	d1ba      	bne.n	800a60c <__swsetup_r+0x30>
 800a696:	bd70      	pop	{r4, r5, r6, pc}
 800a698:	0781      	lsls	r1, r0, #30
 800a69a:	bf58      	it	pl
 800a69c:	6963      	ldrpl	r3, [r4, #20]
 800a69e:	60a3      	str	r3, [r4, #8]
 800a6a0:	e7f4      	b.n	800a68c <__swsetup_r+0xb0>
 800a6a2:	2000      	movs	r0, #0
 800a6a4:	e7f7      	b.n	800a696 <__swsetup_r+0xba>
 800a6a6:	bf00      	nop
 800a6a8:	20000034 	.word	0x20000034
 800a6ac:	0800b194 	.word	0x0800b194
 800a6b0:	0800b1b4 	.word	0x0800b1b4
 800a6b4:	0800b174 	.word	0x0800b174

0800a6b8 <abort>:
 800a6b8:	b508      	push	{r3, lr}
 800a6ba:	2006      	movs	r0, #6
 800a6bc:	f000 fa54 	bl	800ab68 <raise>
 800a6c0:	2001      	movs	r0, #1
 800a6c2:	f7f7 fe7b 	bl	80023bc <_exit>
	...

0800a6c8 <__sflush_r>:
 800a6c8:	898a      	ldrh	r2, [r1, #12]
 800a6ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6ce:	4605      	mov	r5, r0
 800a6d0:	0710      	lsls	r0, r2, #28
 800a6d2:	460c      	mov	r4, r1
 800a6d4:	d458      	bmi.n	800a788 <__sflush_r+0xc0>
 800a6d6:	684b      	ldr	r3, [r1, #4]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	dc05      	bgt.n	800a6e8 <__sflush_r+0x20>
 800a6dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	dc02      	bgt.n	800a6e8 <__sflush_r+0x20>
 800a6e2:	2000      	movs	r0, #0
 800a6e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a6ea:	2e00      	cmp	r6, #0
 800a6ec:	d0f9      	beq.n	800a6e2 <__sflush_r+0x1a>
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a6f4:	682f      	ldr	r7, [r5, #0]
 800a6f6:	602b      	str	r3, [r5, #0]
 800a6f8:	d032      	beq.n	800a760 <__sflush_r+0x98>
 800a6fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a6fc:	89a3      	ldrh	r3, [r4, #12]
 800a6fe:	075a      	lsls	r2, r3, #29
 800a700:	d505      	bpl.n	800a70e <__sflush_r+0x46>
 800a702:	6863      	ldr	r3, [r4, #4]
 800a704:	1ac0      	subs	r0, r0, r3
 800a706:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a708:	b10b      	cbz	r3, 800a70e <__sflush_r+0x46>
 800a70a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a70c:	1ac0      	subs	r0, r0, r3
 800a70e:	2300      	movs	r3, #0
 800a710:	4602      	mov	r2, r0
 800a712:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a714:	6a21      	ldr	r1, [r4, #32]
 800a716:	4628      	mov	r0, r5
 800a718:	47b0      	blx	r6
 800a71a:	1c43      	adds	r3, r0, #1
 800a71c:	89a3      	ldrh	r3, [r4, #12]
 800a71e:	d106      	bne.n	800a72e <__sflush_r+0x66>
 800a720:	6829      	ldr	r1, [r5, #0]
 800a722:	291d      	cmp	r1, #29
 800a724:	d82c      	bhi.n	800a780 <__sflush_r+0xb8>
 800a726:	4a2a      	ldr	r2, [pc, #168]	; (800a7d0 <__sflush_r+0x108>)
 800a728:	40ca      	lsrs	r2, r1
 800a72a:	07d6      	lsls	r6, r2, #31
 800a72c:	d528      	bpl.n	800a780 <__sflush_r+0xb8>
 800a72e:	2200      	movs	r2, #0
 800a730:	6062      	str	r2, [r4, #4]
 800a732:	04d9      	lsls	r1, r3, #19
 800a734:	6922      	ldr	r2, [r4, #16]
 800a736:	6022      	str	r2, [r4, #0]
 800a738:	d504      	bpl.n	800a744 <__sflush_r+0x7c>
 800a73a:	1c42      	adds	r2, r0, #1
 800a73c:	d101      	bne.n	800a742 <__sflush_r+0x7a>
 800a73e:	682b      	ldr	r3, [r5, #0]
 800a740:	b903      	cbnz	r3, 800a744 <__sflush_r+0x7c>
 800a742:	6560      	str	r0, [r4, #84]	; 0x54
 800a744:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a746:	602f      	str	r7, [r5, #0]
 800a748:	2900      	cmp	r1, #0
 800a74a:	d0ca      	beq.n	800a6e2 <__sflush_r+0x1a>
 800a74c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a750:	4299      	cmp	r1, r3
 800a752:	d002      	beq.n	800a75a <__sflush_r+0x92>
 800a754:	4628      	mov	r0, r5
 800a756:	f7ff fa99 	bl	8009c8c <_free_r>
 800a75a:	2000      	movs	r0, #0
 800a75c:	6360      	str	r0, [r4, #52]	; 0x34
 800a75e:	e7c1      	b.n	800a6e4 <__sflush_r+0x1c>
 800a760:	6a21      	ldr	r1, [r4, #32]
 800a762:	2301      	movs	r3, #1
 800a764:	4628      	mov	r0, r5
 800a766:	47b0      	blx	r6
 800a768:	1c41      	adds	r1, r0, #1
 800a76a:	d1c7      	bne.n	800a6fc <__sflush_r+0x34>
 800a76c:	682b      	ldr	r3, [r5, #0]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d0c4      	beq.n	800a6fc <__sflush_r+0x34>
 800a772:	2b1d      	cmp	r3, #29
 800a774:	d001      	beq.n	800a77a <__sflush_r+0xb2>
 800a776:	2b16      	cmp	r3, #22
 800a778:	d101      	bne.n	800a77e <__sflush_r+0xb6>
 800a77a:	602f      	str	r7, [r5, #0]
 800a77c:	e7b1      	b.n	800a6e2 <__sflush_r+0x1a>
 800a77e:	89a3      	ldrh	r3, [r4, #12]
 800a780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a784:	81a3      	strh	r3, [r4, #12]
 800a786:	e7ad      	b.n	800a6e4 <__sflush_r+0x1c>
 800a788:	690f      	ldr	r7, [r1, #16]
 800a78a:	2f00      	cmp	r7, #0
 800a78c:	d0a9      	beq.n	800a6e2 <__sflush_r+0x1a>
 800a78e:	0793      	lsls	r3, r2, #30
 800a790:	680e      	ldr	r6, [r1, #0]
 800a792:	bf08      	it	eq
 800a794:	694b      	ldreq	r3, [r1, #20]
 800a796:	600f      	str	r7, [r1, #0]
 800a798:	bf18      	it	ne
 800a79a:	2300      	movne	r3, #0
 800a79c:	eba6 0807 	sub.w	r8, r6, r7
 800a7a0:	608b      	str	r3, [r1, #8]
 800a7a2:	f1b8 0f00 	cmp.w	r8, #0
 800a7a6:	dd9c      	ble.n	800a6e2 <__sflush_r+0x1a>
 800a7a8:	6a21      	ldr	r1, [r4, #32]
 800a7aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a7ac:	4643      	mov	r3, r8
 800a7ae:	463a      	mov	r2, r7
 800a7b0:	4628      	mov	r0, r5
 800a7b2:	47b0      	blx	r6
 800a7b4:	2800      	cmp	r0, #0
 800a7b6:	dc06      	bgt.n	800a7c6 <__sflush_r+0xfe>
 800a7b8:	89a3      	ldrh	r3, [r4, #12]
 800a7ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7be:	81a3      	strh	r3, [r4, #12]
 800a7c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a7c4:	e78e      	b.n	800a6e4 <__sflush_r+0x1c>
 800a7c6:	4407      	add	r7, r0
 800a7c8:	eba8 0800 	sub.w	r8, r8, r0
 800a7cc:	e7e9      	b.n	800a7a2 <__sflush_r+0xda>
 800a7ce:	bf00      	nop
 800a7d0:	20400001 	.word	0x20400001

0800a7d4 <_fflush_r>:
 800a7d4:	b538      	push	{r3, r4, r5, lr}
 800a7d6:	690b      	ldr	r3, [r1, #16]
 800a7d8:	4605      	mov	r5, r0
 800a7da:	460c      	mov	r4, r1
 800a7dc:	b913      	cbnz	r3, 800a7e4 <_fflush_r+0x10>
 800a7de:	2500      	movs	r5, #0
 800a7e0:	4628      	mov	r0, r5
 800a7e2:	bd38      	pop	{r3, r4, r5, pc}
 800a7e4:	b118      	cbz	r0, 800a7ee <_fflush_r+0x1a>
 800a7e6:	6983      	ldr	r3, [r0, #24]
 800a7e8:	b90b      	cbnz	r3, 800a7ee <_fflush_r+0x1a>
 800a7ea:	f000 f887 	bl	800a8fc <__sinit>
 800a7ee:	4b14      	ldr	r3, [pc, #80]	; (800a840 <_fflush_r+0x6c>)
 800a7f0:	429c      	cmp	r4, r3
 800a7f2:	d11b      	bne.n	800a82c <_fflush_r+0x58>
 800a7f4:	686c      	ldr	r4, [r5, #4]
 800a7f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d0ef      	beq.n	800a7de <_fflush_r+0xa>
 800a7fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a800:	07d0      	lsls	r0, r2, #31
 800a802:	d404      	bmi.n	800a80e <_fflush_r+0x3a>
 800a804:	0599      	lsls	r1, r3, #22
 800a806:	d402      	bmi.n	800a80e <_fflush_r+0x3a>
 800a808:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a80a:	f000 f915 	bl	800aa38 <__retarget_lock_acquire_recursive>
 800a80e:	4628      	mov	r0, r5
 800a810:	4621      	mov	r1, r4
 800a812:	f7ff ff59 	bl	800a6c8 <__sflush_r>
 800a816:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a818:	07da      	lsls	r2, r3, #31
 800a81a:	4605      	mov	r5, r0
 800a81c:	d4e0      	bmi.n	800a7e0 <_fflush_r+0xc>
 800a81e:	89a3      	ldrh	r3, [r4, #12]
 800a820:	059b      	lsls	r3, r3, #22
 800a822:	d4dd      	bmi.n	800a7e0 <_fflush_r+0xc>
 800a824:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a826:	f000 f908 	bl	800aa3a <__retarget_lock_release_recursive>
 800a82a:	e7d9      	b.n	800a7e0 <_fflush_r+0xc>
 800a82c:	4b05      	ldr	r3, [pc, #20]	; (800a844 <_fflush_r+0x70>)
 800a82e:	429c      	cmp	r4, r3
 800a830:	d101      	bne.n	800a836 <_fflush_r+0x62>
 800a832:	68ac      	ldr	r4, [r5, #8]
 800a834:	e7df      	b.n	800a7f6 <_fflush_r+0x22>
 800a836:	4b04      	ldr	r3, [pc, #16]	; (800a848 <_fflush_r+0x74>)
 800a838:	429c      	cmp	r4, r3
 800a83a:	bf08      	it	eq
 800a83c:	68ec      	ldreq	r4, [r5, #12]
 800a83e:	e7da      	b.n	800a7f6 <_fflush_r+0x22>
 800a840:	0800b194 	.word	0x0800b194
 800a844:	0800b1b4 	.word	0x0800b1b4
 800a848:	0800b174 	.word	0x0800b174

0800a84c <std>:
 800a84c:	2300      	movs	r3, #0
 800a84e:	b510      	push	{r4, lr}
 800a850:	4604      	mov	r4, r0
 800a852:	e9c0 3300 	strd	r3, r3, [r0]
 800a856:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a85a:	6083      	str	r3, [r0, #8]
 800a85c:	8181      	strh	r1, [r0, #12]
 800a85e:	6643      	str	r3, [r0, #100]	; 0x64
 800a860:	81c2      	strh	r2, [r0, #14]
 800a862:	6183      	str	r3, [r0, #24]
 800a864:	4619      	mov	r1, r3
 800a866:	2208      	movs	r2, #8
 800a868:	305c      	adds	r0, #92	; 0x5c
 800a86a:	f7fb fed3 	bl	8006614 <memset>
 800a86e:	4b05      	ldr	r3, [pc, #20]	; (800a884 <std+0x38>)
 800a870:	6263      	str	r3, [r4, #36]	; 0x24
 800a872:	4b05      	ldr	r3, [pc, #20]	; (800a888 <std+0x3c>)
 800a874:	62a3      	str	r3, [r4, #40]	; 0x28
 800a876:	4b05      	ldr	r3, [pc, #20]	; (800a88c <std+0x40>)
 800a878:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a87a:	4b05      	ldr	r3, [pc, #20]	; (800a890 <std+0x44>)
 800a87c:	6224      	str	r4, [r4, #32]
 800a87e:	6323      	str	r3, [r4, #48]	; 0x30
 800a880:	bd10      	pop	{r4, pc}
 800a882:	bf00      	nop
 800a884:	0800aba1 	.word	0x0800aba1
 800a888:	0800abc3 	.word	0x0800abc3
 800a88c:	0800abfb 	.word	0x0800abfb
 800a890:	0800ac1f 	.word	0x0800ac1f

0800a894 <_cleanup_r>:
 800a894:	4901      	ldr	r1, [pc, #4]	; (800a89c <_cleanup_r+0x8>)
 800a896:	f000 b8af 	b.w	800a9f8 <_fwalk_reent>
 800a89a:	bf00      	nop
 800a89c:	0800a7d5 	.word	0x0800a7d5

0800a8a0 <__sfmoreglue>:
 800a8a0:	b570      	push	{r4, r5, r6, lr}
 800a8a2:	2268      	movs	r2, #104	; 0x68
 800a8a4:	1e4d      	subs	r5, r1, #1
 800a8a6:	4355      	muls	r5, r2
 800a8a8:	460e      	mov	r6, r1
 800a8aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a8ae:	f7ff fa59 	bl	8009d64 <_malloc_r>
 800a8b2:	4604      	mov	r4, r0
 800a8b4:	b140      	cbz	r0, 800a8c8 <__sfmoreglue+0x28>
 800a8b6:	2100      	movs	r1, #0
 800a8b8:	e9c0 1600 	strd	r1, r6, [r0]
 800a8bc:	300c      	adds	r0, #12
 800a8be:	60a0      	str	r0, [r4, #8]
 800a8c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a8c4:	f7fb fea6 	bl	8006614 <memset>
 800a8c8:	4620      	mov	r0, r4
 800a8ca:	bd70      	pop	{r4, r5, r6, pc}

0800a8cc <__sfp_lock_acquire>:
 800a8cc:	4801      	ldr	r0, [pc, #4]	; (800a8d4 <__sfp_lock_acquire+0x8>)
 800a8ce:	f000 b8b3 	b.w	800aa38 <__retarget_lock_acquire_recursive>
 800a8d2:	bf00      	nop
 800a8d4:	20000511 	.word	0x20000511

0800a8d8 <__sfp_lock_release>:
 800a8d8:	4801      	ldr	r0, [pc, #4]	; (800a8e0 <__sfp_lock_release+0x8>)
 800a8da:	f000 b8ae 	b.w	800aa3a <__retarget_lock_release_recursive>
 800a8de:	bf00      	nop
 800a8e0:	20000511 	.word	0x20000511

0800a8e4 <__sinit_lock_acquire>:
 800a8e4:	4801      	ldr	r0, [pc, #4]	; (800a8ec <__sinit_lock_acquire+0x8>)
 800a8e6:	f000 b8a7 	b.w	800aa38 <__retarget_lock_acquire_recursive>
 800a8ea:	bf00      	nop
 800a8ec:	20000512 	.word	0x20000512

0800a8f0 <__sinit_lock_release>:
 800a8f0:	4801      	ldr	r0, [pc, #4]	; (800a8f8 <__sinit_lock_release+0x8>)
 800a8f2:	f000 b8a2 	b.w	800aa3a <__retarget_lock_release_recursive>
 800a8f6:	bf00      	nop
 800a8f8:	20000512 	.word	0x20000512

0800a8fc <__sinit>:
 800a8fc:	b510      	push	{r4, lr}
 800a8fe:	4604      	mov	r4, r0
 800a900:	f7ff fff0 	bl	800a8e4 <__sinit_lock_acquire>
 800a904:	69a3      	ldr	r3, [r4, #24]
 800a906:	b11b      	cbz	r3, 800a910 <__sinit+0x14>
 800a908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a90c:	f7ff bff0 	b.w	800a8f0 <__sinit_lock_release>
 800a910:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a914:	6523      	str	r3, [r4, #80]	; 0x50
 800a916:	4b13      	ldr	r3, [pc, #76]	; (800a964 <__sinit+0x68>)
 800a918:	4a13      	ldr	r2, [pc, #76]	; (800a968 <__sinit+0x6c>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a91e:	42a3      	cmp	r3, r4
 800a920:	bf04      	itt	eq
 800a922:	2301      	moveq	r3, #1
 800a924:	61a3      	streq	r3, [r4, #24]
 800a926:	4620      	mov	r0, r4
 800a928:	f000 f820 	bl	800a96c <__sfp>
 800a92c:	6060      	str	r0, [r4, #4]
 800a92e:	4620      	mov	r0, r4
 800a930:	f000 f81c 	bl	800a96c <__sfp>
 800a934:	60a0      	str	r0, [r4, #8]
 800a936:	4620      	mov	r0, r4
 800a938:	f000 f818 	bl	800a96c <__sfp>
 800a93c:	2200      	movs	r2, #0
 800a93e:	60e0      	str	r0, [r4, #12]
 800a940:	2104      	movs	r1, #4
 800a942:	6860      	ldr	r0, [r4, #4]
 800a944:	f7ff ff82 	bl	800a84c <std>
 800a948:	68a0      	ldr	r0, [r4, #8]
 800a94a:	2201      	movs	r2, #1
 800a94c:	2109      	movs	r1, #9
 800a94e:	f7ff ff7d 	bl	800a84c <std>
 800a952:	68e0      	ldr	r0, [r4, #12]
 800a954:	2202      	movs	r2, #2
 800a956:	2112      	movs	r1, #18
 800a958:	f7ff ff78 	bl	800a84c <std>
 800a95c:	2301      	movs	r3, #1
 800a95e:	61a3      	str	r3, [r4, #24]
 800a960:	e7d2      	b.n	800a908 <__sinit+0xc>
 800a962:	bf00      	nop
 800a964:	0800ad30 	.word	0x0800ad30
 800a968:	0800a895 	.word	0x0800a895

0800a96c <__sfp>:
 800a96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a96e:	4607      	mov	r7, r0
 800a970:	f7ff ffac 	bl	800a8cc <__sfp_lock_acquire>
 800a974:	4b1e      	ldr	r3, [pc, #120]	; (800a9f0 <__sfp+0x84>)
 800a976:	681e      	ldr	r6, [r3, #0]
 800a978:	69b3      	ldr	r3, [r6, #24]
 800a97a:	b913      	cbnz	r3, 800a982 <__sfp+0x16>
 800a97c:	4630      	mov	r0, r6
 800a97e:	f7ff ffbd 	bl	800a8fc <__sinit>
 800a982:	3648      	adds	r6, #72	; 0x48
 800a984:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a988:	3b01      	subs	r3, #1
 800a98a:	d503      	bpl.n	800a994 <__sfp+0x28>
 800a98c:	6833      	ldr	r3, [r6, #0]
 800a98e:	b30b      	cbz	r3, 800a9d4 <__sfp+0x68>
 800a990:	6836      	ldr	r6, [r6, #0]
 800a992:	e7f7      	b.n	800a984 <__sfp+0x18>
 800a994:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a998:	b9d5      	cbnz	r5, 800a9d0 <__sfp+0x64>
 800a99a:	4b16      	ldr	r3, [pc, #88]	; (800a9f4 <__sfp+0x88>)
 800a99c:	60e3      	str	r3, [r4, #12]
 800a99e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a9a2:	6665      	str	r5, [r4, #100]	; 0x64
 800a9a4:	f000 f847 	bl	800aa36 <__retarget_lock_init_recursive>
 800a9a8:	f7ff ff96 	bl	800a8d8 <__sfp_lock_release>
 800a9ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a9b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a9b4:	6025      	str	r5, [r4, #0]
 800a9b6:	61a5      	str	r5, [r4, #24]
 800a9b8:	2208      	movs	r2, #8
 800a9ba:	4629      	mov	r1, r5
 800a9bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a9c0:	f7fb fe28 	bl	8006614 <memset>
 800a9c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a9c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a9cc:	4620      	mov	r0, r4
 800a9ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9d0:	3468      	adds	r4, #104	; 0x68
 800a9d2:	e7d9      	b.n	800a988 <__sfp+0x1c>
 800a9d4:	2104      	movs	r1, #4
 800a9d6:	4638      	mov	r0, r7
 800a9d8:	f7ff ff62 	bl	800a8a0 <__sfmoreglue>
 800a9dc:	4604      	mov	r4, r0
 800a9de:	6030      	str	r0, [r6, #0]
 800a9e0:	2800      	cmp	r0, #0
 800a9e2:	d1d5      	bne.n	800a990 <__sfp+0x24>
 800a9e4:	f7ff ff78 	bl	800a8d8 <__sfp_lock_release>
 800a9e8:	230c      	movs	r3, #12
 800a9ea:	603b      	str	r3, [r7, #0]
 800a9ec:	e7ee      	b.n	800a9cc <__sfp+0x60>
 800a9ee:	bf00      	nop
 800a9f0:	0800ad30 	.word	0x0800ad30
 800a9f4:	ffff0001 	.word	0xffff0001

0800a9f8 <_fwalk_reent>:
 800a9f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9fc:	4606      	mov	r6, r0
 800a9fe:	4688      	mov	r8, r1
 800aa00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aa04:	2700      	movs	r7, #0
 800aa06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa0a:	f1b9 0901 	subs.w	r9, r9, #1
 800aa0e:	d505      	bpl.n	800aa1c <_fwalk_reent+0x24>
 800aa10:	6824      	ldr	r4, [r4, #0]
 800aa12:	2c00      	cmp	r4, #0
 800aa14:	d1f7      	bne.n	800aa06 <_fwalk_reent+0xe>
 800aa16:	4638      	mov	r0, r7
 800aa18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa1c:	89ab      	ldrh	r3, [r5, #12]
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	d907      	bls.n	800aa32 <_fwalk_reent+0x3a>
 800aa22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa26:	3301      	adds	r3, #1
 800aa28:	d003      	beq.n	800aa32 <_fwalk_reent+0x3a>
 800aa2a:	4629      	mov	r1, r5
 800aa2c:	4630      	mov	r0, r6
 800aa2e:	47c0      	blx	r8
 800aa30:	4307      	orrs	r7, r0
 800aa32:	3568      	adds	r5, #104	; 0x68
 800aa34:	e7e9      	b.n	800aa0a <_fwalk_reent+0x12>

0800aa36 <__retarget_lock_init_recursive>:
 800aa36:	4770      	bx	lr

0800aa38 <__retarget_lock_acquire_recursive>:
 800aa38:	4770      	bx	lr

0800aa3a <__retarget_lock_release_recursive>:
 800aa3a:	4770      	bx	lr

0800aa3c <__swhatbuf_r>:
 800aa3c:	b570      	push	{r4, r5, r6, lr}
 800aa3e:	460e      	mov	r6, r1
 800aa40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa44:	2900      	cmp	r1, #0
 800aa46:	b096      	sub	sp, #88	; 0x58
 800aa48:	4614      	mov	r4, r2
 800aa4a:	461d      	mov	r5, r3
 800aa4c:	da08      	bge.n	800aa60 <__swhatbuf_r+0x24>
 800aa4e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aa52:	2200      	movs	r2, #0
 800aa54:	602a      	str	r2, [r5, #0]
 800aa56:	061a      	lsls	r2, r3, #24
 800aa58:	d410      	bmi.n	800aa7c <__swhatbuf_r+0x40>
 800aa5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa5e:	e00e      	b.n	800aa7e <__swhatbuf_r+0x42>
 800aa60:	466a      	mov	r2, sp
 800aa62:	f000 f903 	bl	800ac6c <_fstat_r>
 800aa66:	2800      	cmp	r0, #0
 800aa68:	dbf1      	blt.n	800aa4e <__swhatbuf_r+0x12>
 800aa6a:	9a01      	ldr	r2, [sp, #4]
 800aa6c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aa70:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aa74:	425a      	negs	r2, r3
 800aa76:	415a      	adcs	r2, r3
 800aa78:	602a      	str	r2, [r5, #0]
 800aa7a:	e7ee      	b.n	800aa5a <__swhatbuf_r+0x1e>
 800aa7c:	2340      	movs	r3, #64	; 0x40
 800aa7e:	2000      	movs	r0, #0
 800aa80:	6023      	str	r3, [r4, #0]
 800aa82:	b016      	add	sp, #88	; 0x58
 800aa84:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aa88 <__smakebuf_r>:
 800aa88:	898b      	ldrh	r3, [r1, #12]
 800aa8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa8c:	079d      	lsls	r5, r3, #30
 800aa8e:	4606      	mov	r6, r0
 800aa90:	460c      	mov	r4, r1
 800aa92:	d507      	bpl.n	800aaa4 <__smakebuf_r+0x1c>
 800aa94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aa98:	6023      	str	r3, [r4, #0]
 800aa9a:	6123      	str	r3, [r4, #16]
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	6163      	str	r3, [r4, #20]
 800aaa0:	b002      	add	sp, #8
 800aaa2:	bd70      	pop	{r4, r5, r6, pc}
 800aaa4:	ab01      	add	r3, sp, #4
 800aaa6:	466a      	mov	r2, sp
 800aaa8:	f7ff ffc8 	bl	800aa3c <__swhatbuf_r>
 800aaac:	9900      	ldr	r1, [sp, #0]
 800aaae:	4605      	mov	r5, r0
 800aab0:	4630      	mov	r0, r6
 800aab2:	f7ff f957 	bl	8009d64 <_malloc_r>
 800aab6:	b948      	cbnz	r0, 800aacc <__smakebuf_r+0x44>
 800aab8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aabc:	059a      	lsls	r2, r3, #22
 800aabe:	d4ef      	bmi.n	800aaa0 <__smakebuf_r+0x18>
 800aac0:	f023 0303 	bic.w	r3, r3, #3
 800aac4:	f043 0302 	orr.w	r3, r3, #2
 800aac8:	81a3      	strh	r3, [r4, #12]
 800aaca:	e7e3      	b.n	800aa94 <__smakebuf_r+0xc>
 800aacc:	4b0d      	ldr	r3, [pc, #52]	; (800ab04 <__smakebuf_r+0x7c>)
 800aace:	62b3      	str	r3, [r6, #40]	; 0x28
 800aad0:	89a3      	ldrh	r3, [r4, #12]
 800aad2:	6020      	str	r0, [r4, #0]
 800aad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aad8:	81a3      	strh	r3, [r4, #12]
 800aada:	9b00      	ldr	r3, [sp, #0]
 800aadc:	6163      	str	r3, [r4, #20]
 800aade:	9b01      	ldr	r3, [sp, #4]
 800aae0:	6120      	str	r0, [r4, #16]
 800aae2:	b15b      	cbz	r3, 800aafc <__smakebuf_r+0x74>
 800aae4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aae8:	4630      	mov	r0, r6
 800aaea:	f000 f8d1 	bl	800ac90 <_isatty_r>
 800aaee:	b128      	cbz	r0, 800aafc <__smakebuf_r+0x74>
 800aaf0:	89a3      	ldrh	r3, [r4, #12]
 800aaf2:	f023 0303 	bic.w	r3, r3, #3
 800aaf6:	f043 0301 	orr.w	r3, r3, #1
 800aafa:	81a3      	strh	r3, [r4, #12]
 800aafc:	89a0      	ldrh	r0, [r4, #12]
 800aafe:	4305      	orrs	r5, r0
 800ab00:	81a5      	strh	r5, [r4, #12]
 800ab02:	e7cd      	b.n	800aaa0 <__smakebuf_r+0x18>
 800ab04:	0800a895 	.word	0x0800a895

0800ab08 <_malloc_usable_size_r>:
 800ab08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab0c:	1f18      	subs	r0, r3, #4
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	bfbc      	itt	lt
 800ab12:	580b      	ldrlt	r3, [r1, r0]
 800ab14:	18c0      	addlt	r0, r0, r3
 800ab16:	4770      	bx	lr

0800ab18 <_raise_r>:
 800ab18:	291f      	cmp	r1, #31
 800ab1a:	b538      	push	{r3, r4, r5, lr}
 800ab1c:	4604      	mov	r4, r0
 800ab1e:	460d      	mov	r5, r1
 800ab20:	d904      	bls.n	800ab2c <_raise_r+0x14>
 800ab22:	2316      	movs	r3, #22
 800ab24:	6003      	str	r3, [r0, #0]
 800ab26:	f04f 30ff 	mov.w	r0, #4294967295
 800ab2a:	bd38      	pop	{r3, r4, r5, pc}
 800ab2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ab2e:	b112      	cbz	r2, 800ab36 <_raise_r+0x1e>
 800ab30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab34:	b94b      	cbnz	r3, 800ab4a <_raise_r+0x32>
 800ab36:	4620      	mov	r0, r4
 800ab38:	f000 f830 	bl	800ab9c <_getpid_r>
 800ab3c:	462a      	mov	r2, r5
 800ab3e:	4601      	mov	r1, r0
 800ab40:	4620      	mov	r0, r4
 800ab42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab46:	f000 b817 	b.w	800ab78 <_kill_r>
 800ab4a:	2b01      	cmp	r3, #1
 800ab4c:	d00a      	beq.n	800ab64 <_raise_r+0x4c>
 800ab4e:	1c59      	adds	r1, r3, #1
 800ab50:	d103      	bne.n	800ab5a <_raise_r+0x42>
 800ab52:	2316      	movs	r3, #22
 800ab54:	6003      	str	r3, [r0, #0]
 800ab56:	2001      	movs	r0, #1
 800ab58:	e7e7      	b.n	800ab2a <_raise_r+0x12>
 800ab5a:	2400      	movs	r4, #0
 800ab5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ab60:	4628      	mov	r0, r5
 800ab62:	4798      	blx	r3
 800ab64:	2000      	movs	r0, #0
 800ab66:	e7e0      	b.n	800ab2a <_raise_r+0x12>

0800ab68 <raise>:
 800ab68:	4b02      	ldr	r3, [pc, #8]	; (800ab74 <raise+0xc>)
 800ab6a:	4601      	mov	r1, r0
 800ab6c:	6818      	ldr	r0, [r3, #0]
 800ab6e:	f7ff bfd3 	b.w	800ab18 <_raise_r>
 800ab72:	bf00      	nop
 800ab74:	20000034 	.word	0x20000034

0800ab78 <_kill_r>:
 800ab78:	b538      	push	{r3, r4, r5, lr}
 800ab7a:	4d07      	ldr	r5, [pc, #28]	; (800ab98 <_kill_r+0x20>)
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	4604      	mov	r4, r0
 800ab80:	4608      	mov	r0, r1
 800ab82:	4611      	mov	r1, r2
 800ab84:	602b      	str	r3, [r5, #0]
 800ab86:	f7f7 fc09 	bl	800239c <_kill>
 800ab8a:	1c43      	adds	r3, r0, #1
 800ab8c:	d102      	bne.n	800ab94 <_kill_r+0x1c>
 800ab8e:	682b      	ldr	r3, [r5, #0]
 800ab90:	b103      	cbz	r3, 800ab94 <_kill_r+0x1c>
 800ab92:	6023      	str	r3, [r4, #0]
 800ab94:	bd38      	pop	{r3, r4, r5, pc}
 800ab96:	bf00      	nop
 800ab98:	2000050c 	.word	0x2000050c

0800ab9c <_getpid_r>:
 800ab9c:	f7f7 bbf6 	b.w	800238c <_getpid>

0800aba0 <__sread>:
 800aba0:	b510      	push	{r4, lr}
 800aba2:	460c      	mov	r4, r1
 800aba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aba8:	f000 f894 	bl	800acd4 <_read_r>
 800abac:	2800      	cmp	r0, #0
 800abae:	bfab      	itete	ge
 800abb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800abb2:	89a3      	ldrhlt	r3, [r4, #12]
 800abb4:	181b      	addge	r3, r3, r0
 800abb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800abba:	bfac      	ite	ge
 800abbc:	6563      	strge	r3, [r4, #84]	; 0x54
 800abbe:	81a3      	strhlt	r3, [r4, #12]
 800abc0:	bd10      	pop	{r4, pc}

0800abc2 <__swrite>:
 800abc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abc6:	461f      	mov	r7, r3
 800abc8:	898b      	ldrh	r3, [r1, #12]
 800abca:	05db      	lsls	r3, r3, #23
 800abcc:	4605      	mov	r5, r0
 800abce:	460c      	mov	r4, r1
 800abd0:	4616      	mov	r6, r2
 800abd2:	d505      	bpl.n	800abe0 <__swrite+0x1e>
 800abd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abd8:	2302      	movs	r3, #2
 800abda:	2200      	movs	r2, #0
 800abdc:	f000 f868 	bl	800acb0 <_lseek_r>
 800abe0:	89a3      	ldrh	r3, [r4, #12]
 800abe2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abe6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800abea:	81a3      	strh	r3, [r4, #12]
 800abec:	4632      	mov	r2, r6
 800abee:	463b      	mov	r3, r7
 800abf0:	4628      	mov	r0, r5
 800abf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abf6:	f000 b817 	b.w	800ac28 <_write_r>

0800abfa <__sseek>:
 800abfa:	b510      	push	{r4, lr}
 800abfc:	460c      	mov	r4, r1
 800abfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac02:	f000 f855 	bl	800acb0 <_lseek_r>
 800ac06:	1c43      	adds	r3, r0, #1
 800ac08:	89a3      	ldrh	r3, [r4, #12]
 800ac0a:	bf15      	itete	ne
 800ac0c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ac0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ac12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ac16:	81a3      	strheq	r3, [r4, #12]
 800ac18:	bf18      	it	ne
 800ac1a:	81a3      	strhne	r3, [r4, #12]
 800ac1c:	bd10      	pop	{r4, pc}

0800ac1e <__sclose>:
 800ac1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac22:	f000 b813 	b.w	800ac4c <_close_r>
	...

0800ac28 <_write_r>:
 800ac28:	b538      	push	{r3, r4, r5, lr}
 800ac2a:	4d07      	ldr	r5, [pc, #28]	; (800ac48 <_write_r+0x20>)
 800ac2c:	4604      	mov	r4, r0
 800ac2e:	4608      	mov	r0, r1
 800ac30:	4611      	mov	r1, r2
 800ac32:	2200      	movs	r2, #0
 800ac34:	602a      	str	r2, [r5, #0]
 800ac36:	461a      	mov	r2, r3
 800ac38:	f7f7 fbe7 	bl	800240a <_write>
 800ac3c:	1c43      	adds	r3, r0, #1
 800ac3e:	d102      	bne.n	800ac46 <_write_r+0x1e>
 800ac40:	682b      	ldr	r3, [r5, #0]
 800ac42:	b103      	cbz	r3, 800ac46 <_write_r+0x1e>
 800ac44:	6023      	str	r3, [r4, #0]
 800ac46:	bd38      	pop	{r3, r4, r5, pc}
 800ac48:	2000050c 	.word	0x2000050c

0800ac4c <_close_r>:
 800ac4c:	b538      	push	{r3, r4, r5, lr}
 800ac4e:	4d06      	ldr	r5, [pc, #24]	; (800ac68 <_close_r+0x1c>)
 800ac50:	2300      	movs	r3, #0
 800ac52:	4604      	mov	r4, r0
 800ac54:	4608      	mov	r0, r1
 800ac56:	602b      	str	r3, [r5, #0]
 800ac58:	f7f7 fbf3 	bl	8002442 <_close>
 800ac5c:	1c43      	adds	r3, r0, #1
 800ac5e:	d102      	bne.n	800ac66 <_close_r+0x1a>
 800ac60:	682b      	ldr	r3, [r5, #0]
 800ac62:	b103      	cbz	r3, 800ac66 <_close_r+0x1a>
 800ac64:	6023      	str	r3, [r4, #0]
 800ac66:	bd38      	pop	{r3, r4, r5, pc}
 800ac68:	2000050c 	.word	0x2000050c

0800ac6c <_fstat_r>:
 800ac6c:	b538      	push	{r3, r4, r5, lr}
 800ac6e:	4d07      	ldr	r5, [pc, #28]	; (800ac8c <_fstat_r+0x20>)
 800ac70:	2300      	movs	r3, #0
 800ac72:	4604      	mov	r4, r0
 800ac74:	4608      	mov	r0, r1
 800ac76:	4611      	mov	r1, r2
 800ac78:	602b      	str	r3, [r5, #0]
 800ac7a:	f7f7 fbee 	bl	800245a <_fstat>
 800ac7e:	1c43      	adds	r3, r0, #1
 800ac80:	d102      	bne.n	800ac88 <_fstat_r+0x1c>
 800ac82:	682b      	ldr	r3, [r5, #0]
 800ac84:	b103      	cbz	r3, 800ac88 <_fstat_r+0x1c>
 800ac86:	6023      	str	r3, [r4, #0]
 800ac88:	bd38      	pop	{r3, r4, r5, pc}
 800ac8a:	bf00      	nop
 800ac8c:	2000050c 	.word	0x2000050c

0800ac90 <_isatty_r>:
 800ac90:	b538      	push	{r3, r4, r5, lr}
 800ac92:	4d06      	ldr	r5, [pc, #24]	; (800acac <_isatty_r+0x1c>)
 800ac94:	2300      	movs	r3, #0
 800ac96:	4604      	mov	r4, r0
 800ac98:	4608      	mov	r0, r1
 800ac9a:	602b      	str	r3, [r5, #0]
 800ac9c:	f7f7 fbed 	bl	800247a <_isatty>
 800aca0:	1c43      	adds	r3, r0, #1
 800aca2:	d102      	bne.n	800acaa <_isatty_r+0x1a>
 800aca4:	682b      	ldr	r3, [r5, #0]
 800aca6:	b103      	cbz	r3, 800acaa <_isatty_r+0x1a>
 800aca8:	6023      	str	r3, [r4, #0]
 800acaa:	bd38      	pop	{r3, r4, r5, pc}
 800acac:	2000050c 	.word	0x2000050c

0800acb0 <_lseek_r>:
 800acb0:	b538      	push	{r3, r4, r5, lr}
 800acb2:	4d07      	ldr	r5, [pc, #28]	; (800acd0 <_lseek_r+0x20>)
 800acb4:	4604      	mov	r4, r0
 800acb6:	4608      	mov	r0, r1
 800acb8:	4611      	mov	r1, r2
 800acba:	2200      	movs	r2, #0
 800acbc:	602a      	str	r2, [r5, #0]
 800acbe:	461a      	mov	r2, r3
 800acc0:	f7f7 fbe6 	bl	8002490 <_lseek>
 800acc4:	1c43      	adds	r3, r0, #1
 800acc6:	d102      	bne.n	800acce <_lseek_r+0x1e>
 800acc8:	682b      	ldr	r3, [r5, #0]
 800acca:	b103      	cbz	r3, 800acce <_lseek_r+0x1e>
 800accc:	6023      	str	r3, [r4, #0]
 800acce:	bd38      	pop	{r3, r4, r5, pc}
 800acd0:	2000050c 	.word	0x2000050c

0800acd4 <_read_r>:
 800acd4:	b538      	push	{r3, r4, r5, lr}
 800acd6:	4d07      	ldr	r5, [pc, #28]	; (800acf4 <_read_r+0x20>)
 800acd8:	4604      	mov	r4, r0
 800acda:	4608      	mov	r0, r1
 800acdc:	4611      	mov	r1, r2
 800acde:	2200      	movs	r2, #0
 800ace0:	602a      	str	r2, [r5, #0]
 800ace2:	461a      	mov	r2, r3
 800ace4:	f7f7 fb74 	bl	80023d0 <_read>
 800ace8:	1c43      	adds	r3, r0, #1
 800acea:	d102      	bne.n	800acf2 <_read_r+0x1e>
 800acec:	682b      	ldr	r3, [r5, #0]
 800acee:	b103      	cbz	r3, 800acf2 <_read_r+0x1e>
 800acf0:	6023      	str	r3, [r4, #0]
 800acf2:	bd38      	pop	{r3, r4, r5, pc}
 800acf4:	2000050c 	.word	0x2000050c

0800acf8 <_init>:
 800acf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acfa:	bf00      	nop
 800acfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acfe:	bc08      	pop	{r3}
 800ad00:	469e      	mov	lr, r3
 800ad02:	4770      	bx	lr

0800ad04 <_fini>:
 800ad04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad06:	bf00      	nop
 800ad08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad0a:	bc08      	pop	{r3}
 800ad0c:	469e      	mov	lr, r3
 800ad0e:	4770      	bx	lr
